
Ultrasound_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007ae0  08007ae0  00017ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f24  08007f24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f24  08007f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f2c  08007f2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f30  08007f30  00017f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001dc  08008110  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08008110  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135a6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002196  00000000  00000000  000337b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00036850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e05  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef2  00000000  00000000  0005f495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ba2  00000000  00000000  00070387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f8  00000000  00000000  00165f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ac4 	.word	0x08007ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007ac4 	.word	0x08007ac4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fc9d 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f829 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 f969 	bl	8001224 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f52:	f000 f877 	bl	8001044 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f56:	f000 f8e7 	bl	8001128 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 f933 	bl	80011c4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  	  distance=getDistance_TRIG_INPUT();
 8000f5e:	f000 f9d3 	bl	8001308 <getDistance_TRIG_INPUT>
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
		  //Print to UART terminal for debugging
		  sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff faee 	bl	8000548 <__aeabi_f2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4908      	ldr	r1, [pc, #32]	; (8000f94 <main+0x54>)
 8000f72:	4809      	ldr	r0, [pc, #36]	; (8000f98 <main+0x58>)
 8000f74:	f004 fb7c 	bl	8005670 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <main+0x58>)
 8000f7a:	f7ff f929 	bl	80001d0 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	4904      	ldr	r1, [pc, #16]	; (8000f98 <main+0x58>)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <main+0x5c>)
 8000f88:	f003 fa08 	bl	800439c <HAL_UART_Transmit>

		  HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f000 fcf5 	bl	800197c <HAL_Delay>
	  	  distance=getDistance_TRIG_INPUT();
 8000f92:	e7e4      	b.n	8000f5e <main+0x1e>
 8000f94:	08007ae0 	.word	0x08007ae0
 8000f98:	200002a8 	.word	0x200002a8
 8000f9c:	2000030c 	.word	0x2000030c

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b096      	sub	sp, #88	; 0x58
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2244      	movs	r2, #68	; 0x44
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 feec 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc6:	f000 fff7 	bl	8001fb8 <HAL_PWREx_ControlVoltageScaling>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fd0:	f000 fa3e 	bl	8001450 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f82e 	bl	8002064 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800100e:	f000 fa1f 	bl	8001450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fc00 	bl	8002830 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001036:	f000 fa0b 	bl	8001450 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3758      	adds	r7, #88	; 0x58
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_TIM3_Init+0xdc>)
 8001072:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <MX_TIM3_Init+0xe0>)
 8001074:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <MX_TIM3_Init+0xdc>)
 8001078:	224f      	movs	r2, #79	; 0x4f
 800107a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_TIM3_Init+0xdc>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <MX_TIM3_Init+0xdc>)
 8001084:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001088:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_TIM3_Init+0xdc>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_TIM3_Init+0xdc>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001096:	4822      	ldr	r0, [pc, #136]	; (8001120 <MX_TIM3_Init+0xdc>)
 8001098:	f002 fa8c 	bl	80035b4 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80010a2:	f000 f9d5 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	4619      	mov	r1, r3
 80010b2:	481b      	ldr	r0, [pc, #108]	; (8001120 <MX_TIM3_Init+0xdc>)
 80010b4:	f002 fcf1 	bl	8003a9a <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010be:	f000 f9c7 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <MX_TIM3_Init+0xdc>)
 80010c4:	f002 facd 	bl	8003662 <HAL_TIM_IC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80010ce:	f000 f9bf 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <MX_TIM3_Init+0xdc>)
 80010e2:	f003 f867 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80010ec:	f000 f9b0 	bl	8001450 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010f0:	230a      	movs	r3, #10
 80010f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f4:	2301      	movs	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_TIM3_Init+0xdc>)
 8001108:	f002 fc2b 	bl	8003962 <HAL_TIM_IC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001112:	f000 f99d 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3730      	adds	r7, #48	; 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000025c 	.word	0x2000025c
 8001124:	40000400 	.word	0x40000400

08001128 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_TIM4_Init+0x94>)
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <MX_TIM4_Init+0x98>)
 800114a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_TIM4_Init+0x94>)
 800114e:	224f      	movs	r2, #79	; 0x4f
 8001150:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM4_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_TIM4_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_TIM4_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_TIM4_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <MX_TIM4_Init+0x94>)
 800116c:	f002 fa22 	bl	80035b4 <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001176:	f000 f96b 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_TIM4_Init+0x94>)
 8001188:	f002 fc87 	bl	8003a9a <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001192:	f000 f95d 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_TIM4_Init+0x94>)
 80011a4:	f003 f806 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011ae:	f000 f94f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000210 	.word	0x20000210
 80011c0:	40000800 	.word	0x40000800

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <MX_USART2_UART_Init+0x5c>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USART2_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART2_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USART2_UART_Init+0x58>)
 8001208:	f003 f87a 	bl	8004300 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 f91d 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000030c 	.word	0x2000030c
 8001220:	40004400 	.word	0x40004400

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_GPIO_Init+0x7c>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MX_GPIO_Init+0x7c>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_GPIO_Init+0x7c>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fe87 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800125e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001262:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f000 fcb6 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800127c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001280:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f000 fca9 	bl	8001be8 <HAL_GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d801      	bhi.n	80012b6 <usDelay+0x12>
 80012b2:	2302      	movs	r3, #2
 80012b4:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <usDelay+0x60>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <usDelay+0x60>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <usDelay+0x60>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <usDelay+0x60>)
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <usDelay+0x60>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <usDelay+0x60>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 80012dc:	bf00      	nop
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <usDelay+0x60>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d1f9      	bne.n	80012de <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <usDelay+0x60>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <usDelay+0x60>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6113      	str	r3, [r2, #16]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40000800 	.word	0x40000800

08001308 <getDistance_TRIG_INPUT>:

float getDistance_TRIG_INPUT()
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	float distance;
	uint32_t numTicks = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f000 fe26 	bl	8001f6c <HAL_GPIO_WritePin>
	usDelay(3);
 8001320:	2003      	movs	r0, #3
 8001322:	f7ff ffbf 	bl	80012a4 <usDelay>

	//*** START Ultrasonic measure routine ***//
	//1. Output 10 usec TRIGGER
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f000 fe1c 	bl	8001f6c <HAL_GPIO_WritePin>
	usDelay(10);
 8001334:	200a      	movs	r0, #10
 8001336:	f7ff ffb5 	bl	80012a4 <usDelay>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f000 fe12 	bl	8001f6c <HAL_GPIO_WritePin>

	//2. Wait for ECHO pin rising edge
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8001348:	bf00      	nop
 800134a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f000 fdf3 	bl	8001f3c <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f6      	beq.n	800134a <getDistance_TRIG_INPUT+0x42>

	//3. Start measuring ECHO pulse width in usec
	numTicks = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001360:	e005      	b.n	800136e <getDistance_TRIG_INPUT+0x66>
	{
		numTicks++;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
		usDelay(2); //2.8usec
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff ff9b 	bl	80012a4 <usDelay>
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 800136e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f000 fde1 	bl	8001f3c <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d0f0      	beq.n	8001362 <getDistance_TRIG_INPUT+0x5a>
	};

	//4. Estimate distance in cm
	distance = (numTicks + 0.0f)*2.8*speedOfSound;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80013e8 <getDistance_TRIG_INPUT+0xe0>
 800138e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001392:	ee17 0a90 	vmov	r0, s15
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	a311      	add	r3, pc, #68	; (adr r3, 80013e0 <getDistance_TRIG_INPUT+0xd8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f92a 	bl	80005f8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <getDistance_TRIG_INPUT+0xe4>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ca 	bl	8000548 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff f91c 	bl	80005f8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbee 	bl	8000ba8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	603b      	str	r3, [r7, #0]
	return distance;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	ee07 3a90 	vmov	s15, r3

}
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	66666666 	.word	0x66666666
 80013e4:	40066666 	.word	0x40066666
 80013e8:	00000000 	.word	0x00000000
 80013ec:	3c8c7e28 	.word	0x3c8c7e28

080013f0 <HAL_TIM_IC_CaptureCallback>:
	  }
	  return distance;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
		if(captureIdx == 0) //Fisrt edge
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_TIM_IC_CaptureCallback+0x50>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10a      	bne.n	8001416 <HAL_TIM_IC_CaptureCallback+0x26>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 8001400:	2100      	movs	r1, #0
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f002 fc12 	bl	8003c2c <HAL_TIM_ReadCapturedValue>
 8001408:	4603      	mov	r3, r0
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_TIM_IC_CaptureCallback+0x54>)
 800140c:	6013      	str	r3, [r2, #0]

			captureIdx = 1;
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 8001414:	e010      	b.n	8001438 <HAL_TIM_IC_CaptureCallback+0x48>
		else if(captureIdx == 1) //Second edge
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10c      	bne.n	8001438 <HAL_TIM_IC_CaptureCallback+0x48>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800141e:	2100      	movs	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f002 fc03 	bl	8003c2c <HAL_TIM_ReadCapturedValue>
 8001426:	4603      	mov	r3, r0
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x58>)
 800142a:	6013      	str	r3, [r2, #0]
			captureIdx = 0;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_TIM_IC_CaptureCallback+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200001f9 	.word	0x200001f9
 8001444:	200001fc 	.word	0x200001fc
 8001448:	20000200 	.word	0x20000200
 800144c:	200001f8 	.word	0x200001f8

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_MspInit+0x44>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_MspInit+0x44>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6613      	str	r3, [r2, #96]	; 0x60
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_MspInit+0x44>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_MspInit+0x44>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6593      	str	r3, [r2, #88]	; 0x58
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001492:	2004      	movs	r0, #4
 8001494:	f000 fb66 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a24      	ldr	r2, [pc, #144]	; (8001554 <HAL_TIM_Base_MspInit+0xb0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d131      	bne.n	800152a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	4a23      	ldr	r2, [pc, #140]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6593      	str	r3, [r2, #88]	; 0x58
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001506:	2302      	movs	r3, #2
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f000 fb68 	bl	8001be8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	201d      	movs	r0, #29
 800151e:	f000 fb2c 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001522:	201d      	movs	r0, #29
 8001524:	f000 fb45 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001528:	e010      	b.n	800154c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM4)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_TIM_Base_MspInit+0xb8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10b      	bne.n	800154c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6593      	str	r3, [r2, #88]	; 0x58
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_TIM_Base_MspInit+0xb4>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40000400 	.word	0x40000400
 8001558:	40021000 	.word	0x40021000
 800155c:	40000800 	.word	0x40000800

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ac      	sub	sp, #176	; 0xb0
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2288      	movs	r2, #136	; 0x88
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fc03 	bl	8004d8c <memset>
  if(huart->Instance==USART2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_UART_MspInit+0xb0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d13b      	bne.n	8001608 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001590:	2302      	movs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fb4d 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a8:	f7ff ff52 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_UART_MspInit+0xb4>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_UART_MspInit+0xb4>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	6593      	str	r3, [r2, #88]	; 0x58
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_UART_MspInit+0xb4>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_UART_MspInit+0xb4>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <HAL_UART_MspInit+0xb4>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_UART_MspInit+0xb4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015dc:	230c      	movs	r3, #12
 80015de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f4:	2307      	movs	r3, #7
 80015f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f000 faf0 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	37b0      	adds	r7, #176	; 0xb0
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40004400 	.word	0x40004400
 8001614:	40021000 	.word	0x40021000

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 f96a 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <TIM3_IRQHandler+0x10>)
 8001672:	f002 f857 	bl	8003724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000025c 	.word	0x2000025c

08001680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_kill>:

int _kill(int pid, int sig)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800169a:	f003 fb4d 	bl	8004d38 <__errno>
 800169e:	4603      	mov	r3, r0
 80016a0:	2216      	movs	r2, #22
 80016a2:	601a      	str	r2, [r3, #0]
	return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_exit>:

void _exit (int status)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ffe7 	bl	8001690 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016c2:	e7fe      	b.n	80016c2 <_exit+0x12>

080016c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00a      	b.n	80016ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d6:	f3af 8000 	nop.w
 80016da:	4601      	mov	r1, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf0      	blt.n	80016d6 <_read+0x12>
	}

return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf1      	blt.n	8001710 <_write+0x12>
	}
	return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175e:	605a      	str	r2, [r3, #4]
	return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f003 fab2 	bl	8004d38 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20018000 	.word	0x20018000
 8001800:	00000400 	.word	0x00000400
 8001804:	20000204 	.word	0x20000204
 8001808:	200003a8 	.word	0x200003a8

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 fa71 	bl	8004d44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001862:	f7ff fb6d 	bl	8000f40 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001874:	08007f34 	.word	0x08007f34
  ldr r2, =_sbss
 8001878:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800187c:	200003a4 	.word	0x200003a4

08001880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>
	...

08001884 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_Init+0x3c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_Init+0x3c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	2003      	movs	r0, #3
 800189c:	f000 f962 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a0:	2001      	movs	r0, #1
 80018a2:	f000 f80f 	bl	80018c4 <HAL_InitTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	e001      	b.n	80018b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b2:	f7ff fdd3 	bl	800145c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_InitTick+0x6c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_InitTick+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_InitTick+0x6c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f96d 	bl	8001bce <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d809      	bhi.n	8001914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f937 	bl	8001b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_InitTick+0x74>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e007      	b.n	8001924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e004      	b.n	8001924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e001      	b.n	8001924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	20000390 	.word	0x20000390

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000390 	.word	0x20000390

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_Delay+0x44>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffde 	bl	8001964 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000008 	.word	0x20000008

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e17f      	b.n	8001ef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8171 	beq.w	8001ef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d005      	beq.n	8001c28 <HAL_GPIO_Init+0x40>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d130      	bne.n	8001c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 0201 	and.w	r2, r3, #1
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d118      	bne.n	8001cc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d017      	beq.n	8001d04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ac 	beq.w	8001ef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	4a5e      	ldr	r2, [pc, #376]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6613      	str	r3, [r2, #96]	; 0x60
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db2:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x242>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x338>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x23e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x33c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x23a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x340>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x236>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x344>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x232>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <HAL_GPIO_Init+0x348>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x22e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_GPIO_Init+0x34c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x22a>
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e00c      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00a      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e3c:	4937      	ldr	r1, [pc, #220]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e6e:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f47f ae78 	bne.w	8001bf8 <HAL_GPIO_Init+0x10>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000c00 	.word	0x48000c00
 8001f2c:	48001000 	.word	0x48001000
 8001f30:	48001400 	.word	0x48001400
 8001f34:	48001800 	.word	0x48001800
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc6:	d130      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd4:	d038      	beq.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2232      	movs	r2, #50	; 0x32
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	e002      	b.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3b01      	subs	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002010:	d102      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f2      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	d110      	bne.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e00f      	b.n	800204a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d007      	beq.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40007000 	.word	0x40007000
 800205c:	20000000 	.word	0x20000000
 8002060:	431bde83 	.word	0x431bde83

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e3d4      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4ba1      	ldr	r3, [pc, #644]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002080:	4b9e      	ldr	r3, [pc, #632]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80e4 	beq.w	8002260 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_RCC_OscConfig+0x4a>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	f040 808b 	bne.w	80021bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f040 8087 	bne.w	80021bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ae:	4b93      	ldr	r3, [pc, #588]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e3ac      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_RCC_OscConfig+0x7c>
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020de:	e005      	b.n	80020ec <HAL_RCC_OscConfig+0x88>
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d223      	bcs.n	8002138 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fd41 	bl	8002b7c <RCC_SetFlashLatencyFromMSIRange>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e38d      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002104:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a7c      	ldr	r2, [pc, #496]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4977      	ldr	r1, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	4972      	ldr	r1, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e025      	b.n	8002184 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6f      	ldr	r2, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	496a      	ldr	r1, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002156:	4b69      	ldr	r3, [pc, #420]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	4965      	ldr	r1, [pc, #404]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fd01 	bl	8002b7c <RCC_SetFlashLatencyFromMSIRange>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e34d      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002184:	f000 fc36 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	495a      	ldr	r1, [pc, #360]	; (8002300 <HAL_RCC_OscConfig+0x29c>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_OscConfig+0x2a0>)
 80021a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_OscConfig+0x2a4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fb8b 	bl	80018c4 <HAL_InitTick>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d052      	beq.n	800225e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	e331      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fbc8 	bl	8001964 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d8:	f7ff fbc4 	bl	8001964 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e31a      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ea:	4b44      	ldr	r3, [pc, #272]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a40      	ldr	r2, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	493b      	ldr	r1, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	4936      	ldr	r1, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e01a      	b.n	8002260 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002236:	f7ff fb95 	bl	8001964 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223e:	f7ff fb91 	bl	8001964 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e2e7      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x1da>
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d074      	beq.n	8002356 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x21a>
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d10e      	bne.n	8002296 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d064      	beq.n	8002354 <HAL_RCC_OscConfig+0x2f0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d160      	bne.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e2c4      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x24a>
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e01d      	b.n	80022ea <HAL_RCC_OscConfig+0x286>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x26e>
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x286>
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01c      	beq.n	800232c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff fb37 	bl	8001964 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f8:	e011      	b.n	800231e <HAL_RCC_OscConfig+0x2ba>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	08007af8 	.word	0x08007af8
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fb2a 	bl	8001964 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e280      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	4baf      	ldr	r3, [pc, #700]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x2a8>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff fb1a 	bl	8001964 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fb16 	bl	8001964 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e26c      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002346:	4ba5      	ldr	r3, [pc, #660]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x2d0>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d060      	beq.n	8002424 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x310>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d119      	bne.n	80023a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d116      	bne.n	80023a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	4b99      	ldr	r3, [pc, #612]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x328>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e249      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b93      	ldr	r3, [pc, #588]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	4990      	ldr	r1, [pc, #576]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a0:	e040      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d023      	beq.n	80023f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a8b      	ldr	r2, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff fad5 	bl	8001964 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7ff fad1 	bl	8001964 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e227      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	497c      	ldr	r1, [pc, #496]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e018      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	4b7a      	ldr	r3, [pc, #488]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a79      	ldr	r2, [pc, #484]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff fab1 	bl	8001964 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff faad 	bl	8001964 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e203      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03c      	beq.n	80024aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01c      	beq.n	8002472 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	4a67      	ldr	r2, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7ff fa8c 	bl	8001964 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff fa88 	bl	8001964 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1de      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002462:	4b5e      	ldr	r3, [pc, #376]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCC_OscConfig+0x3ec>
 8002470:	e01b      	b.n	80024aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff fa6f 	bl	8001964 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7ff fa6b 	bl	8001964 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1c1      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ef      	bne.n	800248a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80a6 	beq.w	8002604 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024bc:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b44      	ldr	r3, [pc, #272]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
 80024d4:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d118      	bne.n	8002522 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3a      	ldr	r2, [pc, #232]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fc:	f7ff fa32 	bl	8001964 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7ff fa2e 	bl	8001964 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e184      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x4d8>
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253a:	e024      	b.n	8002586 <HAL_RCC_OscConfig+0x522>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d110      	bne.n	8002566 <HAL_RCC_OscConfig+0x502>
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002564:	e00f      	b.n	8002586 <HAL_RCC_OscConfig+0x522>
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff f9e9 	bl	8001964 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7ff f9e5 	bl	8001964 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e139      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ed      	beq.n	8002596 <HAL_RCC_OscConfig+0x532>
 80025ba:	e01a      	b.n	80025f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7ff f9d2 	bl	8001964 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7ff f9ce 	bl	8001964 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d906      	bls.n	80025e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e122      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e4:	4b90      	ldr	r3, [pc, #576]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e8      	bne.n	80025c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4b8b      	ldr	r3, [pc, #556]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	4a8a      	ldr	r2, [pc, #552]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8108 	beq.w	800281e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	2b02      	cmp	r3, #2
 8002614:	f040 80d0 	bne.w	80027b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002618:	4b83      	ldr	r3, [pc, #524]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d130      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	3b01      	subs	r3, #1
 8002638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d127      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d11f      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002658:	2a07      	cmp	r2, #7
 800265a:	bf14      	ite	ne
 800265c:	2201      	movne	r2, #1
 800265e:	2200      	moveq	r2, #0
 8002660:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002662:	4293      	cmp	r3, r2
 8002664:	d113      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d109      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d06e      	beq.n	800276c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d069      	beq.n	8002768 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002694:	4b64      	ldr	r3, [pc, #400]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b7      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026b0:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a5c      	ldr	r2, [pc, #368]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026bc:	f7ff f952 	bl	8001964 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f94e 	bl	8001964 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0a4      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b51      	ldr	r3, [pc, #324]	; (800282c <HAL_RCC_OscConfig+0x7c8>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026f2:	3a01      	subs	r2, #1
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026fc:	0212      	lsls	r2, r2, #8
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002704:	0852      	lsrs	r2, r2, #1
 8002706:	3a01      	subs	r2, #1
 8002708:	0552      	lsls	r2, r2, #21
 800270a:	4311      	orrs	r1, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002710:	0852      	lsrs	r2, r2, #1
 8002712:	3a01      	subs	r2, #1
 8002714:	0652      	lsls	r2, r2, #25
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800271c:	0912      	lsrs	r2, r2, #4
 800271e:	0452      	lsls	r2, r2, #17
 8002720:	430a      	orrs	r2, r1
 8002722:	4941      	ldr	r1, [pc, #260]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a3e      	ldr	r2, [pc, #248]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800272e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002734:	4b3c      	ldr	r3, [pc, #240]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a3b      	ldr	r2, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002740:	f7ff f910 	bl	8001964 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7ff f90c 	bl	8001964 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e062      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002766:	e05a      	b.n	800281e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e059      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276c:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d152      	bne.n	800281e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002790:	f7ff f8e8 	bl	8001964 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff f8e4 	bl	8001964 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e03a      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x734>
 80027b6:	e032      	b.n	800281e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d02d      	beq.n	800281a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a13      	ldr	r2, [pc, #76]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027dc:	f023 0303 	bic.w	r3, r3, #3
 80027e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 80027e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7ff f8b7 	bl	8001964 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7ff f8b3 	bl	8001964 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e009      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_OscConfig+0x7c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x796>
 8002818:	e001      	b.n	800281e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000
 800282c:	f99d808c 	.word	0xf99d808c

08002830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0c8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d910      	bls.n	8002874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0207 	bic.w	r2, r3, #7
 800285a:	4961      	ldr	r1, [pc, #388]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b0      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d04c      	beq.n	800291a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002888:	4b56      	ldr	r3, [pc, #344]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d121      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e09e      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d115      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e092      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b8:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e086      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c8:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e07e      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d8:	4b42      	ldr	r3, [pc, #264]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 0203 	bic.w	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	493f      	ldr	r1, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ea:	f7ff f83b 	bl	8001964 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7ff f837 	bl	8001964 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e066      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002908:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 020c 	and.w	r2, r3, #12
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	429a      	cmp	r2, r3
 8002918:	d1eb      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002926:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	492c      	ldr	r1, [pc, #176]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d210      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0207 	bic.w	r2, r3, #7
 800294e:	4924      	ldr	r1, [pc, #144]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e036      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4918      	ldr	r1, [pc, #96]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4910      	ldr	r1, [pc, #64]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a6:	f000 f825 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCC_ClockConfig+0x1b4>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490c      	ldr	r1, [pc, #48]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe ff7a 	bl	80018c4 <HAL_InitTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80029d4:	7afb      	ldrb	r3, [r7, #11]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08007af8 	.word	0x08007af8
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d121      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d11e      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a34:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e005      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a50:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	e004      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d134      	bne.n	8002aec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a82:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d003      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xac>
 8002a98:	e005      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a9c:	617b      	str	r3, [r7, #20]
      break;
 8002a9e:	e005      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aa2:	617b      	str	r3, [r7, #20]
      break;
 8002aa4:	e002      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	617b      	str	r3, [r7, #20]
      break;
 8002aaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	fb02 f203 	mul.w	r2, r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	0e5b      	lsrs	r3, r3, #25
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	3301      	adds	r3, #1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aec:	69bb      	ldr	r3, [r7, #24]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08007b10 	.word	0x08007b10
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4904      	ldr	r1, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08007b08 	.word	0x08007b08

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b54:	f7ff ffda 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0adb      	lsrs	r3, r3, #11
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08007b08 	.word	0x08007b08

08002b7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b94:	f7ff fa02 	bl	8001f9c <HAL_PWREx_GetVoltageRange>
 8002b98:	6178      	str	r0, [r7, #20]
 8002b9a:	e014      	b.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb4:	f7ff f9f2 	bl	8001f9c <HAL_PWREx_GetVoltageRange>
 8002bb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bcc:	d10b      	bne.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d919      	bls.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002bd8:	d902      	bls.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bda:	2302      	movs	r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	e013      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e010      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d902      	bls.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bec:	2303      	movs	r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e00a      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d102      	bne.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e004      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d101      	bne.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c04:	2301      	movs	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 0207 	bic.w	r2, r3, #7
 8002c10:	4909      	ldr	r1, [pc, #36]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d041      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c60:	d02a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c66:	d824      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c6c:	d008      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c72:	d81e      	bhi.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7c:	d010      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c80:	4b86      	ldr	r3, [pc, #536]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a85      	ldr	r2, [pc, #532]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8c:	e015      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fabb 	bl	8003210 <RCCEx_PLLSAI1_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9e:	e00c      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3320      	adds	r3, #32
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fba6 	bl	80033f8 <RCCEx_PLLSAI2_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cb0:	e003      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cb6:	e000      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cc0:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cce:	4973      	ldr	r1, [pc, #460]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cd6:	e001      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d041      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cf0:	d02a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002cf6:	d824      	bhi.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d02:	d81e      	bhi.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d0e:	e018      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d10:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a61      	ldr	r2, [pc, #388]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d1c:	e015      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fa73 	bl	8003210 <RCCEx_PLLSAI1_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d2e:	e00c      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3320      	adds	r3, #32
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fb5e 	bl	80033f8 <RCCEx_PLLSAI2_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d40:	e003      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	74fb      	strb	r3, [r7, #19]
      break;
 8002d46:	e000      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d50:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5e:	494f      	ldr	r1, [pc, #316]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d66:	e001      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a0 	beq.w	8002eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002da0:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dac:	2301      	movs	r3, #1
 8002dae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3a      	ldr	r2, [pc, #232]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe fdd2 	bl	8001964 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc2:	e009      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe fdce 	bl	8001964 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d902      	bls.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	74fb      	strb	r3, [r7, #19]
        break;
 8002dd6:	e005      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ef      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d15c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01f      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d019      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e08:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d016      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fd8d 	bl	8001964 <HAL_GetTick>
 8002e4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fd89 	bl	8001964 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d902      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	74fb      	strb	r3, [r7, #19]
            break;
 8002e64:	e006      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ec      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e92:	e009      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
 8002e98:	e006      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea8:	7c7b      	ldrb	r3, [r7, #17]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b9e      	ldr	r3, [pc, #632]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a9d      	ldr	r2, [pc, #628]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec6:	4b98      	ldr	r3, [pc, #608]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f023 0203 	bic.w	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	4994      	ldr	r1, [pc, #592]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee8:	4b8f      	ldr	r3, [pc, #572]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 020c 	bic.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	498c      	ldr	r1, [pc, #560]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f0a:	4b87      	ldr	r3, [pc, #540]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4983      	ldr	r1, [pc, #524]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f2c:	4b7e      	ldr	r3, [pc, #504]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	497b      	ldr	r1, [pc, #492]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	4972      	ldr	r1, [pc, #456]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f70:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	496a      	ldr	r1, [pc, #424]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f92:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	4961      	ldr	r1, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fb4:	4b5c      	ldr	r3, [pc, #368]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc2:	4959      	ldr	r1, [pc, #356]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd6:	4b54      	ldr	r3, [pc, #336]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe4:	4950      	ldr	r1, [pc, #320]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ff8:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	4948      	ldr	r1, [pc, #288]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800301a:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	493f      	ldr	r1, [pc, #252]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d028      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	4937      	ldr	r1, [pc, #220]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305a:	d106      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a31      	ldr	r2, [pc, #196]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003066:	60d3      	str	r3, [r2, #12]
 8003068:	e011      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003072:	d10c      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f8c8 	bl	8003210 <RCCEx_PLLSAI1_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d028      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	491f      	ldr	r1, [pc, #124]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b8:	d106      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c4:	60d3      	str	r3, [r2, #12]
 80030c6:	e011      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d0:	d10c      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f899 	bl	8003210 <RCCEx_PLLSAI1_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02b      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003116:	d109      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a02      	ldr	r2, [pc, #8]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003122:	60d3      	str	r3, [r2, #12]
 8003124:	e014      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	2101      	movs	r1, #1
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f867 	bl	8003210 <RCCEx_PLLSAI1_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02f      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316a:	4928      	ldr	r1, [pc, #160]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800317a:	d10d      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f844 	bl	8003210 <RCCEx_PLLSAI1_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d014      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	74bb      	strb	r3, [r7, #18]
 8003196:	e011      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a0:	d10c      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3320      	adds	r3, #32
 80031a6:	2102      	movs	r1, #2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f925 	bl	80033f8 <RCCEx_PLLSAI2_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d6:	490d      	ldr	r1, [pc, #52]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	4904      	ldr	r1, [pc, #16]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003202:	7cbb      	ldrb	r3, [r7, #18]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000

08003210 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800321e:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800322a:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0203 	and.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d10d      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
       ||
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003242:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
       ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d047      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	e044      	b.n	80032e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d018      	beq.n	8003296 <RCCEx_PLLSAI1_Config+0x86>
 8003264:	2b03      	cmp	r3, #3
 8003266:	d825      	bhi.n	80032b4 <RCCEx_PLLSAI1_Config+0xa4>
 8003268:	2b01      	cmp	r3, #1
 800326a:	d002      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x62>
 800326c:	2b02      	cmp	r3, #2
 800326e:	d009      	beq.n	8003284 <RCCEx_PLLSAI1_Config+0x74>
 8003270:	e020      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003272:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11d      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003282:	e01a      	b.n	80032ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003284:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003294:	e013      	b.n	80032be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032b2:	e006      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e004      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	430b      	orrs	r3, r1
 80032e0:	4944      	ldr	r1, [pc, #272]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d17d      	bne.n	80033e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fe fb34 	bl	8001964 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032fe:	e009      	b.n	8003314 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003300:	f7fe fb30 	bl	8001964 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d902      	bls.n	8003314 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	73fb      	strb	r3, [r7, #15]
        break;
 8003312:	e005      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003314:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ef      	bne.n	8003300 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d160      	bne.n	80033e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d111      	bne.n	8003350 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6892      	ldr	r2, [r2, #8]
 800333c:	0211      	lsls	r1, r2, #8
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	0912      	lsrs	r2, r2, #4
 8003344:	0452      	lsls	r2, r2, #17
 8003346:	430a      	orrs	r2, r1
 8003348:	492a      	ldr	r1, [pc, #168]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	610b      	str	r3, [r1, #16]
 800334e:	e027      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d112      	bne.n	800337c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800335e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	0211      	lsls	r1, r2, #8
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6912      	ldr	r2, [r2, #16]
 800336c:	0852      	lsrs	r2, r2, #1
 800336e:	3a01      	subs	r2, #1
 8003370:	0552      	lsls	r2, r2, #21
 8003372:	430a      	orrs	r2, r1
 8003374:	491f      	ldr	r1, [pc, #124]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	610b      	str	r3, [r1, #16]
 800337a:	e011      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003384:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6892      	ldr	r2, [r2, #8]
 800338c:	0211      	lsls	r1, r2, #8
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6952      	ldr	r2, [r2, #20]
 8003392:	0852      	lsrs	r2, r2, #1
 8003394:	3a01      	subs	r2, #1
 8003396:	0652      	lsls	r2, r2, #25
 8003398:	430a      	orrs	r2, r1
 800339a:	4916      	ldr	r1, [pc, #88]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe fada 	bl	8001964 <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033b2:	e009      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033b4:	f7fe fad6 	bl	8001964 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d902      	bls.n	80033c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	73fb      	strb	r3, [r7, #15]
          break;
 80033c6:	e005      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ef      	beq.n	80033b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000

080033f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003406:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d018      	beq.n	8003444 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003412:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0203 	and.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d10d      	bne.n	800343e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
       ||
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800342a:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
       ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d047      	beq.n	80034ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	e044      	b.n	80034ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d018      	beq.n	800347e <RCCEx_PLLSAI2_Config+0x86>
 800344c:	2b03      	cmp	r3, #3
 800344e:	d825      	bhi.n	800349c <RCCEx_PLLSAI2_Config+0xa4>
 8003450:	2b01      	cmp	r3, #1
 8003452:	d002      	beq.n	800345a <RCCEx_PLLSAI2_Config+0x62>
 8003454:	2b02      	cmp	r3, #2
 8003456:	d009      	beq.n	800346c <RCCEx_PLLSAI2_Config+0x74>
 8003458:	e020      	b.n	800349c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800345a:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11d      	bne.n	80034a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346a:	e01a      	b.n	80034a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347c:	e013      	b.n	80034a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800347e:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800348a:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800349a:	e006      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      break;
 80034a0:	e004      	b.n	80034ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	430b      	orrs	r3, r1
 80034c8:	4939      	ldr	r1, [pc, #228]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d167      	bne.n	80035a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a35      	ldr	r2, [pc, #212]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fe fa40 	bl	8001964 <HAL_GetTick>
 80034e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034e6:	e009      	b.n	80034fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e8:	f7fe fa3c 	bl	8001964 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d902      	bls.n	80034fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	73fb      	strb	r3, [r7, #15]
        break;
 80034fa:	e005      	b.n	8003508 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ef      	bne.n	80034e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d14a      	bne.n	80035a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d111      	bne.n	8003538 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6892      	ldr	r2, [r2, #8]
 8003524:	0211      	lsls	r1, r2, #8
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68d2      	ldr	r2, [r2, #12]
 800352a:	0912      	lsrs	r2, r2, #4
 800352c:	0452      	lsls	r2, r2, #17
 800352e:	430a      	orrs	r2, r1
 8003530:	491f      	ldr	r1, [pc, #124]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	614b      	str	r3, [r1, #20]
 8003536:	e011      	b.n	800355c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	0211      	lsls	r1, r2, #8
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6912      	ldr	r2, [r2, #16]
 800354e:	0852      	lsrs	r2, r2, #1
 8003550:	3a01      	subs	r2, #1
 8003552:	0652      	lsls	r2, r2, #25
 8003554:	430a      	orrs	r2, r1
 8003556:	4916      	ldr	r1, [pc, #88]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	4313      	orrs	r3, r2
 800355a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe f9fc 	bl	8001964 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800356e:	e009      	b.n	8003584 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003570:	f7fe f9f8 	bl	8001964 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	73fb      	strb	r3, [r7, #15]
          break;
 8003582:	e005      	b.n	8003590 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4904      	ldr	r1, [pc, #16]	; (80035b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e049      	b.n	800365a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd ff62 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fb86 	bl	8003d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e049      	b.n	8003708 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f841 	bl	8003710 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 fb2f 	bl	8003d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0202 	mvn.w	r2, #2
 8003750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd fe42 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 faaa 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fab1 	bl	8003cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0204 	mvn.w	r2, #4
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fe18 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa80 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa87 	bl	8003cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0208 	mvn.w	r2, #8
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fdee 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa56 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa5d 	bl	8003cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b10      	cmp	r3, #16
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fdc4 	bl	80013f0 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa2c 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fa33 	bl	8003cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10e      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0201 	mvn.w	r2, #1
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa06 	bl	8003cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fd02 	bl	80042d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e2:	d10e      	bne.n	8003902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d107      	bne.n	8003902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fcf5 	bl	80042ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d10e      	bne.n	800392e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d107      	bne.n	800392e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f9e1 	bl	8003cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b20      	cmp	r3, #32
 800393a:	d10e      	bne.n	800395a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	d107      	bne.n	800395a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0220 	mvn.w	r2, #32
 8003952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fcb5 	bl	80042c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIM_IC_ConfigChannel+0x1e>
 800397c:	2302      	movs	r3, #2
 800397e:	e088      	b.n	8003a92 <HAL_TIM_IC_ConfigChannel+0x130>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11b      	bne.n	80039c6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f000 fa4b 	bl	8003e38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 020c 	bic.w	r2, r2, #12
 80039b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6999      	ldr	r1, [r3, #24]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
 80039c4:	e060      	b.n	8003a88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d11c      	bne.n	8003a06 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f000 fac9 	bl	8003f72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
 8003a04:	e040      	b.n	8003a88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f000 fb16 	bl	800404c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020c 	bic.w	r2, r2, #12
 8003a2e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69d9      	ldr	r1, [r3, #28]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	e021      	b.n	8003a88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d11c      	bne.n	8003a84 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 fb33 	bl	80040c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	61da      	str	r2, [r3, #28]
 8003a82:	e001      	b.n	8003a88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0b6      	b.n	8003c24 <HAL_TIM_ConfigClockSource+0x18a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	d03e      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xd8>
 8003af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af8:	f200 8087 	bhi.w	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b00:	f000 8086 	beq.w	8003c10 <HAL_TIM_ConfigClockSource+0x176>
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	d87f      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b0a:	2b70      	cmp	r3, #112	; 0x70
 8003b0c:	d01a      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xaa>
 8003b0e:	2b70      	cmp	r3, #112	; 0x70
 8003b10:	d87b      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b12:	2b60      	cmp	r3, #96	; 0x60
 8003b14:	d050      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0x11e>
 8003b16:	2b60      	cmp	r3, #96	; 0x60
 8003b18:	d877      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b1a:	2b50      	cmp	r3, #80	; 0x50
 8003b1c:	d03c      	beq.n	8003b98 <HAL_TIM_ConfigClockSource+0xfe>
 8003b1e:	2b50      	cmp	r3, #80	; 0x50
 8003b20:	d873      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d058      	beq.n	8003bd8 <HAL_TIM_ConfigClockSource+0x13e>
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d86f      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b2a:	2b30      	cmp	r3, #48	; 0x30
 8003b2c:	d064      	beq.n	8003bf8 <HAL_TIM_ConfigClockSource+0x15e>
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	d86b      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d060      	beq.n	8003bf8 <HAL_TIM_ConfigClockSource+0x15e>
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d867      	bhi.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d05c      	beq.n	8003bf8 <HAL_TIM_ConfigClockSource+0x15e>
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d05a      	beq.n	8003bf8 <HAL_TIM_ConfigClockSource+0x15e>
 8003b42:	e062      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f000 fb0e 	bl	8004174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	609a      	str	r2, [r3, #8]
      break;
 8003b70:	e04f      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f000 faf7 	bl	8004174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b94:	609a      	str	r2, [r3, #8]
      break;
 8003b96:	e03c      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f000 f9b5 	bl	8003f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2150      	movs	r1, #80	; 0x50
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fac4 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003bb6:	e02c      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f000 fa11 	bl	8003fec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2160      	movs	r1, #96	; 0x60
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fab4 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003bd6:	e01c      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	461a      	mov	r2, r3
 8003be6:	f000 f995 	bl	8003f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 faa4 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003bf6:	e00c      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 fa9b 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003c08:	e003      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0e:	e000      	b.n	8003c12 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d831      	bhi.n	8003ca4 <HAL_TIM_ReadCapturedValue+0x78>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	60fb      	str	r3, [r7, #12]

      break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	60fb      	str	r3, [r7, #12]

      break;
 8003c8e:	e00a      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	60fb      	str	r3, [r7, #12]

      break;
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	60fb      	str	r3, [r7, #12]

      break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ca4:	bf00      	nop
  }

  return tmpreg;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <TIM_Base_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d00f      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3d      	ldr	r2, [pc, #244]	; (8003e1c <TIM_Base_SetConfig+0x118>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <TIM_Base_SetConfig+0x11c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <TIM_Base_SetConfig+0x120>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	; (8003e28 <TIM_Base_SetConfig+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2f      	ldr	r2, [pc, #188]	; (8003e18 <TIM_Base_SetConfig+0x114>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01f      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d01b      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <TIM_Base_SetConfig+0x118>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d017      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <TIM_Base_SetConfig+0x11c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <TIM_Base_SetConfig+0x120>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00f      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <TIM_Base_SetConfig+0x124>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <TIM_Base_SetConfig+0x128>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <TIM_Base_SetConfig+0x12c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <TIM_Base_SetConfig+0x130>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <TIM_Base_SetConfig+0x114>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00f      	beq.n	8003dfc <TIM_Base_SetConfig+0xf8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <TIM_Base_SetConfig+0x124>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_Base_SetConfig+0xf8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <TIM_Base_SetConfig+0x128>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_Base_SetConfig+0xf8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <TIM_Base_SetConfig+0x12c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0xf8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <TIM_Base_SetConfig+0x130>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d103      	bne.n	8003e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	615a      	str	r2, [r3, #20]
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800

08003e38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <TIM_TI1_SetConfig+0xc4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d017      	beq.n	8003e96 <TIM_TI1_SetConfig+0x5e>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d013      	beq.n	8003e96 <TIM_TI1_SetConfig+0x5e>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <TIM_TI1_SetConfig+0xc8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00f      	beq.n	8003e96 <TIM_TI1_SetConfig+0x5e>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <TIM_TI1_SetConfig+0xcc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_TI1_SetConfig+0x5e>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <TIM_TI1_SetConfig+0xd0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_TI1_SetConfig+0x5e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <TIM_TI1_SetConfig+0xd4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_TI1_SetConfig+0x5e>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <TIM_TI1_SetConfig+0xd8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <TIM_TI1_SetConfig+0x62>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <TIM_TI1_SetConfig+0x64>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e003      	b.n	8003eba <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 030a 	bic.w	r3, r3, #10
 8003ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 030a 	and.w	r3, r3, #10
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000

08003f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 030a 	bic.w	r3, r3, #10
 8003f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f023 0210 	bic.w	r2, r3, #16
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	031b      	lsls	r3, r3, #12
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	621a      	str	r2, [r3, #32]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f023 0210 	bic.w	r2, r3, #16
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	031b      	lsls	r3, r3, #12
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0303 	bic.w	r3, r3, #3
 8004078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004088:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	b2db      	uxtb	r3, r3
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800409c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004102:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	031b      	lsls	r3, r3, #12
 8004108:	b29b      	uxth	r3, r3
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004116:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	031b      	lsls	r3, r3, #12
 800411c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	f043 0307 	orr.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800418e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e068      	b.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2e      	ldr	r2, [pc, #184]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2d      	ldr	r2, [pc, #180]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01d      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d018      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1a      	ldr	r2, [pc, #104]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d10c      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4313      	orrs	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40013400 	.word	0x40013400
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000

080042c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e040      	b.n	8004394 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd f91c 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2224      	movs	r2, #36	; 0x24
 800432c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8c0 	bl	80044c4 <UART_SetConfig>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e022      	b.n	8004394 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fb3e 	bl	80049d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800436a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800437a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fbc5 	bl	8004b1c <UART_CheckIdleState>
 8004392:	4603      	mov	r3, r0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	f040 8082 	bne.w	80044ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_UART_Transmit+0x26>
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07a      	b.n	80044bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_UART_Transmit+0x38>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e073      	b.n	80044bc <HAL_UART_Transmit+0x120>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2221      	movs	r2, #33	; 0x21
 80043e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ea:	f7fd fabb 	bl	8001964 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004408:	d108      	bne.n	800441c <HAL_UART_Transmit+0x80>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e003      	b.n	8004424 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800442c:	e02d      	b.n	800448a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fbb8 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e039      	b.n	80044bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445a:	b292      	uxth	r2, r2
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3302      	adds	r3, #2
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e008      	b.n	8004478 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b292      	uxth	r2, r2
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1cb      	bne.n	800442e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	2140      	movs	r1, #64	; 0x40
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fb84 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e005      	b.n	80044bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	b5b0      	push	{r4, r5, r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4bad      	ldr	r3, [pc, #692]	; (80047a4 <UART_SetConfig+0x2e0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4aa2      	ldr	r2, [pc, #648]	; (80047a8 <UART_SetConfig+0x2e4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a99      	ldr	r2, [pc, #612]	; (80047ac <UART_SetConfig+0x2e8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d121      	bne.n	800458e <UART_SetConfig+0xca>
 800454a:	4b99      	ldr	r3, [pc, #612]	; (80047b0 <UART_SetConfig+0x2ec>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d817      	bhi.n	8004588 <UART_SetConfig+0xc4>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x9c>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	0800457d 	.word	0x0800457d
 8004568:	08004577 	.word	0x08004577
 800456c:	08004583 	.word	0x08004583
 8004570:	2301      	movs	r3, #1
 8004572:	76fb      	strb	r3, [r7, #27]
 8004574:	e0e7      	b.n	8004746 <UART_SetConfig+0x282>
 8004576:	2302      	movs	r3, #2
 8004578:	76fb      	strb	r3, [r7, #27]
 800457a:	e0e4      	b.n	8004746 <UART_SetConfig+0x282>
 800457c:	2304      	movs	r3, #4
 800457e:	76fb      	strb	r3, [r7, #27]
 8004580:	e0e1      	b.n	8004746 <UART_SetConfig+0x282>
 8004582:	2308      	movs	r3, #8
 8004584:	76fb      	strb	r3, [r7, #27]
 8004586:	e0de      	b.n	8004746 <UART_SetConfig+0x282>
 8004588:	2310      	movs	r3, #16
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e0db      	b.n	8004746 <UART_SetConfig+0x282>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a88      	ldr	r2, [pc, #544]	; (80047b4 <UART_SetConfig+0x2f0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d132      	bne.n	80045fe <UART_SetConfig+0x13a>
 8004598:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <UART_SetConfig+0x2ec>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d828      	bhi.n	80045f8 <UART_SetConfig+0x134>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0xe8>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045f9 	.word	0x080045f9
 80045b4:	080045f9 	.word	0x080045f9
 80045b8:	080045f9 	.word	0x080045f9
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	080045f9 	.word	0x080045f9
 80045c4:	080045f9 	.word	0x080045f9
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	080045e7 	.word	0x080045e7
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	080045f9 	.word	0x080045f9
 80045dc:	080045f3 	.word	0x080045f3
 80045e0:	2300      	movs	r3, #0
 80045e2:	76fb      	strb	r3, [r7, #27]
 80045e4:	e0af      	b.n	8004746 <UART_SetConfig+0x282>
 80045e6:	2302      	movs	r3, #2
 80045e8:	76fb      	strb	r3, [r7, #27]
 80045ea:	e0ac      	b.n	8004746 <UART_SetConfig+0x282>
 80045ec:	2304      	movs	r3, #4
 80045ee:	76fb      	strb	r3, [r7, #27]
 80045f0:	e0a9      	b.n	8004746 <UART_SetConfig+0x282>
 80045f2:	2308      	movs	r3, #8
 80045f4:	76fb      	strb	r3, [r7, #27]
 80045f6:	e0a6      	b.n	8004746 <UART_SetConfig+0x282>
 80045f8:	2310      	movs	r3, #16
 80045fa:	76fb      	strb	r3, [r7, #27]
 80045fc:	e0a3      	b.n	8004746 <UART_SetConfig+0x282>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <UART_SetConfig+0x2f4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d120      	bne.n	800464a <UART_SetConfig+0x186>
 8004608:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <UART_SetConfig+0x2ec>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004612:	2b30      	cmp	r3, #48	; 0x30
 8004614:	d013      	beq.n	800463e <UART_SetConfig+0x17a>
 8004616:	2b30      	cmp	r3, #48	; 0x30
 8004618:	d814      	bhi.n	8004644 <UART_SetConfig+0x180>
 800461a:	2b20      	cmp	r3, #32
 800461c:	d009      	beq.n	8004632 <UART_SetConfig+0x16e>
 800461e:	2b20      	cmp	r3, #32
 8004620:	d810      	bhi.n	8004644 <UART_SetConfig+0x180>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <UART_SetConfig+0x168>
 8004626:	2b10      	cmp	r3, #16
 8004628:	d006      	beq.n	8004638 <UART_SetConfig+0x174>
 800462a:	e00b      	b.n	8004644 <UART_SetConfig+0x180>
 800462c:	2300      	movs	r3, #0
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e089      	b.n	8004746 <UART_SetConfig+0x282>
 8004632:	2302      	movs	r3, #2
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e086      	b.n	8004746 <UART_SetConfig+0x282>
 8004638:	2304      	movs	r3, #4
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e083      	b.n	8004746 <UART_SetConfig+0x282>
 800463e:	2308      	movs	r3, #8
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e080      	b.n	8004746 <UART_SetConfig+0x282>
 8004644:	2310      	movs	r3, #16
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	e07d      	b.n	8004746 <UART_SetConfig+0x282>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a5b      	ldr	r2, [pc, #364]	; (80047bc <UART_SetConfig+0x2f8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d120      	bne.n	8004696 <UART_SetConfig+0x1d2>
 8004654:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <UART_SetConfig+0x2ec>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800465e:	2bc0      	cmp	r3, #192	; 0xc0
 8004660:	d013      	beq.n	800468a <UART_SetConfig+0x1c6>
 8004662:	2bc0      	cmp	r3, #192	; 0xc0
 8004664:	d814      	bhi.n	8004690 <UART_SetConfig+0x1cc>
 8004666:	2b80      	cmp	r3, #128	; 0x80
 8004668:	d009      	beq.n	800467e <UART_SetConfig+0x1ba>
 800466a:	2b80      	cmp	r3, #128	; 0x80
 800466c:	d810      	bhi.n	8004690 <UART_SetConfig+0x1cc>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <UART_SetConfig+0x1b4>
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d006      	beq.n	8004684 <UART_SetConfig+0x1c0>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x1cc>
 8004678:	2300      	movs	r3, #0
 800467a:	76fb      	strb	r3, [r7, #27]
 800467c:	e063      	b.n	8004746 <UART_SetConfig+0x282>
 800467e:	2302      	movs	r3, #2
 8004680:	76fb      	strb	r3, [r7, #27]
 8004682:	e060      	b.n	8004746 <UART_SetConfig+0x282>
 8004684:	2304      	movs	r3, #4
 8004686:	76fb      	strb	r3, [r7, #27]
 8004688:	e05d      	b.n	8004746 <UART_SetConfig+0x282>
 800468a:	2308      	movs	r3, #8
 800468c:	76fb      	strb	r3, [r7, #27]
 800468e:	e05a      	b.n	8004746 <UART_SetConfig+0x282>
 8004690:	2310      	movs	r3, #16
 8004692:	76fb      	strb	r3, [r7, #27]
 8004694:	e057      	b.n	8004746 <UART_SetConfig+0x282>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a49      	ldr	r2, [pc, #292]	; (80047c0 <UART_SetConfig+0x2fc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d125      	bne.n	80046ec <UART_SetConfig+0x228>
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <UART_SetConfig+0x2ec>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ae:	d017      	beq.n	80046e0 <UART_SetConfig+0x21c>
 80046b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b4:	d817      	bhi.n	80046e6 <UART_SetConfig+0x222>
 80046b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ba:	d00b      	beq.n	80046d4 <UART_SetConfig+0x210>
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c0:	d811      	bhi.n	80046e6 <UART_SetConfig+0x222>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <UART_SetConfig+0x20a>
 80046c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ca:	d006      	beq.n	80046da <UART_SetConfig+0x216>
 80046cc:	e00b      	b.n	80046e6 <UART_SetConfig+0x222>
 80046ce:	2300      	movs	r3, #0
 80046d0:	76fb      	strb	r3, [r7, #27]
 80046d2:	e038      	b.n	8004746 <UART_SetConfig+0x282>
 80046d4:	2302      	movs	r3, #2
 80046d6:	76fb      	strb	r3, [r7, #27]
 80046d8:	e035      	b.n	8004746 <UART_SetConfig+0x282>
 80046da:	2304      	movs	r3, #4
 80046dc:	76fb      	strb	r3, [r7, #27]
 80046de:	e032      	b.n	8004746 <UART_SetConfig+0x282>
 80046e0:	2308      	movs	r3, #8
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e02f      	b.n	8004746 <UART_SetConfig+0x282>
 80046e6:	2310      	movs	r3, #16
 80046e8:	76fb      	strb	r3, [r7, #27]
 80046ea:	e02c      	b.n	8004746 <UART_SetConfig+0x282>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2d      	ldr	r2, [pc, #180]	; (80047a8 <UART_SetConfig+0x2e4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d125      	bne.n	8004742 <UART_SetConfig+0x27e>
 80046f6:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <UART_SetConfig+0x2ec>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004704:	d017      	beq.n	8004736 <UART_SetConfig+0x272>
 8004706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800470a:	d817      	bhi.n	800473c <UART_SetConfig+0x278>
 800470c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004710:	d00b      	beq.n	800472a <UART_SetConfig+0x266>
 8004712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004716:	d811      	bhi.n	800473c <UART_SetConfig+0x278>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x260>
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004720:	d006      	beq.n	8004730 <UART_SetConfig+0x26c>
 8004722:	e00b      	b.n	800473c <UART_SetConfig+0x278>
 8004724:	2300      	movs	r3, #0
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e00d      	b.n	8004746 <UART_SetConfig+0x282>
 800472a:	2302      	movs	r3, #2
 800472c:	76fb      	strb	r3, [r7, #27]
 800472e:	e00a      	b.n	8004746 <UART_SetConfig+0x282>
 8004730:	2304      	movs	r3, #4
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	e007      	b.n	8004746 <UART_SetConfig+0x282>
 8004736:	2308      	movs	r3, #8
 8004738:	76fb      	strb	r3, [r7, #27]
 800473a:	e004      	b.n	8004746 <UART_SetConfig+0x282>
 800473c:	2310      	movs	r3, #16
 800473e:	76fb      	strb	r3, [r7, #27]
 8004740:	e001      	b.n	8004746 <UART_SetConfig+0x282>
 8004742:	2310      	movs	r3, #16
 8004744:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <UART_SetConfig+0x2e4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	f040 8087 	bne.w	8004860 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004752:	7efb      	ldrb	r3, [r7, #27]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d837      	bhi.n	80047c8 <UART_SetConfig+0x304>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x29c>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004785 	.word	0x08004785
 8004764:	080047c9 	.word	0x080047c9
 8004768:	0800478d 	.word	0x0800478d
 800476c:	080047c9 	.word	0x080047c9
 8004770:	08004793 	.word	0x08004793
 8004774:	080047c9 	.word	0x080047c9
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080047c9 	.word	0x080047c9
 8004780:	0800479b 	.word	0x0800479b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004784:	f7fe f9ce 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8004788:	6178      	str	r0, [r7, #20]
        break;
 800478a:	e022      	b.n	80047d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <UART_SetConfig+0x300>)
 800478e:	617b      	str	r3, [r7, #20]
        break;
 8004790:	e01f      	b.n	80047d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004792:	f7fe f92f 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 8004796:	6178      	str	r0, [r7, #20]
        break;
 8004798:	e01b      	b.n	80047d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479e:	617b      	str	r3, [r7, #20]
        break;
 80047a0:	e017      	b.n	80047d2 <UART_SetConfig+0x30e>
 80047a2:	bf00      	nop
 80047a4:	efff69f3 	.word	0xefff69f3
 80047a8:	40008000 	.word	0x40008000
 80047ac:	40013800 	.word	0x40013800
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40004800 	.word	0x40004800
 80047bc:	40004c00 	.word	0x40004c00
 80047c0:	40005000 	.word	0x40005000
 80047c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	76bb      	strb	r3, [r7, #26]
        break;
 80047d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80f1 	beq.w	80049bc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4413      	add	r3, r2
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d305      	bcc.n	80047f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d902      	bls.n	80047fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	76bb      	strb	r3, [r7, #26]
 80047fa:	e0df      	b.n	80049bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4618      	mov	r0, r3
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	020b      	lsls	r3, r1, #8
 800480e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004812:	0202      	lsls	r2, r0, #8
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	6849      	ldr	r1, [r1, #4]
 8004818:	0849      	lsrs	r1, r1, #1
 800481a:	4608      	mov	r0, r1
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	1814      	adds	r4, r2, r0
 8004822:	eb43 0501 	adc.w	r5, r3, r1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	461a      	mov	r2, r3
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	f7fc fa08 	bl	8000c48 <__aeabi_uldivmod>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4613      	mov	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004846:	d308      	bcc.n	800485a <UART_SetConfig+0x396>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484e:	d204      	bcs.n	800485a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e0b0      	b.n	80049bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	76bb      	strb	r3, [r7, #26]
 800485e:	e0ad      	b.n	80049bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004868:	d15b      	bne.n	8004922 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800486a:	7efb      	ldrb	r3, [r7, #27]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d828      	bhi.n	80048c2 <UART_SetConfig+0x3fe>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0x3b4>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048a5 	.word	0x080048a5
 8004880:	080048ad 	.word	0x080048ad
 8004884:	080048c3 	.word	0x080048c3
 8004888:	080048b3 	.word	0x080048b3
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048c3 	.word	0x080048c3
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048bb 	.word	0x080048bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fe f942 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 80048a0:	6178      	str	r0, [r7, #20]
        break;
 80048a2:	e013      	b.n	80048cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7fe f954 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80048a8:	6178      	str	r0, [r7, #20]
        break;
 80048aa:	e00f      	b.n	80048cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <UART_SetConfig+0x510>)
 80048ae:	617b      	str	r3, [r7, #20]
        break;
 80048b0:	e00c      	b.n	80048cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7fe f89f 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80048b6:	6178      	str	r0, [r7, #20]
        break;
 80048b8:	e008      	b.n	80048cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048be:	617b      	str	r3, [r7, #20]
        break;
 80048c0:	e004      	b.n	80048cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	76bb      	strb	r3, [r7, #26]
        break;
 80048ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d074      	beq.n	80049bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005a      	lsls	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d916      	bls.n	800491c <UART_SetConfig+0x458>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d212      	bcs.n	800491c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f023 030f 	bic.w	r3, r3, #15
 80048fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	b29a      	uxth	r2, r3
 800490c:	89fb      	ldrh	r3, [r7, #14]
 800490e:	4313      	orrs	r3, r2
 8004910:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	89fa      	ldrh	r2, [r7, #14]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	e04f      	b.n	80049bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	76bb      	strb	r3, [r7, #26]
 8004920:	e04c      	b.n	80049bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004922:	7efb      	ldrb	r3, [r7, #27]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d828      	bhi.n	800497a <UART_SetConfig+0x4b6>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x46c>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004955 	.word	0x08004955
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004965 	.word	0x08004965
 800493c:	0800497b 	.word	0x0800497b
 8004940:	0800496b 	.word	0x0800496b
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800497b 	.word	0x0800497b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe f8e6 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e013      	b.n	8004984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe f8f8 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8004960:	6178      	str	r0, [r7, #20]
        break;
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <UART_SetConfig+0x510>)
 8004966:	617b      	str	r3, [r7, #20]
        break;
 8004968:	e00c      	b.n	8004984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fe f843 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 800496e:	6178      	str	r0, [r7, #20]
        break;
 8004970:	e008      	b.n	8004984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	617b      	str	r3, [r7, #20]
        break;
 8004978:	e004      	b.n	8004984 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	76bb      	strb	r3, [r7, #26]
        break;
 8004982:	bf00      	nop
    }

    if (pclk != 0U)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085a      	lsrs	r2, r3, #1
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	441a      	add	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b0f      	cmp	r3, #15
 80049a2:	d909      	bls.n	80049b8 <UART_SetConfig+0x4f4>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d205      	bcs.n	80049b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	e001      	b.n	80049bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	00f42400 	.word	0x00f42400

080049d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01a      	beq.n	8004aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d10a      	bne.n	8004aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b2c:	f7fc ff1a 	bl	8001964 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d10e      	bne.n	8004b5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f82d 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e023      	b.n	8004ba6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d10e      	bne.n	8004b8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f817 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e00d      	b.n	8004ba6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b09c      	sub	sp, #112	; 0x70
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	e0a5      	b.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	f000 80a1 	beq.w	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fc fecb 	bl	8001964 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d13e      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	663b      	str	r3, [r7, #96]	; 0x60
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e067      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d04f      	beq.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d147      	bne.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c84:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e6      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cd8:	623a      	str	r2, [r7, #32]
 8004cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69f9      	ldr	r1, [r7, #28]
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e010      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	f43f af4a 	beq.w	8004bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3770      	adds	r7, #112	; 0x70
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <__errno>:
 8004d38:	4b01      	ldr	r3, [pc, #4]	; (8004d40 <__errno+0x8>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	2000000c 	.word	0x2000000c

08004d44 <__libc_init_array>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4d0d      	ldr	r5, [pc, #52]	; (8004d7c <__libc_init_array+0x38>)
 8004d48:	4c0d      	ldr	r4, [pc, #52]	; (8004d80 <__libc_init_array+0x3c>)
 8004d4a:	1b64      	subs	r4, r4, r5
 8004d4c:	10a4      	asrs	r4, r4, #2
 8004d4e:	2600      	movs	r6, #0
 8004d50:	42a6      	cmp	r6, r4
 8004d52:	d109      	bne.n	8004d68 <__libc_init_array+0x24>
 8004d54:	4d0b      	ldr	r5, [pc, #44]	; (8004d84 <__libc_init_array+0x40>)
 8004d56:	4c0c      	ldr	r4, [pc, #48]	; (8004d88 <__libc_init_array+0x44>)
 8004d58:	f002 feb4 	bl	8007ac4 <_init>
 8004d5c:	1b64      	subs	r4, r4, r5
 8004d5e:	10a4      	asrs	r4, r4, #2
 8004d60:	2600      	movs	r6, #0
 8004d62:	42a6      	cmp	r6, r4
 8004d64:	d105      	bne.n	8004d72 <__libc_init_array+0x2e>
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6c:	4798      	blx	r3
 8004d6e:	3601      	adds	r6, #1
 8004d70:	e7ee      	b.n	8004d50 <__libc_init_array+0xc>
 8004d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d76:	4798      	blx	r3
 8004d78:	3601      	adds	r6, #1
 8004d7a:	e7f2      	b.n	8004d62 <__libc_init_array+0x1e>
 8004d7c:	08007f2c 	.word	0x08007f2c
 8004d80:	08007f2c 	.word	0x08007f2c
 8004d84:	08007f2c 	.word	0x08007f2c
 8004d88:	08007f30 	.word	0x08007f30

08004d8c <memset>:
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <__cvt>:
 8004d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da0:	ec55 4b10 	vmov	r4, r5, d0
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	460e      	mov	r6, r1
 8004da8:	4619      	mov	r1, r3
 8004daa:	462b      	mov	r3, r5
 8004dac:	bfbb      	ittet	lt
 8004dae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004db2:	461d      	movlt	r5, r3
 8004db4:	2300      	movge	r3, #0
 8004db6:	232d      	movlt	r3, #45	; 0x2d
 8004db8:	700b      	strb	r3, [r1, #0]
 8004dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004dc0:	4691      	mov	r9, r2
 8004dc2:	f023 0820 	bic.w	r8, r3, #32
 8004dc6:	bfbc      	itt	lt
 8004dc8:	4622      	movlt	r2, r4
 8004dca:	4614      	movlt	r4, r2
 8004dcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dd0:	d005      	beq.n	8004dde <__cvt+0x42>
 8004dd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dd6:	d100      	bne.n	8004dda <__cvt+0x3e>
 8004dd8:	3601      	adds	r6, #1
 8004dda:	2102      	movs	r1, #2
 8004ddc:	e000      	b.n	8004de0 <__cvt+0x44>
 8004dde:	2103      	movs	r1, #3
 8004de0:	ab03      	add	r3, sp, #12
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	ab02      	add	r3, sp, #8
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	ec45 4b10 	vmov	d0, r4, r5
 8004dec:	4653      	mov	r3, sl
 8004dee:	4632      	mov	r2, r6
 8004df0:	f000 fcea 	bl	80057c8 <_dtoa_r>
 8004df4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004df8:	4607      	mov	r7, r0
 8004dfa:	d102      	bne.n	8004e02 <__cvt+0x66>
 8004dfc:	f019 0f01 	tst.w	r9, #1
 8004e00:	d022      	beq.n	8004e48 <__cvt+0xac>
 8004e02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e06:	eb07 0906 	add.w	r9, r7, r6
 8004e0a:	d110      	bne.n	8004e2e <__cvt+0x92>
 8004e0c:	783b      	ldrb	r3, [r7, #0]
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d10a      	bne.n	8004e28 <__cvt+0x8c>
 8004e12:	2200      	movs	r2, #0
 8004e14:	2300      	movs	r3, #0
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f7fb fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e1e:	b918      	cbnz	r0, 8004e28 <__cvt+0x8c>
 8004e20:	f1c6 0601 	rsb	r6, r6, #1
 8004e24:	f8ca 6000 	str.w	r6, [sl]
 8004e28:	f8da 3000 	ldr.w	r3, [sl]
 8004e2c:	4499      	add	r9, r3
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2300      	movs	r3, #0
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3a:	b108      	cbz	r0, 8004e40 <__cvt+0xa4>
 8004e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e40:	2230      	movs	r2, #48	; 0x30
 8004e42:	9b03      	ldr	r3, [sp, #12]
 8004e44:	454b      	cmp	r3, r9
 8004e46:	d307      	bcc.n	8004e58 <__cvt+0xbc>
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e4c:	1bdb      	subs	r3, r3, r7
 8004e4e:	4638      	mov	r0, r7
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	b004      	add	sp, #16
 8004e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e58:	1c59      	adds	r1, r3, #1
 8004e5a:	9103      	str	r1, [sp, #12]
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e7f0      	b.n	8004e42 <__cvt+0xa6>

08004e60 <__exponent>:
 8004e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e62:	4603      	mov	r3, r0
 8004e64:	2900      	cmp	r1, #0
 8004e66:	bfb8      	it	lt
 8004e68:	4249      	neglt	r1, r1
 8004e6a:	f803 2b02 	strb.w	r2, [r3], #2
 8004e6e:	bfb4      	ite	lt
 8004e70:	222d      	movlt	r2, #45	; 0x2d
 8004e72:	222b      	movge	r2, #43	; 0x2b
 8004e74:	2909      	cmp	r1, #9
 8004e76:	7042      	strb	r2, [r0, #1]
 8004e78:	dd2a      	ble.n	8004ed0 <__exponent+0x70>
 8004e7a:	f10d 0407 	add.w	r4, sp, #7
 8004e7e:	46a4      	mov	ip, r4
 8004e80:	270a      	movs	r7, #10
 8004e82:	46a6      	mov	lr, r4
 8004e84:	460a      	mov	r2, r1
 8004e86:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e8a:	fb07 1516 	mls	r5, r7, r6, r1
 8004e8e:	3530      	adds	r5, #48	; 0x30
 8004e90:	2a63      	cmp	r2, #99	; 0x63
 8004e92:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	dcf1      	bgt.n	8004e82 <__exponent+0x22>
 8004e9e:	3130      	adds	r1, #48	; 0x30
 8004ea0:	f1ae 0502 	sub.w	r5, lr, #2
 8004ea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ea8:	1c44      	adds	r4, r0, #1
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4561      	cmp	r1, ip
 8004eae:	d30a      	bcc.n	8004ec6 <__exponent+0x66>
 8004eb0:	f10d 0209 	add.w	r2, sp, #9
 8004eb4:	eba2 020e 	sub.w	r2, r2, lr
 8004eb8:	4565      	cmp	r5, ip
 8004eba:	bf88      	it	hi
 8004ebc:	2200      	movhi	r2, #0
 8004ebe:	4413      	add	r3, r2
 8004ec0:	1a18      	subs	r0, r3, r0
 8004ec2:	b003      	add	sp, #12
 8004ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ece:	e7ed      	b.n	8004eac <__exponent+0x4c>
 8004ed0:	2330      	movs	r3, #48	; 0x30
 8004ed2:	3130      	adds	r1, #48	; 0x30
 8004ed4:	7083      	strb	r3, [r0, #2]
 8004ed6:	70c1      	strb	r1, [r0, #3]
 8004ed8:	1d03      	adds	r3, r0, #4
 8004eda:	e7f1      	b.n	8004ec0 <__exponent+0x60>

08004edc <_printf_float>:
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	ed2d 8b02 	vpush	{d8}
 8004ee4:	b08d      	sub	sp, #52	; 0x34
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004eec:	4616      	mov	r6, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	f001 fa55 	bl	80063a0 <_localeconv_r>
 8004ef6:	f8d0 a000 	ldr.w	sl, [r0]
 8004efa:	4650      	mov	r0, sl
 8004efc:	f7fb f968 	bl	80001d0 <strlen>
 8004f00:	2300      	movs	r3, #0
 8004f02:	930a      	str	r3, [sp, #40]	; 0x28
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	9305      	str	r3, [sp, #20]
 8004f08:	f8d8 3000 	ldr.w	r3, [r8]
 8004f0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f10:	3307      	adds	r3, #7
 8004f12:	f023 0307 	bic.w	r3, r3, #7
 8004f16:	f103 0208 	add.w	r2, r3, #8
 8004f1a:	f8c8 2000 	str.w	r2, [r8]
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f34:	ee08 0a10 	vmov	s16, r0
 8004f38:	4b9f      	ldr	r3, [pc, #636]	; (80051b8 <_printf_float+0x2dc>)
 8004f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	f7fb fdf3 	bl	8000b2c <__aeabi_dcmpun>
 8004f46:	bb88      	cbnz	r0, 8004fac <_printf_float+0xd0>
 8004f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f4c:	4b9a      	ldr	r3, [pc, #616]	; (80051b8 <_printf_float+0x2dc>)
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	f7fb fdcd 	bl	8000af0 <__aeabi_dcmple>
 8004f56:	bb48      	cbnz	r0, 8004fac <_printf_float+0xd0>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	f7fb fdbc 	bl	8000adc <__aeabi_dcmplt>
 8004f64:	b110      	cbz	r0, 8004f6c <_printf_float+0x90>
 8004f66:	232d      	movs	r3, #45	; 0x2d
 8004f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f6c:	4b93      	ldr	r3, [pc, #588]	; (80051bc <_printf_float+0x2e0>)
 8004f6e:	4894      	ldr	r0, [pc, #592]	; (80051c0 <_printf_float+0x2e4>)
 8004f70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f74:	bf94      	ite	ls
 8004f76:	4698      	movls	r8, r3
 8004f78:	4680      	movhi	r8, r0
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	9b05      	ldr	r3, [sp, #20]
 8004f80:	f023 0204 	bic.w	r2, r3, #4
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	f04f 0900 	mov.w	r9, #0
 8004f8a:	9700      	str	r7, [sp, #0]
 8004f8c:	4633      	mov	r3, r6
 8004f8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f90:	4621      	mov	r1, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	f000 f9d8 	bl	8005348 <_printf_common>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	f040 8090 	bne.w	80050be <_printf_float+0x1e2>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	b00d      	add	sp, #52	; 0x34
 8004fa4:	ecbd 8b02 	vpop	{d8}
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb fdba 	bl	8000b2c <__aeabi_dcmpun>
 8004fb8:	b140      	cbz	r0, 8004fcc <_printf_float+0xf0>
 8004fba:	464b      	mov	r3, r9
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bfbc      	itt	lt
 8004fc0:	232d      	movlt	r3, #45	; 0x2d
 8004fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fc6:	487f      	ldr	r0, [pc, #508]	; (80051c4 <_printf_float+0x2e8>)
 8004fc8:	4b7f      	ldr	r3, [pc, #508]	; (80051c8 <_printf_float+0x2ec>)
 8004fca:	e7d1      	b.n	8004f70 <_printf_float+0x94>
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fd2:	9206      	str	r2, [sp, #24]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	d13f      	bne.n	8005058 <_printf_float+0x17c>
 8004fd8:	2306      	movs	r3, #6
 8004fda:	6063      	str	r3, [r4, #4]
 8004fdc:	9b05      	ldr	r3, [sp, #20]
 8004fde:	6861      	ldr	r1, [r4, #4]
 8004fe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	ab0a      	add	r3, sp, #40	; 0x28
 8004fea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fee:	ab09      	add	r3, sp, #36	; 0x24
 8004ff0:	ec49 8b10 	vmov	d0, r8, r9
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6022      	str	r2, [r4, #0]
 8004ff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f7ff fecd 	bl	8004d9c <__cvt>
 8005002:	9b06      	ldr	r3, [sp, #24]
 8005004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005006:	2b47      	cmp	r3, #71	; 0x47
 8005008:	4680      	mov	r8, r0
 800500a:	d108      	bne.n	800501e <_printf_float+0x142>
 800500c:	1cc8      	adds	r0, r1, #3
 800500e:	db02      	blt.n	8005016 <_printf_float+0x13a>
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	4299      	cmp	r1, r3
 8005014:	dd41      	ble.n	800509a <_printf_float+0x1be>
 8005016:	f1ab 0b02 	sub.w	fp, fp, #2
 800501a:	fa5f fb8b 	uxtb.w	fp, fp
 800501e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005022:	d820      	bhi.n	8005066 <_printf_float+0x18a>
 8005024:	3901      	subs	r1, #1
 8005026:	465a      	mov	r2, fp
 8005028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800502c:	9109      	str	r1, [sp, #36]	; 0x24
 800502e:	f7ff ff17 	bl	8004e60 <__exponent>
 8005032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005034:	1813      	adds	r3, r2, r0
 8005036:	2a01      	cmp	r2, #1
 8005038:	4681      	mov	r9, r0
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	dc02      	bgt.n	8005044 <_printf_float+0x168>
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	07d2      	lsls	r2, r2, #31
 8005042:	d501      	bpl.n	8005048 <_printf_float+0x16c>
 8005044:	3301      	adds	r3, #1
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800504c:	2b00      	cmp	r3, #0
 800504e:	d09c      	beq.n	8004f8a <_printf_float+0xae>
 8005050:	232d      	movs	r3, #45	; 0x2d
 8005052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005056:	e798      	b.n	8004f8a <_printf_float+0xae>
 8005058:	9a06      	ldr	r2, [sp, #24]
 800505a:	2a47      	cmp	r2, #71	; 0x47
 800505c:	d1be      	bne.n	8004fdc <_printf_float+0x100>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1bc      	bne.n	8004fdc <_printf_float+0x100>
 8005062:	2301      	movs	r3, #1
 8005064:	e7b9      	b.n	8004fda <_printf_float+0xfe>
 8005066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800506a:	d118      	bne.n	800509e <_printf_float+0x1c2>
 800506c:	2900      	cmp	r1, #0
 800506e:	6863      	ldr	r3, [r4, #4]
 8005070:	dd0b      	ble.n	800508a <_printf_float+0x1ae>
 8005072:	6121      	str	r1, [r4, #16]
 8005074:	b913      	cbnz	r3, 800507c <_printf_float+0x1a0>
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	07d0      	lsls	r0, r2, #31
 800507a:	d502      	bpl.n	8005082 <_printf_float+0x1a6>
 800507c:	3301      	adds	r3, #1
 800507e:	440b      	add	r3, r1
 8005080:	6123      	str	r3, [r4, #16]
 8005082:	65a1      	str	r1, [r4, #88]	; 0x58
 8005084:	f04f 0900 	mov.w	r9, #0
 8005088:	e7de      	b.n	8005048 <_printf_float+0x16c>
 800508a:	b913      	cbnz	r3, 8005092 <_printf_float+0x1b6>
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	07d2      	lsls	r2, r2, #31
 8005090:	d501      	bpl.n	8005096 <_printf_float+0x1ba>
 8005092:	3302      	adds	r3, #2
 8005094:	e7f4      	b.n	8005080 <_printf_float+0x1a4>
 8005096:	2301      	movs	r3, #1
 8005098:	e7f2      	b.n	8005080 <_printf_float+0x1a4>
 800509a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800509e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a0:	4299      	cmp	r1, r3
 80050a2:	db05      	blt.n	80050b0 <_printf_float+0x1d4>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	6121      	str	r1, [r4, #16]
 80050a8:	07d8      	lsls	r0, r3, #31
 80050aa:	d5ea      	bpl.n	8005082 <_printf_float+0x1a6>
 80050ac:	1c4b      	adds	r3, r1, #1
 80050ae:	e7e7      	b.n	8005080 <_printf_float+0x1a4>
 80050b0:	2900      	cmp	r1, #0
 80050b2:	bfd4      	ite	le
 80050b4:	f1c1 0202 	rsble	r2, r1, #2
 80050b8:	2201      	movgt	r2, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	e7e0      	b.n	8005080 <_printf_float+0x1a4>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	055a      	lsls	r2, r3, #21
 80050c2:	d407      	bmi.n	80050d4 <_printf_float+0x1f8>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	4642      	mov	r2, r8
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	d12c      	bne.n	800512c <_printf_float+0x250>
 80050d2:	e764      	b.n	8004f9e <_printf_float+0xc2>
 80050d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050d8:	f240 80e0 	bls.w	800529c <_printf_float+0x3c0>
 80050dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050e0:	2200      	movs	r2, #0
 80050e2:	2300      	movs	r3, #0
 80050e4:	f7fb fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d034      	beq.n	8005156 <_printf_float+0x27a>
 80050ec:	4a37      	ldr	r2, [pc, #220]	; (80051cc <_printf_float+0x2f0>)
 80050ee:	2301      	movs	r3, #1
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f af51 	beq.w	8004f9e <_printf_float+0xc2>
 80050fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005100:	429a      	cmp	r2, r3
 8005102:	db02      	blt.n	800510a <_printf_float+0x22e>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	07d8      	lsls	r0, r3, #31
 8005108:	d510      	bpl.n	800512c <_printf_float+0x250>
 800510a:	ee18 3a10 	vmov	r3, s16
 800510e:	4652      	mov	r2, sl
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af41 	beq.w	8004f9e <_printf_float+0xc2>
 800511c:	f04f 0800 	mov.w	r8, #0
 8005120:	f104 091a 	add.w	r9, r4, #26
 8005124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005126:	3b01      	subs	r3, #1
 8005128:	4543      	cmp	r3, r8
 800512a:	dc09      	bgt.n	8005140 <_printf_float+0x264>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	079b      	lsls	r3, r3, #30
 8005130:	f100 8105 	bmi.w	800533e <_printf_float+0x462>
 8005134:	68e0      	ldr	r0, [r4, #12]
 8005136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005138:	4298      	cmp	r0, r3
 800513a:	bfb8      	it	lt
 800513c:	4618      	movlt	r0, r3
 800513e:	e730      	b.n	8004fa2 <_printf_float+0xc6>
 8005140:	2301      	movs	r3, #1
 8005142:	464a      	mov	r2, r9
 8005144:	4631      	mov	r1, r6
 8005146:	4628      	mov	r0, r5
 8005148:	47b8      	blx	r7
 800514a:	3001      	adds	r0, #1
 800514c:	f43f af27 	beq.w	8004f9e <_printf_float+0xc2>
 8005150:	f108 0801 	add.w	r8, r8, #1
 8005154:	e7e6      	b.n	8005124 <_printf_float+0x248>
 8005156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	dc39      	bgt.n	80051d0 <_printf_float+0x2f4>
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <_printf_float+0x2f0>)
 800515e:	2301      	movs	r3, #1
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f af19 	beq.w	8004f9e <_printf_float+0xc2>
 800516c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005170:	4313      	orrs	r3, r2
 8005172:	d102      	bne.n	800517a <_printf_float+0x29e>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	07d9      	lsls	r1, r3, #31
 8005178:	d5d8      	bpl.n	800512c <_printf_float+0x250>
 800517a:	ee18 3a10 	vmov	r3, s16
 800517e:	4652      	mov	r2, sl
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	f43f af09 	beq.w	8004f9e <_printf_float+0xc2>
 800518c:	f04f 0900 	mov.w	r9, #0
 8005190:	f104 0a1a 	add.w	sl, r4, #26
 8005194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005196:	425b      	negs	r3, r3
 8005198:	454b      	cmp	r3, r9
 800519a:	dc01      	bgt.n	80051a0 <_printf_float+0x2c4>
 800519c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519e:	e792      	b.n	80050c6 <_printf_float+0x1ea>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4652      	mov	r2, sl
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f aef7 	beq.w	8004f9e <_printf_float+0xc2>
 80051b0:	f109 0901 	add.w	r9, r9, #1
 80051b4:	e7ee      	b.n	8005194 <_printf_float+0x2b8>
 80051b6:	bf00      	nop
 80051b8:	7fefffff 	.word	0x7fefffff
 80051bc:	08007b44 	.word	0x08007b44
 80051c0:	08007b48 	.word	0x08007b48
 80051c4:	08007b50 	.word	0x08007b50
 80051c8:	08007b4c 	.word	0x08007b4c
 80051cc:	08007b54 	.word	0x08007b54
 80051d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051d4:	429a      	cmp	r2, r3
 80051d6:	bfa8      	it	ge
 80051d8:	461a      	movge	r2, r3
 80051da:	2a00      	cmp	r2, #0
 80051dc:	4691      	mov	r9, r2
 80051de:	dc37      	bgt.n	8005250 <_printf_float+0x374>
 80051e0:	f04f 0b00 	mov.w	fp, #0
 80051e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051e8:	f104 021a 	add.w	r2, r4, #26
 80051ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	eba3 0309 	sub.w	r3, r3, r9
 80051f4:	455b      	cmp	r3, fp
 80051f6:	dc33      	bgt.n	8005260 <_printf_float+0x384>
 80051f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051fc:	429a      	cmp	r2, r3
 80051fe:	db3b      	blt.n	8005278 <_printf_float+0x39c>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	07da      	lsls	r2, r3, #31
 8005204:	d438      	bmi.n	8005278 <_printf_float+0x39c>
 8005206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005208:	9b05      	ldr	r3, [sp, #20]
 800520a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	eba2 0901 	sub.w	r9, r2, r1
 8005212:	4599      	cmp	r9, r3
 8005214:	bfa8      	it	ge
 8005216:	4699      	movge	r9, r3
 8005218:	f1b9 0f00 	cmp.w	r9, #0
 800521c:	dc35      	bgt.n	800528a <_printf_float+0x3ae>
 800521e:	f04f 0800 	mov.w	r8, #0
 8005222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005226:	f104 0a1a 	add.w	sl, r4, #26
 800522a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	eba3 0309 	sub.w	r3, r3, r9
 8005234:	4543      	cmp	r3, r8
 8005236:	f77f af79 	ble.w	800512c <_printf_float+0x250>
 800523a:	2301      	movs	r3, #1
 800523c:	4652      	mov	r2, sl
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f aeaa 	beq.w	8004f9e <_printf_float+0xc2>
 800524a:	f108 0801 	add.w	r8, r8, #1
 800524e:	e7ec      	b.n	800522a <_printf_float+0x34e>
 8005250:	4613      	mov	r3, r2
 8005252:	4631      	mov	r1, r6
 8005254:	4642      	mov	r2, r8
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	d1c0      	bne.n	80051e0 <_printf_float+0x304>
 800525e:	e69e      	b.n	8004f9e <_printf_float+0xc2>
 8005260:	2301      	movs	r3, #1
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	9205      	str	r2, [sp, #20]
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f ae97 	beq.w	8004f9e <_printf_float+0xc2>
 8005270:	9a05      	ldr	r2, [sp, #20]
 8005272:	f10b 0b01 	add.w	fp, fp, #1
 8005276:	e7b9      	b.n	80051ec <_printf_float+0x310>
 8005278:	ee18 3a10 	vmov	r3, s16
 800527c:	4652      	mov	r2, sl
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	d1be      	bne.n	8005206 <_printf_float+0x32a>
 8005288:	e689      	b.n	8004f9e <_printf_float+0xc2>
 800528a:	9a05      	ldr	r2, [sp, #20]
 800528c:	464b      	mov	r3, r9
 800528e:	4442      	add	r2, r8
 8005290:	4631      	mov	r1, r6
 8005292:	4628      	mov	r0, r5
 8005294:	47b8      	blx	r7
 8005296:	3001      	adds	r0, #1
 8005298:	d1c1      	bne.n	800521e <_printf_float+0x342>
 800529a:	e680      	b.n	8004f9e <_printf_float+0xc2>
 800529c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800529e:	2a01      	cmp	r2, #1
 80052a0:	dc01      	bgt.n	80052a6 <_printf_float+0x3ca>
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d538      	bpl.n	8005318 <_printf_float+0x43c>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4642      	mov	r2, r8
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f ae74 	beq.w	8004f9e <_printf_float+0xc2>
 80052b6:	ee18 3a10 	vmov	r3, s16
 80052ba:	4652      	mov	r2, sl
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f ae6b 	beq.w	8004f9e <_printf_float+0xc2>
 80052c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052cc:	2200      	movs	r2, #0
 80052ce:	2300      	movs	r3, #0
 80052d0:	f7fb fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80052d4:	b9d8      	cbnz	r0, 800530e <_printf_float+0x432>
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	f108 0201 	add.w	r2, r8, #1
 80052dc:	3b01      	subs	r3, #1
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	d10e      	bne.n	8005306 <_printf_float+0x42a>
 80052e8:	e659      	b.n	8004f9e <_printf_float+0xc2>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4652      	mov	r2, sl
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	f43f ae52 	beq.w	8004f9e <_printf_float+0xc2>
 80052fa:	f108 0801 	add.w	r8, r8, #1
 80052fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	4543      	cmp	r3, r8
 8005304:	dcf1      	bgt.n	80052ea <_printf_float+0x40e>
 8005306:	464b      	mov	r3, r9
 8005308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800530c:	e6dc      	b.n	80050c8 <_printf_float+0x1ec>
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	f104 0a1a 	add.w	sl, r4, #26
 8005316:	e7f2      	b.n	80052fe <_printf_float+0x422>
 8005318:	2301      	movs	r3, #1
 800531a:	4642      	mov	r2, r8
 800531c:	e7df      	b.n	80052de <_printf_float+0x402>
 800531e:	2301      	movs	r3, #1
 8005320:	464a      	mov	r2, r9
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	f43f ae38 	beq.w	8004f9e <_printf_float+0xc2>
 800532e:	f108 0801 	add.w	r8, r8, #1
 8005332:	68e3      	ldr	r3, [r4, #12]
 8005334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005336:	1a5b      	subs	r3, r3, r1
 8005338:	4543      	cmp	r3, r8
 800533a:	dcf0      	bgt.n	800531e <_printf_float+0x442>
 800533c:	e6fa      	b.n	8005134 <_printf_float+0x258>
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	f104 0919 	add.w	r9, r4, #25
 8005346:	e7f4      	b.n	8005332 <_printf_float+0x456>

08005348 <_printf_common>:
 8005348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	4616      	mov	r6, r2
 800534e:	4699      	mov	r9, r3
 8005350:	688a      	ldr	r2, [r1, #8]
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005358:	4293      	cmp	r3, r2
 800535a:	bfb8      	it	lt
 800535c:	4613      	movlt	r3, r2
 800535e:	6033      	str	r3, [r6, #0]
 8005360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005364:	4607      	mov	r7, r0
 8005366:	460c      	mov	r4, r1
 8005368:	b10a      	cbz	r2, 800536e <_printf_common+0x26>
 800536a:	3301      	adds	r3, #1
 800536c:	6033      	str	r3, [r6, #0]
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	0699      	lsls	r1, r3, #26
 8005372:	bf42      	ittt	mi
 8005374:	6833      	ldrmi	r3, [r6, #0]
 8005376:	3302      	addmi	r3, #2
 8005378:	6033      	strmi	r3, [r6, #0]
 800537a:	6825      	ldr	r5, [r4, #0]
 800537c:	f015 0506 	ands.w	r5, r5, #6
 8005380:	d106      	bne.n	8005390 <_printf_common+0x48>
 8005382:	f104 0a19 	add.w	sl, r4, #25
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	6832      	ldr	r2, [r6, #0]
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	42ab      	cmp	r3, r5
 800538e:	dc26      	bgt.n	80053de <_printf_common+0x96>
 8005390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005394:	1e13      	subs	r3, r2, #0
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	bf18      	it	ne
 800539a:	2301      	movne	r3, #1
 800539c:	0692      	lsls	r2, r2, #26
 800539e:	d42b      	bmi.n	80053f8 <_printf_common+0xb0>
 80053a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a4:	4649      	mov	r1, r9
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d01e      	beq.n	80053ec <_printf_common+0xa4>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	68e5      	ldr	r5, [r4, #12]
 80053b2:	6832      	ldr	r2, [r6, #0]
 80053b4:	f003 0306 	and.w	r3, r3, #6
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	bf08      	it	eq
 80053bc:	1aad      	subeq	r5, r5, r2
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	6922      	ldr	r2, [r4, #16]
 80053c2:	bf0c      	ite	eq
 80053c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c8:	2500      	movne	r5, #0
 80053ca:	4293      	cmp	r3, r2
 80053cc:	bfc4      	itt	gt
 80053ce:	1a9b      	subgt	r3, r3, r2
 80053d0:	18ed      	addgt	r5, r5, r3
 80053d2:	2600      	movs	r6, #0
 80053d4:	341a      	adds	r4, #26
 80053d6:	42b5      	cmp	r5, r6
 80053d8:	d11a      	bne.n	8005410 <_printf_common+0xc8>
 80053da:	2000      	movs	r0, #0
 80053dc:	e008      	b.n	80053f0 <_printf_common+0xa8>
 80053de:	2301      	movs	r3, #1
 80053e0:	4652      	mov	r2, sl
 80053e2:	4649      	mov	r1, r9
 80053e4:	4638      	mov	r0, r7
 80053e6:	47c0      	blx	r8
 80053e8:	3001      	adds	r0, #1
 80053ea:	d103      	bne.n	80053f4 <_printf_common+0xac>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	3501      	adds	r5, #1
 80053f6:	e7c6      	b.n	8005386 <_printf_common+0x3e>
 80053f8:	18e1      	adds	r1, r4, r3
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	2030      	movs	r0, #48	; 0x30
 80053fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005402:	4422      	add	r2, r4
 8005404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800540c:	3302      	adds	r3, #2
 800540e:	e7c7      	b.n	80053a0 <_printf_common+0x58>
 8005410:	2301      	movs	r3, #1
 8005412:	4622      	mov	r2, r4
 8005414:	4649      	mov	r1, r9
 8005416:	4638      	mov	r0, r7
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d0e6      	beq.n	80053ec <_printf_common+0xa4>
 800541e:	3601      	adds	r6, #1
 8005420:	e7d9      	b.n	80053d6 <_printf_common+0x8e>
	...

08005424 <_printf_i>:
 8005424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	460c      	mov	r4, r1
 800542a:	4691      	mov	r9, r2
 800542c:	7e27      	ldrb	r7, [r4, #24]
 800542e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005430:	2f78      	cmp	r7, #120	; 0x78
 8005432:	4680      	mov	r8, r0
 8005434:	469a      	mov	sl, r3
 8005436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800543a:	d807      	bhi.n	800544c <_printf_i+0x28>
 800543c:	2f62      	cmp	r7, #98	; 0x62
 800543e:	d80a      	bhi.n	8005456 <_printf_i+0x32>
 8005440:	2f00      	cmp	r7, #0
 8005442:	f000 80d8 	beq.w	80055f6 <_printf_i+0x1d2>
 8005446:	2f58      	cmp	r7, #88	; 0x58
 8005448:	f000 80a3 	beq.w	8005592 <_printf_i+0x16e>
 800544c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005454:	e03a      	b.n	80054cc <_printf_i+0xa8>
 8005456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800545a:	2b15      	cmp	r3, #21
 800545c:	d8f6      	bhi.n	800544c <_printf_i+0x28>
 800545e:	a001      	add	r0, pc, #4	; (adr r0, 8005464 <_printf_i+0x40>)
 8005460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005464:	080054bd 	.word	0x080054bd
 8005468:	080054d1 	.word	0x080054d1
 800546c:	0800544d 	.word	0x0800544d
 8005470:	0800544d 	.word	0x0800544d
 8005474:	0800544d 	.word	0x0800544d
 8005478:	0800544d 	.word	0x0800544d
 800547c:	080054d1 	.word	0x080054d1
 8005480:	0800544d 	.word	0x0800544d
 8005484:	0800544d 	.word	0x0800544d
 8005488:	0800544d 	.word	0x0800544d
 800548c:	0800544d 	.word	0x0800544d
 8005490:	080055dd 	.word	0x080055dd
 8005494:	08005501 	.word	0x08005501
 8005498:	080055bf 	.word	0x080055bf
 800549c:	0800544d 	.word	0x0800544d
 80054a0:	0800544d 	.word	0x0800544d
 80054a4:	080055ff 	.word	0x080055ff
 80054a8:	0800544d 	.word	0x0800544d
 80054ac:	08005501 	.word	0x08005501
 80054b0:	0800544d 	.word	0x0800544d
 80054b4:	0800544d 	.word	0x0800544d
 80054b8:	080055c7 	.word	0x080055c7
 80054bc:	680b      	ldr	r3, [r1, #0]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	600a      	str	r2, [r1, #0]
 80054c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0a3      	b.n	8005618 <_printf_i+0x1f4>
 80054d0:	6825      	ldr	r5, [r4, #0]
 80054d2:	6808      	ldr	r0, [r1, #0]
 80054d4:	062e      	lsls	r6, r5, #24
 80054d6:	f100 0304 	add.w	r3, r0, #4
 80054da:	d50a      	bpl.n	80054f2 <_printf_i+0xce>
 80054dc:	6805      	ldr	r5, [r0, #0]
 80054de:	600b      	str	r3, [r1, #0]
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	da03      	bge.n	80054ec <_printf_i+0xc8>
 80054e4:	232d      	movs	r3, #45	; 0x2d
 80054e6:	426d      	negs	r5, r5
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ec:	485e      	ldr	r0, [pc, #376]	; (8005668 <_printf_i+0x244>)
 80054ee:	230a      	movs	r3, #10
 80054f0:	e019      	b.n	8005526 <_printf_i+0x102>
 80054f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054f6:	6805      	ldr	r5, [r0, #0]
 80054f8:	600b      	str	r3, [r1, #0]
 80054fa:	bf18      	it	ne
 80054fc:	b22d      	sxthne	r5, r5
 80054fe:	e7ef      	b.n	80054e0 <_printf_i+0xbc>
 8005500:	680b      	ldr	r3, [r1, #0]
 8005502:	6825      	ldr	r5, [r4, #0]
 8005504:	1d18      	adds	r0, r3, #4
 8005506:	6008      	str	r0, [r1, #0]
 8005508:	0628      	lsls	r0, r5, #24
 800550a:	d501      	bpl.n	8005510 <_printf_i+0xec>
 800550c:	681d      	ldr	r5, [r3, #0]
 800550e:	e002      	b.n	8005516 <_printf_i+0xf2>
 8005510:	0669      	lsls	r1, r5, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0xe8>
 8005514:	881d      	ldrh	r5, [r3, #0]
 8005516:	4854      	ldr	r0, [pc, #336]	; (8005668 <_printf_i+0x244>)
 8005518:	2f6f      	cmp	r7, #111	; 0x6f
 800551a:	bf0c      	ite	eq
 800551c:	2308      	moveq	r3, #8
 800551e:	230a      	movne	r3, #10
 8005520:	2100      	movs	r1, #0
 8005522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005526:	6866      	ldr	r6, [r4, #4]
 8005528:	60a6      	str	r6, [r4, #8]
 800552a:	2e00      	cmp	r6, #0
 800552c:	bfa2      	ittt	ge
 800552e:	6821      	ldrge	r1, [r4, #0]
 8005530:	f021 0104 	bicge.w	r1, r1, #4
 8005534:	6021      	strge	r1, [r4, #0]
 8005536:	b90d      	cbnz	r5, 800553c <_printf_i+0x118>
 8005538:	2e00      	cmp	r6, #0
 800553a:	d04d      	beq.n	80055d8 <_printf_i+0x1b4>
 800553c:	4616      	mov	r6, r2
 800553e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005542:	fb03 5711 	mls	r7, r3, r1, r5
 8005546:	5dc7      	ldrb	r7, [r0, r7]
 8005548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800554c:	462f      	mov	r7, r5
 800554e:	42bb      	cmp	r3, r7
 8005550:	460d      	mov	r5, r1
 8005552:	d9f4      	bls.n	800553e <_printf_i+0x11a>
 8005554:	2b08      	cmp	r3, #8
 8005556:	d10b      	bne.n	8005570 <_printf_i+0x14c>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	07df      	lsls	r7, r3, #31
 800555c:	d508      	bpl.n	8005570 <_printf_i+0x14c>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4299      	cmp	r1, r3
 8005564:	bfde      	ittt	le
 8005566:	2330      	movle	r3, #48	; 0x30
 8005568:	f806 3c01 	strble.w	r3, [r6, #-1]
 800556c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005570:	1b92      	subs	r2, r2, r6
 8005572:	6122      	str	r2, [r4, #16]
 8005574:	f8cd a000 	str.w	sl, [sp]
 8005578:	464b      	mov	r3, r9
 800557a:	aa03      	add	r2, sp, #12
 800557c:	4621      	mov	r1, r4
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fee2 	bl	8005348 <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	d14c      	bne.n	8005622 <_printf_i+0x1fe>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b004      	add	sp, #16
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	4835      	ldr	r0, [pc, #212]	; (8005668 <_printf_i+0x244>)
 8005594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	680e      	ldr	r6, [r1, #0]
 800559c:	061f      	lsls	r7, r3, #24
 800559e:	f856 5b04 	ldr.w	r5, [r6], #4
 80055a2:	600e      	str	r6, [r1, #0]
 80055a4:	d514      	bpl.n	80055d0 <_printf_i+0x1ac>
 80055a6:	07d9      	lsls	r1, r3, #31
 80055a8:	bf44      	itt	mi
 80055aa:	f043 0320 	orrmi.w	r3, r3, #32
 80055ae:	6023      	strmi	r3, [r4, #0]
 80055b0:	b91d      	cbnz	r5, 80055ba <_printf_i+0x196>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	f023 0320 	bic.w	r3, r3, #32
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	2310      	movs	r3, #16
 80055bc:	e7b0      	b.n	8005520 <_printf_i+0xfc>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	f043 0320 	orr.w	r3, r3, #32
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	2378      	movs	r3, #120	; 0x78
 80055c8:	4828      	ldr	r0, [pc, #160]	; (800566c <_printf_i+0x248>)
 80055ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ce:	e7e3      	b.n	8005598 <_printf_i+0x174>
 80055d0:	065e      	lsls	r6, r3, #25
 80055d2:	bf48      	it	mi
 80055d4:	b2ad      	uxthmi	r5, r5
 80055d6:	e7e6      	b.n	80055a6 <_printf_i+0x182>
 80055d8:	4616      	mov	r6, r2
 80055da:	e7bb      	b.n	8005554 <_printf_i+0x130>
 80055dc:	680b      	ldr	r3, [r1, #0]
 80055de:	6826      	ldr	r6, [r4, #0]
 80055e0:	6960      	ldr	r0, [r4, #20]
 80055e2:	1d1d      	adds	r5, r3, #4
 80055e4:	600d      	str	r5, [r1, #0]
 80055e6:	0635      	lsls	r5, r6, #24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	d501      	bpl.n	80055f0 <_printf_i+0x1cc>
 80055ec:	6018      	str	r0, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_printf_i+0x1d2>
 80055f0:	0671      	lsls	r1, r6, #25
 80055f2:	d5fb      	bpl.n	80055ec <_printf_i+0x1c8>
 80055f4:	8018      	strh	r0, [r3, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	4616      	mov	r6, r2
 80055fc:	e7ba      	b.n	8005574 <_printf_i+0x150>
 80055fe:	680b      	ldr	r3, [r1, #0]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	600a      	str	r2, [r1, #0]
 8005604:	681e      	ldr	r6, [r3, #0]
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	2100      	movs	r1, #0
 800560a:	4630      	mov	r0, r6
 800560c:	f7fa fde8 	bl	80001e0 <memchr>
 8005610:	b108      	cbz	r0, 8005616 <_printf_i+0x1f2>
 8005612:	1b80      	subs	r0, r0, r6
 8005614:	6060      	str	r0, [r4, #4]
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005620:	e7a8      	b.n	8005574 <_printf_i+0x150>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	4632      	mov	r2, r6
 8005626:	4649      	mov	r1, r9
 8005628:	4640      	mov	r0, r8
 800562a:	47d0      	blx	sl
 800562c:	3001      	adds	r0, #1
 800562e:	d0ab      	beq.n	8005588 <_printf_i+0x164>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	079b      	lsls	r3, r3, #30
 8005634:	d413      	bmi.n	800565e <_printf_i+0x23a>
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	4298      	cmp	r0, r3
 800563c:	bfb8      	it	lt
 800563e:	4618      	movlt	r0, r3
 8005640:	e7a4      	b.n	800558c <_printf_i+0x168>
 8005642:	2301      	movs	r3, #1
 8005644:	4632      	mov	r2, r6
 8005646:	4649      	mov	r1, r9
 8005648:	4640      	mov	r0, r8
 800564a:	47d0      	blx	sl
 800564c:	3001      	adds	r0, #1
 800564e:	d09b      	beq.n	8005588 <_printf_i+0x164>
 8005650:	3501      	adds	r5, #1
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	9903      	ldr	r1, [sp, #12]
 8005656:	1a5b      	subs	r3, r3, r1
 8005658:	42ab      	cmp	r3, r5
 800565a:	dcf2      	bgt.n	8005642 <_printf_i+0x21e>
 800565c:	e7eb      	b.n	8005636 <_printf_i+0x212>
 800565e:	2500      	movs	r5, #0
 8005660:	f104 0619 	add.w	r6, r4, #25
 8005664:	e7f5      	b.n	8005652 <_printf_i+0x22e>
 8005666:	bf00      	nop
 8005668:	08007b56 	.word	0x08007b56
 800566c:	08007b67 	.word	0x08007b67

08005670 <siprintf>:
 8005670:	b40e      	push	{r1, r2, r3}
 8005672:	b500      	push	{lr}
 8005674:	b09c      	sub	sp, #112	; 0x70
 8005676:	ab1d      	add	r3, sp, #116	; 0x74
 8005678:	9002      	str	r0, [sp, #8]
 800567a:	9006      	str	r0, [sp, #24]
 800567c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005680:	4809      	ldr	r0, [pc, #36]	; (80056a8 <siprintf+0x38>)
 8005682:	9107      	str	r1, [sp, #28]
 8005684:	9104      	str	r1, [sp, #16]
 8005686:	4909      	ldr	r1, [pc, #36]	; (80056ac <siprintf+0x3c>)
 8005688:	f853 2b04 	ldr.w	r2, [r3], #4
 800568c:	9105      	str	r1, [sp, #20]
 800568e:	6800      	ldr	r0, [r0, #0]
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	a902      	add	r1, sp, #8
 8005694:	f001 fb32 	bl	8006cfc <_svfiprintf_r>
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	b01c      	add	sp, #112	; 0x70
 80056a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a4:	b003      	add	sp, #12
 80056a6:	4770      	bx	lr
 80056a8:	2000000c 	.word	0x2000000c
 80056ac:	ffff0208 	.word	0xffff0208

080056b0 <quorem>:
 80056b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	6903      	ldr	r3, [r0, #16]
 80056b6:	690c      	ldr	r4, [r1, #16]
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	4607      	mov	r7, r0
 80056bc:	f2c0 8081 	blt.w	80057c2 <quorem+0x112>
 80056c0:	3c01      	subs	r4, #1
 80056c2:	f101 0814 	add.w	r8, r1, #20
 80056c6:	f100 0514 	add.w	r5, r0, #20
 80056ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d8:	3301      	adds	r3, #1
 80056da:	429a      	cmp	r2, r3
 80056dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80056e8:	d331      	bcc.n	800574e <quorem+0x9e>
 80056ea:	f04f 0e00 	mov.w	lr, #0
 80056ee:	4640      	mov	r0, r8
 80056f0:	46ac      	mov	ip, r5
 80056f2:	46f2      	mov	sl, lr
 80056f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80056f8:	b293      	uxth	r3, r2
 80056fa:	fb06 e303 	mla	r3, r6, r3, lr
 80056fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005702:	b29b      	uxth	r3, r3
 8005704:	ebaa 0303 	sub.w	r3, sl, r3
 8005708:	0c12      	lsrs	r2, r2, #16
 800570a:	f8dc a000 	ldr.w	sl, [ip]
 800570e:	fb06 e202 	mla	r2, r6, r2, lr
 8005712:	fa13 f38a 	uxtah	r3, r3, sl
 8005716:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800571a:	fa1f fa82 	uxth.w	sl, r2
 800571e:	f8dc 2000 	ldr.w	r2, [ip]
 8005722:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005726:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800572a:	b29b      	uxth	r3, r3
 800572c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005730:	4581      	cmp	r9, r0
 8005732:	f84c 3b04 	str.w	r3, [ip], #4
 8005736:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800573a:	d2db      	bcs.n	80056f4 <quorem+0x44>
 800573c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005740:	b92b      	cbnz	r3, 800574e <quorem+0x9e>
 8005742:	9b01      	ldr	r3, [sp, #4]
 8005744:	3b04      	subs	r3, #4
 8005746:	429d      	cmp	r5, r3
 8005748:	461a      	mov	r2, r3
 800574a:	d32e      	bcc.n	80057aa <quorem+0xfa>
 800574c:	613c      	str	r4, [r7, #16]
 800574e:	4638      	mov	r0, r7
 8005750:	f001 f8be 	bl	80068d0 <__mcmp>
 8005754:	2800      	cmp	r0, #0
 8005756:	db24      	blt.n	80057a2 <quorem+0xf2>
 8005758:	3601      	adds	r6, #1
 800575a:	4628      	mov	r0, r5
 800575c:	f04f 0c00 	mov.w	ip, #0
 8005760:	f858 2b04 	ldr.w	r2, [r8], #4
 8005764:	f8d0 e000 	ldr.w	lr, [r0]
 8005768:	b293      	uxth	r3, r2
 800576a:	ebac 0303 	sub.w	r3, ip, r3
 800576e:	0c12      	lsrs	r2, r2, #16
 8005770:	fa13 f38e 	uxtah	r3, r3, lr
 8005774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005782:	45c1      	cmp	r9, r8
 8005784:	f840 3b04 	str.w	r3, [r0], #4
 8005788:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800578c:	d2e8      	bcs.n	8005760 <quorem+0xb0>
 800578e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005796:	b922      	cbnz	r2, 80057a2 <quorem+0xf2>
 8005798:	3b04      	subs	r3, #4
 800579a:	429d      	cmp	r5, r3
 800579c:	461a      	mov	r2, r3
 800579e:	d30a      	bcc.n	80057b6 <quorem+0x106>
 80057a0:	613c      	str	r4, [r7, #16]
 80057a2:	4630      	mov	r0, r6
 80057a4:	b003      	add	sp, #12
 80057a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	3b04      	subs	r3, #4
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d1cc      	bne.n	800574c <quorem+0x9c>
 80057b2:	3c01      	subs	r4, #1
 80057b4:	e7c7      	b.n	8005746 <quorem+0x96>
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	3b04      	subs	r3, #4
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d1f0      	bne.n	80057a0 <quorem+0xf0>
 80057be:	3c01      	subs	r4, #1
 80057c0:	e7eb      	b.n	800579a <quorem+0xea>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e7ee      	b.n	80057a4 <quorem+0xf4>
	...

080057c8 <_dtoa_r>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	ed2d 8b02 	vpush	{d8}
 80057d0:	ec57 6b10 	vmov	r6, r7, d0
 80057d4:	b095      	sub	sp, #84	; 0x54
 80057d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057dc:	9105      	str	r1, [sp, #20]
 80057de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80057e2:	4604      	mov	r4, r0
 80057e4:	9209      	str	r2, [sp, #36]	; 0x24
 80057e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e8:	b975      	cbnz	r5, 8005808 <_dtoa_r+0x40>
 80057ea:	2010      	movs	r0, #16
 80057ec:	f000 fddc 	bl	80063a8 <malloc>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6260      	str	r0, [r4, #36]	; 0x24
 80057f4:	b920      	cbnz	r0, 8005800 <_dtoa_r+0x38>
 80057f6:	4bb2      	ldr	r3, [pc, #712]	; (8005ac0 <_dtoa_r+0x2f8>)
 80057f8:	21ea      	movs	r1, #234	; 0xea
 80057fa:	48b2      	ldr	r0, [pc, #712]	; (8005ac4 <_dtoa_r+0x2fc>)
 80057fc:	f001 fb8e 	bl	8006f1c <__assert_func>
 8005800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005804:	6005      	str	r5, [r0, #0]
 8005806:	60c5      	str	r5, [r0, #12]
 8005808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	b151      	cbz	r1, 8005824 <_dtoa_r+0x5c>
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	604a      	str	r2, [r1, #4]
 8005812:	2301      	movs	r3, #1
 8005814:	4093      	lsls	r3, r2
 8005816:	608b      	str	r3, [r1, #8]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fe1b 	bl	8006454 <_Bfree>
 800581e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	1e3b      	subs	r3, r7, #0
 8005826:	bfb9      	ittee	lt
 8005828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800582c:	9303      	strlt	r3, [sp, #12]
 800582e:	2300      	movge	r3, #0
 8005830:	f8c8 3000 	strge.w	r3, [r8]
 8005834:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005838:	4ba3      	ldr	r3, [pc, #652]	; (8005ac8 <_dtoa_r+0x300>)
 800583a:	bfbc      	itt	lt
 800583c:	2201      	movlt	r2, #1
 800583e:	f8c8 2000 	strlt.w	r2, [r8]
 8005842:	ea33 0309 	bics.w	r3, r3, r9
 8005846:	d11b      	bne.n	8005880 <_dtoa_r+0xb8>
 8005848:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800584a:	f242 730f 	movw	r3, #9999	; 0x270f
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005854:	4333      	orrs	r3, r6
 8005856:	f000 857a 	beq.w	800634e <_dtoa_r+0xb86>
 800585a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800585c:	b963      	cbnz	r3, 8005878 <_dtoa_r+0xb0>
 800585e:	4b9b      	ldr	r3, [pc, #620]	; (8005acc <_dtoa_r+0x304>)
 8005860:	e024      	b.n	80058ac <_dtoa_r+0xe4>
 8005862:	4b9b      	ldr	r3, [pc, #620]	; (8005ad0 <_dtoa_r+0x308>)
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	9800      	ldr	r0, [sp, #0]
 800586e:	b015      	add	sp, #84	; 0x54
 8005870:	ecbd 8b02 	vpop	{d8}
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	4b94      	ldr	r3, [pc, #592]	; (8005acc <_dtoa_r+0x304>)
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	3303      	adds	r3, #3
 800587e:	e7f3      	b.n	8005868 <_dtoa_r+0xa0>
 8005880:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	ec51 0b17 	vmov	r0, r1, d7
 800588a:	2300      	movs	r3, #0
 800588c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005890:	f7fb f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005894:	4680      	mov	r8, r0
 8005896:	b158      	cbz	r0, 80058b0 <_dtoa_r+0xe8>
 8005898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800589a:	2301      	movs	r3, #1
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8551 	beq.w	8006348 <_dtoa_r+0xb80>
 80058a6:	488b      	ldr	r0, [pc, #556]	; (8005ad4 <_dtoa_r+0x30c>)
 80058a8:	6018      	str	r0, [r3, #0]
 80058aa:	1e43      	subs	r3, r0, #1
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	e7dd      	b.n	800586c <_dtoa_r+0xa4>
 80058b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80058b4:	aa12      	add	r2, sp, #72	; 0x48
 80058b6:	a913      	add	r1, sp, #76	; 0x4c
 80058b8:	4620      	mov	r0, r4
 80058ba:	f001 f8ad 	bl	8006a18 <__d2b>
 80058be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058c2:	4683      	mov	fp, r0
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	d07c      	beq.n	80059c2 <_dtoa_r+0x1fa>
 80058c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80058ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80058d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80058da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80058de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058e2:	4b7d      	ldr	r3, [pc, #500]	; (8005ad8 <_dtoa_r+0x310>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fa fccd 	bl	8000288 <__aeabi_dsub>
 80058ee:	a36e      	add	r3, pc, #440	; (adr r3, 8005aa8 <_dtoa_r+0x2e0>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fa fe80 	bl	80005f8 <__aeabi_dmul>
 80058f8:	a36d      	add	r3, pc, #436	; (adr r3, 8005ab0 <_dtoa_r+0x2e8>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fcc5 	bl	800028c <__adddf3>
 8005902:	4606      	mov	r6, r0
 8005904:	4628      	mov	r0, r5
 8005906:	460f      	mov	r7, r1
 8005908:	f7fa fe0c 	bl	8000524 <__aeabi_i2d>
 800590c:	a36a      	add	r3, pc, #424	; (adr r3, 8005ab8 <_dtoa_r+0x2f0>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f7fa fe71 	bl	80005f8 <__aeabi_dmul>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4630      	mov	r0, r6
 800591c:	4639      	mov	r1, r7
 800591e:	f7fa fcb5 	bl	800028c <__adddf3>
 8005922:	4606      	mov	r6, r0
 8005924:	460f      	mov	r7, r1
 8005926:	f7fb f917 	bl	8000b58 <__aeabi_d2iz>
 800592a:	2200      	movs	r2, #0
 800592c:	4682      	mov	sl, r0
 800592e:	2300      	movs	r3, #0
 8005930:	4630      	mov	r0, r6
 8005932:	4639      	mov	r1, r7
 8005934:	f7fb f8d2 	bl	8000adc <__aeabi_dcmplt>
 8005938:	b148      	cbz	r0, 800594e <_dtoa_r+0x186>
 800593a:	4650      	mov	r0, sl
 800593c:	f7fa fdf2 	bl	8000524 <__aeabi_i2d>
 8005940:	4632      	mov	r2, r6
 8005942:	463b      	mov	r3, r7
 8005944:	f7fb f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005948:	b908      	cbnz	r0, 800594e <_dtoa_r+0x186>
 800594a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800594e:	f1ba 0f16 	cmp.w	sl, #22
 8005952:	d854      	bhi.n	80059fe <_dtoa_r+0x236>
 8005954:	4b61      	ldr	r3, [pc, #388]	; (8005adc <_dtoa_r+0x314>)
 8005956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005962:	f7fb f8bb 	bl	8000adc <__aeabi_dcmplt>
 8005966:	2800      	cmp	r0, #0
 8005968:	d04b      	beq.n	8005a02 <_dtoa_r+0x23a>
 800596a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800596e:	2300      	movs	r3, #0
 8005970:	930e      	str	r3, [sp, #56]	; 0x38
 8005972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005974:	1b5d      	subs	r5, r3, r5
 8005976:	1e6b      	subs	r3, r5, #1
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	bf43      	ittte	mi
 800597c:	2300      	movmi	r3, #0
 800597e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005982:	9304      	strmi	r3, [sp, #16]
 8005984:	f04f 0800 	movpl.w	r8, #0
 8005988:	f1ba 0f00 	cmp.w	sl, #0
 800598c:	db3b      	blt.n	8005a06 <_dtoa_r+0x23e>
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005994:	4453      	add	r3, sl
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	2300      	movs	r3, #0
 800599a:	9306      	str	r3, [sp, #24]
 800599c:	9b05      	ldr	r3, [sp, #20]
 800599e:	2b09      	cmp	r3, #9
 80059a0:	d869      	bhi.n	8005a76 <_dtoa_r+0x2ae>
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	bfc4      	itt	gt
 80059a6:	3b04      	subgt	r3, #4
 80059a8:	9305      	strgt	r3, [sp, #20]
 80059aa:	9b05      	ldr	r3, [sp, #20]
 80059ac:	f1a3 0302 	sub.w	r3, r3, #2
 80059b0:	bfcc      	ite	gt
 80059b2:	2500      	movgt	r5, #0
 80059b4:	2501      	movle	r5, #1
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d869      	bhi.n	8005a8e <_dtoa_r+0x2c6>
 80059ba:	e8df f003 	tbb	[pc, r3]
 80059be:	4e2c      	.short	0x4e2c
 80059c0:	5a4c      	.short	0x5a4c
 80059c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80059c6:	441d      	add	r5, r3
 80059c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	bfc1      	itttt	gt
 80059d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80059d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80059dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059e0:	bfda      	itte	le
 80059e2:	f1c3 0320 	rsble	r3, r3, #32
 80059e6:	fa06 f003 	lslle.w	r0, r6, r3
 80059ea:	4318      	orrgt	r0, r3
 80059ec:	f7fa fd8a 	bl	8000504 <__aeabi_ui2d>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4606      	mov	r6, r0
 80059f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80059f8:	3d01      	subs	r5, #1
 80059fa:	9310      	str	r3, [sp, #64]	; 0x40
 80059fc:	e771      	b.n	80058e2 <_dtoa_r+0x11a>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e7b6      	b.n	8005970 <_dtoa_r+0x1a8>
 8005a02:	900e      	str	r0, [sp, #56]	; 0x38
 8005a04:	e7b5      	b.n	8005972 <_dtoa_r+0x1aa>
 8005a06:	f1ca 0300 	rsb	r3, sl, #0
 8005a0a:	9306      	str	r3, [sp, #24]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	eba8 080a 	sub.w	r8, r8, sl
 8005a12:	930d      	str	r3, [sp, #52]	; 0x34
 8005a14:	e7c2      	b.n	800599c <_dtoa_r+0x1d4>
 8005a16:	2300      	movs	r3, #0
 8005a18:	9308      	str	r3, [sp, #32]
 8005a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dc39      	bgt.n	8005a94 <_dtoa_r+0x2cc>
 8005a20:	f04f 0901 	mov.w	r9, #1
 8005a24:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a28:	464b      	mov	r3, r9
 8005a2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005a30:	2200      	movs	r2, #0
 8005a32:	6042      	str	r2, [r0, #4]
 8005a34:	2204      	movs	r2, #4
 8005a36:	f102 0614 	add.w	r6, r2, #20
 8005a3a:	429e      	cmp	r6, r3
 8005a3c:	6841      	ldr	r1, [r0, #4]
 8005a3e:	d92f      	bls.n	8005aa0 <_dtoa_r+0x2d8>
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 fcc7 	bl	80063d4 <_Balloc>
 8005a46:	9000      	str	r0, [sp, #0]
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d14b      	bne.n	8005ae4 <_dtoa_r+0x31c>
 8005a4c:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <_dtoa_r+0x318>)
 8005a4e:	4602      	mov	r2, r0
 8005a50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a54:	e6d1      	b.n	80057fa <_dtoa_r+0x32>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e7de      	b.n	8005a18 <_dtoa_r+0x250>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9308      	str	r3, [sp, #32]
 8005a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a60:	eb0a 0903 	add.w	r9, sl, r3
 8005a64:	f109 0301 	add.w	r3, r9, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	bfb8      	it	lt
 8005a6e:	2301      	movlt	r3, #1
 8005a70:	e7dd      	b.n	8005a2e <_dtoa_r+0x266>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7f2      	b.n	8005a5c <_dtoa_r+0x294>
 8005a76:	2501      	movs	r5, #1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	9508      	str	r5, [sp, #32]
 8005a7e:	f04f 39ff 	mov.w	r9, #4294967295
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a88:	2312      	movs	r3, #18
 8005a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8c:	e7cf      	b.n	8005a2e <_dtoa_r+0x266>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	9308      	str	r3, [sp, #32]
 8005a92:	e7f4      	b.n	8005a7e <_dtoa_r+0x2b6>
 8005a94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a98:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	e7c6      	b.n	8005a2e <_dtoa_r+0x266>
 8005aa0:	3101      	adds	r1, #1
 8005aa2:	6041      	str	r1, [r0, #4]
 8005aa4:	0052      	lsls	r2, r2, #1
 8005aa6:	e7c6      	b.n	8005a36 <_dtoa_r+0x26e>
 8005aa8:	636f4361 	.word	0x636f4361
 8005aac:	3fd287a7 	.word	0x3fd287a7
 8005ab0:	8b60c8b3 	.word	0x8b60c8b3
 8005ab4:	3fc68a28 	.word	0x3fc68a28
 8005ab8:	509f79fb 	.word	0x509f79fb
 8005abc:	3fd34413 	.word	0x3fd34413
 8005ac0:	08007b85 	.word	0x08007b85
 8005ac4:	08007b9c 	.word	0x08007b9c
 8005ac8:	7ff00000 	.word	0x7ff00000
 8005acc:	08007b81 	.word	0x08007b81
 8005ad0:	08007b78 	.word	0x08007b78
 8005ad4:	08007b55 	.word	0x08007b55
 8005ad8:	3ff80000 	.word	0x3ff80000
 8005adc:	08007c98 	.word	0x08007c98
 8005ae0:	08007bfb 	.word	0x08007bfb
 8005ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae6:	9a00      	ldr	r2, [sp, #0]
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	9b01      	ldr	r3, [sp, #4]
 8005aec:	2b0e      	cmp	r3, #14
 8005aee:	f200 80ad 	bhi.w	8005c4c <_dtoa_r+0x484>
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	f000 80aa 	beq.w	8005c4c <_dtoa_r+0x484>
 8005af8:	f1ba 0f00 	cmp.w	sl, #0
 8005afc:	dd36      	ble.n	8005b6c <_dtoa_r+0x3a4>
 8005afe:	4ac3      	ldr	r2, [pc, #780]	; (8005e0c <_dtoa_r+0x644>)
 8005b00:	f00a 030f 	and.w	r3, sl, #15
 8005b04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b08:	ed93 7b00 	vldr	d7, [r3]
 8005b0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005b10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005b14:	eeb0 8a47 	vmov.f32	s16, s14
 8005b18:	eef0 8a67 	vmov.f32	s17, s15
 8005b1c:	d016      	beq.n	8005b4c <_dtoa_r+0x384>
 8005b1e:	4bbc      	ldr	r3, [pc, #752]	; (8005e10 <_dtoa_r+0x648>)
 8005b20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b28:	f7fa fe90 	bl	800084c <__aeabi_ddiv>
 8005b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b30:	f007 070f 	and.w	r7, r7, #15
 8005b34:	2503      	movs	r5, #3
 8005b36:	4eb6      	ldr	r6, [pc, #728]	; (8005e10 <_dtoa_r+0x648>)
 8005b38:	b957      	cbnz	r7, 8005b50 <_dtoa_r+0x388>
 8005b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b3e:	ec53 2b18 	vmov	r2, r3, d8
 8005b42:	f7fa fe83 	bl	800084c <__aeabi_ddiv>
 8005b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b4a:	e029      	b.n	8005ba0 <_dtoa_r+0x3d8>
 8005b4c:	2502      	movs	r5, #2
 8005b4e:	e7f2      	b.n	8005b36 <_dtoa_r+0x36e>
 8005b50:	07f9      	lsls	r1, r7, #31
 8005b52:	d508      	bpl.n	8005b66 <_dtoa_r+0x39e>
 8005b54:	ec51 0b18 	vmov	r0, r1, d8
 8005b58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b5c:	f7fa fd4c 	bl	80005f8 <__aeabi_dmul>
 8005b60:	ec41 0b18 	vmov	d8, r0, r1
 8005b64:	3501      	adds	r5, #1
 8005b66:	107f      	asrs	r7, r7, #1
 8005b68:	3608      	adds	r6, #8
 8005b6a:	e7e5      	b.n	8005b38 <_dtoa_r+0x370>
 8005b6c:	f000 80a6 	beq.w	8005cbc <_dtoa_r+0x4f4>
 8005b70:	f1ca 0600 	rsb	r6, sl, #0
 8005b74:	4ba5      	ldr	r3, [pc, #660]	; (8005e0c <_dtoa_r+0x644>)
 8005b76:	4fa6      	ldr	r7, [pc, #664]	; (8005e10 <_dtoa_r+0x648>)
 8005b78:	f006 020f 	and.w	r2, r6, #15
 8005b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b88:	f7fa fd36 	bl	80005f8 <__aeabi_dmul>
 8005b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b90:	1136      	asrs	r6, r6, #4
 8005b92:	2300      	movs	r3, #0
 8005b94:	2502      	movs	r5, #2
 8005b96:	2e00      	cmp	r6, #0
 8005b98:	f040 8085 	bne.w	8005ca6 <_dtoa_r+0x4de>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1d2      	bne.n	8005b46 <_dtoa_r+0x37e>
 8005ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 808c 	beq.w	8005cc0 <_dtoa_r+0x4f8>
 8005ba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005bac:	4b99      	ldr	r3, [pc, #612]	; (8005e14 <_dtoa_r+0x64c>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa ff92 	bl	8000adc <__aeabi_dcmplt>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f000 8081 	beq.w	8005cc0 <_dtoa_r+0x4f8>
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d07d      	beq.n	8005cc0 <_dtoa_r+0x4f8>
 8005bc4:	f1b9 0f00 	cmp.w	r9, #0
 8005bc8:	dd3c      	ble.n	8005c44 <_dtoa_r+0x47c>
 8005bca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005bce:	9307      	str	r3, [sp, #28]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4b91      	ldr	r3, [pc, #580]	; (8005e18 <_dtoa_r+0x650>)
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	f7fa fd0e 	bl	80005f8 <__aeabi_dmul>
 8005bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005be0:	3501      	adds	r5, #1
 8005be2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005be6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005bea:	4628      	mov	r0, r5
 8005bec:	f7fa fc9a 	bl	8000524 <__aeabi_i2d>
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	f7fa fd00 	bl	80005f8 <__aeabi_dmul>
 8005bf8:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <_dtoa_r+0x654>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f7fa fb46 	bl	800028c <__adddf3>
 8005c00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c08:	9303      	str	r3, [sp, #12]
 8005c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d15c      	bne.n	8005cca <_dtoa_r+0x502>
 8005c10:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <_dtoa_r+0x658>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	4630      	mov	r0, r6
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa fb36 	bl	8000288 <__aeabi_dsub>
 8005c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c20:	4606      	mov	r6, r0
 8005c22:	460f      	mov	r7, r1
 8005c24:	f7fa ff78 	bl	8000b18 <__aeabi_dcmpgt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f040 8296 	bne.w	800615a <_dtoa_r+0x992>
 8005c2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005c32:	4630      	mov	r0, r6
 8005c34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f7fa ff4f 	bl	8000adc <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	f040 8288 	bne.w	8006154 <_dtoa_r+0x98c>
 8005c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f2c0 8158 	blt.w	8005f04 <_dtoa_r+0x73c>
 8005c54:	f1ba 0f0e 	cmp.w	sl, #14
 8005c58:	f300 8154 	bgt.w	8005f04 <_dtoa_r+0x73c>
 8005c5c:	4b6b      	ldr	r3, [pc, #428]	; (8005e0c <_dtoa_r+0x644>)
 8005c5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f280 80e3 	bge.w	8005e34 <_dtoa_r+0x66c>
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f300 80df 	bgt.w	8005e34 <_dtoa_r+0x66c>
 8005c76:	f040 826d 	bne.w	8006154 <_dtoa_r+0x98c>
 8005c7a:	4b69      	ldr	r3, [pc, #420]	; (8005e20 <_dtoa_r+0x658>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa fcb9 	bl	80005f8 <__aeabi_dmul>
 8005c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c8a:	f7fa ff3b 	bl	8000b04 <__aeabi_dcmpge>
 8005c8e:	9e01      	ldr	r6, [sp, #4]
 8005c90:	4637      	mov	r7, r6
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f040 8243 	bne.w	800611e <_dtoa_r+0x956>
 8005c98:	9d00      	ldr	r5, [sp, #0]
 8005c9a:	2331      	movs	r3, #49	; 0x31
 8005c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ca0:	f10a 0a01 	add.w	sl, sl, #1
 8005ca4:	e23f      	b.n	8006126 <_dtoa_r+0x95e>
 8005ca6:	07f2      	lsls	r2, r6, #31
 8005ca8:	d505      	bpl.n	8005cb6 <_dtoa_r+0x4ee>
 8005caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cae:	f7fa fca3 	bl	80005f8 <__aeabi_dmul>
 8005cb2:	3501      	adds	r5, #1
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	1076      	asrs	r6, r6, #1
 8005cb8:	3708      	adds	r7, #8
 8005cba:	e76c      	b.n	8005b96 <_dtoa_r+0x3ce>
 8005cbc:	2502      	movs	r5, #2
 8005cbe:	e76f      	b.n	8005ba0 <_dtoa_r+0x3d8>
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8005cc8:	e78d      	b.n	8005be6 <_dtoa_r+0x41e>
 8005cca:	9900      	ldr	r1, [sp, #0]
 8005ccc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cd0:	4b4e      	ldr	r3, [pc, #312]	; (8005e0c <_dtoa_r+0x644>)
 8005cd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	9102      	str	r1, [sp, #8]
 8005cda:	9908      	ldr	r1, [sp, #32]
 8005cdc:	eeb0 8a47 	vmov.f32	s16, s14
 8005ce0:	eef0 8a67 	vmov.f32	s17, s15
 8005ce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d045      	beq.n	8005d7c <_dtoa_r+0x5b4>
 8005cf0:	494c      	ldr	r1, [pc, #304]	; (8005e24 <_dtoa_r+0x65c>)
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	f7fa fdaa 	bl	800084c <__aeabi_ddiv>
 8005cf8:	ec53 2b18 	vmov	r2, r3, d8
 8005cfc:	f7fa fac4 	bl	8000288 <__aeabi_dsub>
 8005d00:	9d00      	ldr	r5, [sp, #0]
 8005d02:	ec41 0b18 	vmov	d8, r0, r1
 8005d06:	4639      	mov	r1, r7
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7fa ff25 	bl	8000b58 <__aeabi_d2iz>
 8005d0e:	900c      	str	r0, [sp, #48]	; 0x30
 8005d10:	f7fa fc08 	bl	8000524 <__aeabi_i2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4630      	mov	r0, r6
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	f7fa fab4 	bl	8000288 <__aeabi_dsub>
 8005d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d22:	3330      	adds	r3, #48	; 0x30
 8005d24:	f805 3b01 	strb.w	r3, [r5], #1
 8005d28:	ec53 2b18 	vmov	r2, r3, d8
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	460f      	mov	r7, r1
 8005d30:	f7fa fed4 	bl	8000adc <__aeabi_dcmplt>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d165      	bne.n	8005e04 <_dtoa_r+0x63c>
 8005d38:	4632      	mov	r2, r6
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	4935      	ldr	r1, [pc, #212]	; (8005e14 <_dtoa_r+0x64c>)
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f7fa faa2 	bl	8000288 <__aeabi_dsub>
 8005d44:	ec53 2b18 	vmov	r2, r3, d8
 8005d48:	f7fa fec8 	bl	8000adc <__aeabi_dcmplt>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f040 80b9 	bne.w	8005ec4 <_dtoa_r+0x6fc>
 8005d52:	9b02      	ldr	r3, [sp, #8]
 8005d54:	429d      	cmp	r5, r3
 8005d56:	f43f af75 	beq.w	8005c44 <_dtoa_r+0x47c>
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <_dtoa_r+0x650>)
 8005d5c:	ec51 0b18 	vmov	r0, r1, d8
 8005d60:	2200      	movs	r2, #0
 8005d62:	f7fa fc49 	bl	80005f8 <__aeabi_dmul>
 8005d66:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <_dtoa_r+0x650>)
 8005d68:	ec41 0b18 	vmov	d8, r0, r1
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	e7c4      	b.n	8005d06 <_dtoa_r+0x53e>
 8005d7c:	ec51 0b17 	vmov	r0, r1, d7
 8005d80:	f7fa fc3a 	bl	80005f8 <__aeabi_dmul>
 8005d84:	9b02      	ldr	r3, [sp, #8]
 8005d86:	9d00      	ldr	r5, [sp, #0]
 8005d88:	930c      	str	r3, [sp, #48]	; 0x30
 8005d8a:	ec41 0b18 	vmov	d8, r0, r1
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7fa fee1 	bl	8000b58 <__aeabi_d2iz>
 8005d96:	9011      	str	r0, [sp, #68]	; 0x44
 8005d98:	f7fa fbc4 	bl	8000524 <__aeabi_i2d>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4630      	mov	r0, r6
 8005da2:	4639      	mov	r1, r7
 8005da4:	f7fa fa70 	bl	8000288 <__aeabi_dsub>
 8005da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005daa:	3330      	adds	r3, #48	; 0x30
 8005dac:	f805 3b01 	strb.w	r3, [r5], #1
 8005db0:	9b02      	ldr	r3, [sp, #8]
 8005db2:	429d      	cmp	r5, r3
 8005db4:	4606      	mov	r6, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	d134      	bne.n	8005e28 <_dtoa_r+0x660>
 8005dbe:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <_dtoa_r+0x65c>)
 8005dc0:	ec51 0b18 	vmov	r0, r1, d8
 8005dc4:	f7fa fa62 	bl	800028c <__adddf3>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4630      	mov	r0, r6
 8005dce:	4639      	mov	r1, r7
 8005dd0:	f7fa fea2 	bl	8000b18 <__aeabi_dcmpgt>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d175      	bne.n	8005ec4 <_dtoa_r+0x6fc>
 8005dd8:	ec53 2b18 	vmov	r2, r3, d8
 8005ddc:	4911      	ldr	r1, [pc, #68]	; (8005e24 <_dtoa_r+0x65c>)
 8005dde:	2000      	movs	r0, #0
 8005de0:	f7fa fa52 	bl	8000288 <__aeabi_dsub>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa fe76 	bl	8000adc <__aeabi_dcmplt>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	f43f af27 	beq.w	8005c44 <_dtoa_r+0x47c>
 8005df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005df8:	1e6b      	subs	r3, r5, #1
 8005dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8005dfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e00:	2b30      	cmp	r3, #48	; 0x30
 8005e02:	d0f8      	beq.n	8005df6 <_dtoa_r+0x62e>
 8005e04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e08:	e04a      	b.n	8005ea0 <_dtoa_r+0x6d8>
 8005e0a:	bf00      	nop
 8005e0c:	08007c98 	.word	0x08007c98
 8005e10:	08007c70 	.word	0x08007c70
 8005e14:	3ff00000 	.word	0x3ff00000
 8005e18:	40240000 	.word	0x40240000
 8005e1c:	401c0000 	.word	0x401c0000
 8005e20:	40140000 	.word	0x40140000
 8005e24:	3fe00000 	.word	0x3fe00000
 8005e28:	4baf      	ldr	r3, [pc, #700]	; (80060e8 <_dtoa_r+0x920>)
 8005e2a:	f7fa fbe5 	bl	80005f8 <__aeabi_dmul>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460f      	mov	r7, r1
 8005e32:	e7ac      	b.n	8005d8e <_dtoa_r+0x5c6>
 8005e34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e38:	9d00      	ldr	r5, [sp, #0]
 8005e3a:	4642      	mov	r2, r8
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	4630      	mov	r0, r6
 8005e40:	4639      	mov	r1, r7
 8005e42:	f7fa fd03 	bl	800084c <__aeabi_ddiv>
 8005e46:	f7fa fe87 	bl	8000b58 <__aeabi_d2iz>
 8005e4a:	9002      	str	r0, [sp, #8]
 8005e4c:	f7fa fb6a 	bl	8000524 <__aeabi_i2d>
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	f7fa fbd0 	bl	80005f8 <__aeabi_dmul>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fa12 	bl	8000288 <__aeabi_dsub>
 8005e64:	9e02      	ldr	r6, [sp, #8]
 8005e66:	9f01      	ldr	r7, [sp, #4]
 8005e68:	3630      	adds	r6, #48	; 0x30
 8005e6a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e6e:	9e00      	ldr	r6, [sp, #0]
 8005e70:	1bae      	subs	r6, r5, r6
 8005e72:	42b7      	cmp	r7, r6
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	d137      	bne.n	8005eea <_dtoa_r+0x722>
 8005e7a:	f7fa fa07 	bl	800028c <__adddf3>
 8005e7e:	4642      	mov	r2, r8
 8005e80:	464b      	mov	r3, r9
 8005e82:	4606      	mov	r6, r0
 8005e84:	460f      	mov	r7, r1
 8005e86:	f7fa fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8005e8a:	b9c8      	cbnz	r0, 8005ec0 <_dtoa_r+0x6f8>
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	464b      	mov	r3, r9
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e98:	b110      	cbz	r0, 8005ea0 <_dtoa_r+0x6d8>
 8005e9a:	9b02      	ldr	r3, [sp, #8]
 8005e9c:	07d9      	lsls	r1, r3, #31
 8005e9e:	d40f      	bmi.n	8005ec0 <_dtoa_r+0x6f8>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	f000 fad6 	bl	8006454 <_Bfree>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	702b      	strb	r3, [r5, #0]
 8005eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eae:	f10a 0001 	add.w	r0, sl, #1
 8005eb2:	6018      	str	r0, [r3, #0]
 8005eb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f43f acd8 	beq.w	800586c <_dtoa_r+0xa4>
 8005ebc:	601d      	str	r5, [r3, #0]
 8005ebe:	e4d5      	b.n	800586c <_dtoa_r+0xa4>
 8005ec0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ecc:	2a39      	cmp	r2, #57	; 0x39
 8005ece:	d108      	bne.n	8005ee2 <_dtoa_r+0x71a>
 8005ed0:	9a00      	ldr	r2, [sp, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d1f7      	bne.n	8005ec6 <_dtoa_r+0x6fe>
 8005ed6:	9a07      	ldr	r2, [sp, #28]
 8005ed8:	9900      	ldr	r1, [sp, #0]
 8005eda:	3201      	adds	r2, #1
 8005edc:	9207      	str	r2, [sp, #28]
 8005ede:	2230      	movs	r2, #48	; 0x30
 8005ee0:	700a      	strb	r2, [r1, #0]
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	3201      	adds	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e78c      	b.n	8005e04 <_dtoa_r+0x63c>
 8005eea:	4b7f      	ldr	r3, [pc, #508]	; (80060e8 <_dtoa_r+0x920>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	f7fa fb83 	bl	80005f8 <__aeabi_dmul>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460f      	mov	r7, r1
 8005efa:	f7fa fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d09b      	beq.n	8005e3a <_dtoa_r+0x672>
 8005f02:	e7cd      	b.n	8005ea0 <_dtoa_r+0x6d8>
 8005f04:	9a08      	ldr	r2, [sp, #32]
 8005f06:	2a00      	cmp	r2, #0
 8005f08:	f000 80c4 	beq.w	8006094 <_dtoa_r+0x8cc>
 8005f0c:	9a05      	ldr	r2, [sp, #20]
 8005f0e:	2a01      	cmp	r2, #1
 8005f10:	f300 80a8 	bgt.w	8006064 <_dtoa_r+0x89c>
 8005f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	f000 80a0 	beq.w	800605c <_dtoa_r+0x894>
 8005f1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f20:	9e06      	ldr	r6, [sp, #24]
 8005f22:	4645      	mov	r5, r8
 8005f24:	9a04      	ldr	r2, [sp, #16]
 8005f26:	2101      	movs	r1, #1
 8005f28:	441a      	add	r2, r3
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	4498      	add	r8, r3
 8005f2e:	9204      	str	r2, [sp, #16]
 8005f30:	f000 fb4c 	bl	80065cc <__i2b>
 8005f34:	4607      	mov	r7, r0
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	dd0b      	ble.n	8005f52 <_dtoa_r+0x78a>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd08      	ble.n	8005f52 <_dtoa_r+0x78a>
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	9a04      	ldr	r2, [sp, #16]
 8005f44:	bfa8      	it	ge
 8005f46:	462b      	movge	r3, r5
 8005f48:	eba8 0803 	sub.w	r8, r8, r3
 8005f4c:	1aed      	subs	r5, r5, r3
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	9b06      	ldr	r3, [sp, #24]
 8005f54:	b1fb      	cbz	r3, 8005f96 <_dtoa_r+0x7ce>
 8005f56:	9b08      	ldr	r3, [sp, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 809f 	beq.w	800609c <_dtoa_r+0x8d4>
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	dd11      	ble.n	8005f86 <_dtoa_r+0x7be>
 8005f62:	4639      	mov	r1, r7
 8005f64:	4632      	mov	r2, r6
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fbec 	bl	8006744 <__pow5mult>
 8005f6c:	465a      	mov	r2, fp
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4607      	mov	r7, r0
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 fb40 	bl	80065f8 <__multiply>
 8005f78:	4659      	mov	r1, fp
 8005f7a:	9007      	str	r0, [sp, #28]
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fa69 	bl	8006454 <_Bfree>
 8005f82:	9b07      	ldr	r3, [sp, #28]
 8005f84:	469b      	mov	fp, r3
 8005f86:	9b06      	ldr	r3, [sp, #24]
 8005f88:	1b9a      	subs	r2, r3, r6
 8005f8a:	d004      	beq.n	8005f96 <_dtoa_r+0x7ce>
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f000 fbd8 	bl	8006744 <__pow5mult>
 8005f94:	4683      	mov	fp, r0
 8005f96:	2101      	movs	r1, #1
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 fb17 	bl	80065cc <__i2b>
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	dd7c      	ble.n	80060a0 <_dtoa_r+0x8d8>
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4601      	mov	r1, r0
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 fbca 	bl	8006744 <__pow5mult>
 8005fb0:	9b05      	ldr	r3, [sp, #20]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	dd76      	ble.n	80060a6 <_dtoa_r+0x8de>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9306      	str	r3, [sp, #24]
 8005fbc:	6933      	ldr	r3, [r6, #16]
 8005fbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005fc2:	6918      	ldr	r0, [r3, #16]
 8005fc4:	f000 fab2 	bl	800652c <__hi0bits>
 8005fc8:	f1c0 0020 	rsb	r0, r0, #32
 8005fcc:	9b04      	ldr	r3, [sp, #16]
 8005fce:	4418      	add	r0, r3
 8005fd0:	f010 001f 	ands.w	r0, r0, #31
 8005fd4:	f000 8086 	beq.w	80060e4 <_dtoa_r+0x91c>
 8005fd8:	f1c0 0320 	rsb	r3, r0, #32
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	dd7f      	ble.n	80060e0 <_dtoa_r+0x918>
 8005fe0:	f1c0 001c 	rsb	r0, r0, #28
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	4403      	add	r3, r0
 8005fe8:	4480      	add	r8, r0
 8005fea:	4405      	add	r5, r0
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	f1b8 0f00 	cmp.w	r8, #0
 8005ff2:	dd05      	ble.n	8006000 <_dtoa_r+0x838>
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fbfd 	bl	80067f8 <__lshift>
 8005ffe:	4683      	mov	fp, r0
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	dd05      	ble.n	8006012 <_dtoa_r+0x84a>
 8006006:	4631      	mov	r1, r6
 8006008:	461a      	mov	r2, r3
 800600a:	4620      	mov	r0, r4
 800600c:	f000 fbf4 	bl	80067f8 <__lshift>
 8006010:	4606      	mov	r6, r0
 8006012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d069      	beq.n	80060ec <_dtoa_r+0x924>
 8006018:	4631      	mov	r1, r6
 800601a:	4658      	mov	r0, fp
 800601c:	f000 fc58 	bl	80068d0 <__mcmp>
 8006020:	2800      	cmp	r0, #0
 8006022:	da63      	bge.n	80060ec <_dtoa_r+0x924>
 8006024:	2300      	movs	r3, #0
 8006026:	4659      	mov	r1, fp
 8006028:	220a      	movs	r2, #10
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fa34 	bl	8006498 <__multadd>
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006036:	4683      	mov	fp, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 818f 	beq.w	800635c <_dtoa_r+0xb94>
 800603e:	4639      	mov	r1, r7
 8006040:	2300      	movs	r3, #0
 8006042:	220a      	movs	r2, #10
 8006044:	4620      	mov	r0, r4
 8006046:	f000 fa27 	bl	8006498 <__multadd>
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	4607      	mov	r7, r0
 8006050:	f300 808e 	bgt.w	8006170 <_dtoa_r+0x9a8>
 8006054:	9b05      	ldr	r3, [sp, #20]
 8006056:	2b02      	cmp	r3, #2
 8006058:	dc50      	bgt.n	80060fc <_dtoa_r+0x934>
 800605a:	e089      	b.n	8006170 <_dtoa_r+0x9a8>
 800605c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800605e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006062:	e75d      	b.n	8005f20 <_dtoa_r+0x758>
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	1e5e      	subs	r6, r3, #1
 8006068:	9b06      	ldr	r3, [sp, #24]
 800606a:	42b3      	cmp	r3, r6
 800606c:	bfbf      	itttt	lt
 800606e:	9b06      	ldrlt	r3, [sp, #24]
 8006070:	9606      	strlt	r6, [sp, #24]
 8006072:	1af2      	sublt	r2, r6, r3
 8006074:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006076:	bfb6      	itet	lt
 8006078:	189b      	addlt	r3, r3, r2
 800607a:	1b9e      	subge	r6, r3, r6
 800607c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	bfb8      	it	lt
 8006082:	2600      	movlt	r6, #0
 8006084:	2b00      	cmp	r3, #0
 8006086:	bfb5      	itete	lt
 8006088:	eba8 0503 	sublt.w	r5, r8, r3
 800608c:	9b01      	ldrge	r3, [sp, #4]
 800608e:	2300      	movlt	r3, #0
 8006090:	4645      	movge	r5, r8
 8006092:	e747      	b.n	8005f24 <_dtoa_r+0x75c>
 8006094:	9e06      	ldr	r6, [sp, #24]
 8006096:	9f08      	ldr	r7, [sp, #32]
 8006098:	4645      	mov	r5, r8
 800609a:	e74c      	b.n	8005f36 <_dtoa_r+0x76e>
 800609c:	9a06      	ldr	r2, [sp, #24]
 800609e:	e775      	b.n	8005f8c <_dtoa_r+0x7c4>
 80060a0:	9b05      	ldr	r3, [sp, #20]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	dc18      	bgt.n	80060d8 <_dtoa_r+0x910>
 80060a6:	9b02      	ldr	r3, [sp, #8]
 80060a8:	b9b3      	cbnz	r3, 80060d8 <_dtoa_r+0x910>
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b0:	b9a3      	cbnz	r3, 80060dc <_dtoa_r+0x914>
 80060b2:	9b03      	ldr	r3, [sp, #12]
 80060b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	0d1b      	lsrs	r3, r3, #20
 80060ba:	051b      	lsls	r3, r3, #20
 80060bc:	b12b      	cbz	r3, 80060ca <_dtoa_r+0x902>
 80060be:	9b04      	ldr	r3, [sp, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	9304      	str	r3, [sp, #16]
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	2301      	movs	r3, #1
 80060ca:	9306      	str	r3, [sp, #24]
 80060cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f47f af74 	bne.w	8005fbc <_dtoa_r+0x7f4>
 80060d4:	2001      	movs	r0, #1
 80060d6:	e779      	b.n	8005fcc <_dtoa_r+0x804>
 80060d8:	2300      	movs	r3, #0
 80060da:	e7f6      	b.n	80060ca <_dtoa_r+0x902>
 80060dc:	9b02      	ldr	r3, [sp, #8]
 80060de:	e7f4      	b.n	80060ca <_dtoa_r+0x902>
 80060e0:	d085      	beq.n	8005fee <_dtoa_r+0x826>
 80060e2:	4618      	mov	r0, r3
 80060e4:	301c      	adds	r0, #28
 80060e6:	e77d      	b.n	8005fe4 <_dtoa_r+0x81c>
 80060e8:	40240000 	.word	0x40240000
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dc38      	bgt.n	8006164 <_dtoa_r+0x99c>
 80060f2:	9b05      	ldr	r3, [sp, #20]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	dd35      	ble.n	8006164 <_dtoa_r+0x99c>
 80060f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80060fc:	f1b9 0f00 	cmp.w	r9, #0
 8006100:	d10d      	bne.n	800611e <_dtoa_r+0x956>
 8006102:	4631      	mov	r1, r6
 8006104:	464b      	mov	r3, r9
 8006106:	2205      	movs	r2, #5
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f9c5 	bl	8006498 <__multadd>
 800610e:	4601      	mov	r1, r0
 8006110:	4606      	mov	r6, r0
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fbdc 	bl	80068d0 <__mcmp>
 8006118:	2800      	cmp	r0, #0
 800611a:	f73f adbd 	bgt.w	8005c98 <_dtoa_r+0x4d0>
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	9d00      	ldr	r5, [sp, #0]
 8006122:	ea6f 0a03 	mvn.w	sl, r3
 8006126:	f04f 0800 	mov.w	r8, #0
 800612a:	4631      	mov	r1, r6
 800612c:	4620      	mov	r0, r4
 800612e:	f000 f991 	bl	8006454 <_Bfree>
 8006132:	2f00      	cmp	r7, #0
 8006134:	f43f aeb4 	beq.w	8005ea0 <_dtoa_r+0x6d8>
 8006138:	f1b8 0f00 	cmp.w	r8, #0
 800613c:	d005      	beq.n	800614a <_dtoa_r+0x982>
 800613e:	45b8      	cmp	r8, r7
 8006140:	d003      	beq.n	800614a <_dtoa_r+0x982>
 8006142:	4641      	mov	r1, r8
 8006144:	4620      	mov	r0, r4
 8006146:	f000 f985 	bl	8006454 <_Bfree>
 800614a:	4639      	mov	r1, r7
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f981 	bl	8006454 <_Bfree>
 8006152:	e6a5      	b.n	8005ea0 <_dtoa_r+0x6d8>
 8006154:	2600      	movs	r6, #0
 8006156:	4637      	mov	r7, r6
 8006158:	e7e1      	b.n	800611e <_dtoa_r+0x956>
 800615a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800615c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006160:	4637      	mov	r7, r6
 8006162:	e599      	b.n	8005c98 <_dtoa_r+0x4d0>
 8006164:	9b08      	ldr	r3, [sp, #32]
 8006166:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80fd 	beq.w	800636a <_dtoa_r+0xba2>
 8006170:	2d00      	cmp	r5, #0
 8006172:	dd05      	ble.n	8006180 <_dtoa_r+0x9b8>
 8006174:	4639      	mov	r1, r7
 8006176:	462a      	mov	r2, r5
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fb3d 	bl	80067f8 <__lshift>
 800617e:	4607      	mov	r7, r0
 8006180:	9b06      	ldr	r3, [sp, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d05c      	beq.n	8006240 <_dtoa_r+0xa78>
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4620      	mov	r0, r4
 800618a:	f000 f923 	bl	80063d4 <_Balloc>
 800618e:	4605      	mov	r5, r0
 8006190:	b928      	cbnz	r0, 800619e <_dtoa_r+0x9d6>
 8006192:	4b80      	ldr	r3, [pc, #512]	; (8006394 <_dtoa_r+0xbcc>)
 8006194:	4602      	mov	r2, r0
 8006196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800619a:	f7ff bb2e 	b.w	80057fa <_dtoa_r+0x32>
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	3202      	adds	r2, #2
 80061a2:	0092      	lsls	r2, r2, #2
 80061a4:	f107 010c 	add.w	r1, r7, #12
 80061a8:	300c      	adds	r0, #12
 80061aa:	f000 f905 	bl	80063b8 <memcpy>
 80061ae:	2201      	movs	r2, #1
 80061b0:	4629      	mov	r1, r5
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fb20 	bl	80067f8 <__lshift>
 80061b8:	9b00      	ldr	r3, [sp, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	444b      	add	r3, r9
 80061c2:	9307      	str	r3, [sp, #28]
 80061c4:	9b02      	ldr	r3, [sp, #8]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	46b8      	mov	r8, r7
 80061cc:	9306      	str	r3, [sp, #24]
 80061ce:	4607      	mov	r7, r0
 80061d0:	9b01      	ldr	r3, [sp, #4]
 80061d2:	4631      	mov	r1, r6
 80061d4:	3b01      	subs	r3, #1
 80061d6:	4658      	mov	r0, fp
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	f7ff fa69 	bl	80056b0 <quorem>
 80061de:	4603      	mov	r3, r0
 80061e0:	3330      	adds	r3, #48	; 0x30
 80061e2:	9004      	str	r0, [sp, #16]
 80061e4:	4641      	mov	r1, r8
 80061e6:	4658      	mov	r0, fp
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	f000 fb71 	bl	80068d0 <__mcmp>
 80061ee:	463a      	mov	r2, r7
 80061f0:	4681      	mov	r9, r0
 80061f2:	4631      	mov	r1, r6
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fb87 	bl	8006908 <__mdiff>
 80061fa:	68c2      	ldr	r2, [r0, #12]
 80061fc:	9b08      	ldr	r3, [sp, #32]
 80061fe:	4605      	mov	r5, r0
 8006200:	bb02      	cbnz	r2, 8006244 <_dtoa_r+0xa7c>
 8006202:	4601      	mov	r1, r0
 8006204:	4658      	mov	r0, fp
 8006206:	f000 fb63 	bl	80068d0 <__mcmp>
 800620a:	9b08      	ldr	r3, [sp, #32]
 800620c:	4602      	mov	r2, r0
 800620e:	4629      	mov	r1, r5
 8006210:	4620      	mov	r0, r4
 8006212:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006216:	f000 f91d 	bl	8006454 <_Bfree>
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621e:	9d01      	ldr	r5, [sp, #4]
 8006220:	ea43 0102 	orr.w	r1, r3, r2
 8006224:	9b06      	ldr	r3, [sp, #24]
 8006226:	430b      	orrs	r3, r1
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	d10d      	bne.n	8006248 <_dtoa_r+0xa80>
 800622c:	2b39      	cmp	r3, #57	; 0x39
 800622e:	d029      	beq.n	8006284 <_dtoa_r+0xabc>
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	dd01      	ble.n	800623a <_dtoa_r+0xa72>
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	3331      	adds	r3, #49	; 0x31
 800623a:	9a02      	ldr	r2, [sp, #8]
 800623c:	7013      	strb	r3, [r2, #0]
 800623e:	e774      	b.n	800612a <_dtoa_r+0x962>
 8006240:	4638      	mov	r0, r7
 8006242:	e7b9      	b.n	80061b8 <_dtoa_r+0x9f0>
 8006244:	2201      	movs	r2, #1
 8006246:	e7e2      	b.n	800620e <_dtoa_r+0xa46>
 8006248:	f1b9 0f00 	cmp.w	r9, #0
 800624c:	db06      	blt.n	800625c <_dtoa_r+0xa94>
 800624e:	9905      	ldr	r1, [sp, #20]
 8006250:	ea41 0909 	orr.w	r9, r1, r9
 8006254:	9906      	ldr	r1, [sp, #24]
 8006256:	ea59 0101 	orrs.w	r1, r9, r1
 800625a:	d120      	bne.n	800629e <_dtoa_r+0xad6>
 800625c:	2a00      	cmp	r2, #0
 800625e:	ddec      	ble.n	800623a <_dtoa_r+0xa72>
 8006260:	4659      	mov	r1, fp
 8006262:	2201      	movs	r2, #1
 8006264:	4620      	mov	r0, r4
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	f000 fac6 	bl	80067f8 <__lshift>
 800626c:	4631      	mov	r1, r6
 800626e:	4683      	mov	fp, r0
 8006270:	f000 fb2e 	bl	80068d0 <__mcmp>
 8006274:	2800      	cmp	r0, #0
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	dc02      	bgt.n	8006280 <_dtoa_r+0xab8>
 800627a:	d1de      	bne.n	800623a <_dtoa_r+0xa72>
 800627c:	07da      	lsls	r2, r3, #31
 800627e:	d5dc      	bpl.n	800623a <_dtoa_r+0xa72>
 8006280:	2b39      	cmp	r3, #57	; 0x39
 8006282:	d1d8      	bne.n	8006236 <_dtoa_r+0xa6e>
 8006284:	9a02      	ldr	r2, [sp, #8]
 8006286:	2339      	movs	r3, #57	; 0x39
 8006288:	7013      	strb	r3, [r2, #0]
 800628a:	462b      	mov	r3, r5
 800628c:	461d      	mov	r5, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006294:	2a39      	cmp	r2, #57	; 0x39
 8006296:	d050      	beq.n	800633a <_dtoa_r+0xb72>
 8006298:	3201      	adds	r2, #1
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e745      	b.n	800612a <_dtoa_r+0x962>
 800629e:	2a00      	cmp	r2, #0
 80062a0:	dd03      	ble.n	80062aa <_dtoa_r+0xae2>
 80062a2:	2b39      	cmp	r3, #57	; 0x39
 80062a4:	d0ee      	beq.n	8006284 <_dtoa_r+0xabc>
 80062a6:	3301      	adds	r3, #1
 80062a8:	e7c7      	b.n	800623a <_dtoa_r+0xa72>
 80062aa:	9a01      	ldr	r2, [sp, #4]
 80062ac:	9907      	ldr	r1, [sp, #28]
 80062ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062b2:	428a      	cmp	r2, r1
 80062b4:	d02a      	beq.n	800630c <_dtoa_r+0xb44>
 80062b6:	4659      	mov	r1, fp
 80062b8:	2300      	movs	r3, #0
 80062ba:	220a      	movs	r2, #10
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 f8eb 	bl	8006498 <__multadd>
 80062c2:	45b8      	cmp	r8, r7
 80062c4:	4683      	mov	fp, r0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	f04f 020a 	mov.w	r2, #10
 80062ce:	4641      	mov	r1, r8
 80062d0:	4620      	mov	r0, r4
 80062d2:	d107      	bne.n	80062e4 <_dtoa_r+0xb1c>
 80062d4:	f000 f8e0 	bl	8006498 <__multadd>
 80062d8:	4680      	mov	r8, r0
 80062da:	4607      	mov	r7, r0
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	3301      	adds	r3, #1
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	e775      	b.n	80061d0 <_dtoa_r+0xa08>
 80062e4:	f000 f8d8 	bl	8006498 <__multadd>
 80062e8:	4639      	mov	r1, r7
 80062ea:	4680      	mov	r8, r0
 80062ec:	2300      	movs	r3, #0
 80062ee:	220a      	movs	r2, #10
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 f8d1 	bl	8006498 <__multadd>
 80062f6:	4607      	mov	r7, r0
 80062f8:	e7f0      	b.n	80062dc <_dtoa_r+0xb14>
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	9a00      	ldr	r2, [sp, #0]
 8006300:	bfcc      	ite	gt
 8006302:	464d      	movgt	r5, r9
 8006304:	2501      	movle	r5, #1
 8006306:	4415      	add	r5, r2
 8006308:	f04f 0800 	mov.w	r8, #0
 800630c:	4659      	mov	r1, fp
 800630e:	2201      	movs	r2, #1
 8006310:	4620      	mov	r0, r4
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	f000 fa70 	bl	80067f8 <__lshift>
 8006318:	4631      	mov	r1, r6
 800631a:	4683      	mov	fp, r0
 800631c:	f000 fad8 	bl	80068d0 <__mcmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	dcb2      	bgt.n	800628a <_dtoa_r+0xac2>
 8006324:	d102      	bne.n	800632c <_dtoa_r+0xb64>
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	07db      	lsls	r3, r3, #31
 800632a:	d4ae      	bmi.n	800628a <_dtoa_r+0xac2>
 800632c:	462b      	mov	r3, r5
 800632e:	461d      	mov	r5, r3
 8006330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006334:	2a30      	cmp	r2, #48	; 0x30
 8006336:	d0fa      	beq.n	800632e <_dtoa_r+0xb66>
 8006338:	e6f7      	b.n	800612a <_dtoa_r+0x962>
 800633a:	9a00      	ldr	r2, [sp, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d1a5      	bne.n	800628c <_dtoa_r+0xac4>
 8006340:	f10a 0a01 	add.w	sl, sl, #1
 8006344:	2331      	movs	r3, #49	; 0x31
 8006346:	e779      	b.n	800623c <_dtoa_r+0xa74>
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <_dtoa_r+0xbd0>)
 800634a:	f7ff baaf 	b.w	80058ac <_dtoa_r+0xe4>
 800634e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006350:	2b00      	cmp	r3, #0
 8006352:	f47f aa86 	bne.w	8005862 <_dtoa_r+0x9a>
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <_dtoa_r+0xbd4>)
 8006358:	f7ff baa8 	b.w	80058ac <_dtoa_r+0xe4>
 800635c:	f1b9 0f00 	cmp.w	r9, #0
 8006360:	dc03      	bgt.n	800636a <_dtoa_r+0xba2>
 8006362:	9b05      	ldr	r3, [sp, #20]
 8006364:	2b02      	cmp	r3, #2
 8006366:	f73f aec9 	bgt.w	80060fc <_dtoa_r+0x934>
 800636a:	9d00      	ldr	r5, [sp, #0]
 800636c:	4631      	mov	r1, r6
 800636e:	4658      	mov	r0, fp
 8006370:	f7ff f99e 	bl	80056b0 <quorem>
 8006374:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006378:	f805 3b01 	strb.w	r3, [r5], #1
 800637c:	9a00      	ldr	r2, [sp, #0]
 800637e:	1aaa      	subs	r2, r5, r2
 8006380:	4591      	cmp	r9, r2
 8006382:	ddba      	ble.n	80062fa <_dtoa_r+0xb32>
 8006384:	4659      	mov	r1, fp
 8006386:	2300      	movs	r3, #0
 8006388:	220a      	movs	r2, #10
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f884 	bl	8006498 <__multadd>
 8006390:	4683      	mov	fp, r0
 8006392:	e7eb      	b.n	800636c <_dtoa_r+0xba4>
 8006394:	08007bfb 	.word	0x08007bfb
 8006398:	08007b54 	.word	0x08007b54
 800639c:	08007b78 	.word	0x08007b78

080063a0 <_localeconv_r>:
 80063a0:	4800      	ldr	r0, [pc, #0]	; (80063a4 <_localeconv_r+0x4>)
 80063a2:	4770      	bx	lr
 80063a4:	20000160 	.word	0x20000160

080063a8 <malloc>:
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <malloc+0xc>)
 80063aa:	4601      	mov	r1, r0
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f000 bbef 	b.w	8006b90 <_malloc_r>
 80063b2:	bf00      	nop
 80063b4:	2000000c 	.word	0x2000000c

080063b8 <memcpy>:
 80063b8:	440a      	add	r2, r1
 80063ba:	4291      	cmp	r1, r2
 80063bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c0:	d100      	bne.n	80063c4 <memcpy+0xc>
 80063c2:	4770      	bx	lr
 80063c4:	b510      	push	{r4, lr}
 80063c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ce:	4291      	cmp	r1, r2
 80063d0:	d1f9      	bne.n	80063c6 <memcpy+0xe>
 80063d2:	bd10      	pop	{r4, pc}

080063d4 <_Balloc>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	b976      	cbnz	r6, 80063fc <_Balloc+0x28>
 80063de:	2010      	movs	r0, #16
 80063e0:	f7ff ffe2 	bl	80063a8 <malloc>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6260      	str	r0, [r4, #36]	; 0x24
 80063e8:	b920      	cbnz	r0, 80063f4 <_Balloc+0x20>
 80063ea:	4b18      	ldr	r3, [pc, #96]	; (800644c <_Balloc+0x78>)
 80063ec:	4818      	ldr	r0, [pc, #96]	; (8006450 <_Balloc+0x7c>)
 80063ee:	2166      	movs	r1, #102	; 0x66
 80063f0:	f000 fd94 	bl	8006f1c <__assert_func>
 80063f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063f8:	6006      	str	r6, [r0, #0]
 80063fa:	60c6      	str	r6, [r0, #12]
 80063fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063fe:	68f3      	ldr	r3, [r6, #12]
 8006400:	b183      	cbz	r3, 8006424 <_Balloc+0x50>
 8006402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800640a:	b9b8      	cbnz	r0, 800643c <_Balloc+0x68>
 800640c:	2101      	movs	r1, #1
 800640e:	fa01 f605 	lsl.w	r6, r1, r5
 8006412:	1d72      	adds	r2, r6, #5
 8006414:	0092      	lsls	r2, r2, #2
 8006416:	4620      	mov	r0, r4
 8006418:	f000 fb5a 	bl	8006ad0 <_calloc_r>
 800641c:	b160      	cbz	r0, 8006438 <_Balloc+0x64>
 800641e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006422:	e00e      	b.n	8006442 <_Balloc+0x6e>
 8006424:	2221      	movs	r2, #33	; 0x21
 8006426:	2104      	movs	r1, #4
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fb51 	bl	8006ad0 <_calloc_r>
 800642e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006430:	60f0      	str	r0, [r6, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e4      	bne.n	8006402 <_Balloc+0x2e>
 8006438:	2000      	movs	r0, #0
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	6802      	ldr	r2, [r0, #0]
 800643e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006442:	2300      	movs	r3, #0
 8006444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006448:	e7f7      	b.n	800643a <_Balloc+0x66>
 800644a:	bf00      	nop
 800644c:	08007b85 	.word	0x08007b85
 8006450:	08007c0c 	.word	0x08007c0c

08006454 <_Bfree>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006458:	4605      	mov	r5, r0
 800645a:	460c      	mov	r4, r1
 800645c:	b976      	cbnz	r6, 800647c <_Bfree+0x28>
 800645e:	2010      	movs	r0, #16
 8006460:	f7ff ffa2 	bl	80063a8 <malloc>
 8006464:	4602      	mov	r2, r0
 8006466:	6268      	str	r0, [r5, #36]	; 0x24
 8006468:	b920      	cbnz	r0, 8006474 <_Bfree+0x20>
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <_Bfree+0x3c>)
 800646c:	4809      	ldr	r0, [pc, #36]	; (8006494 <_Bfree+0x40>)
 800646e:	218a      	movs	r1, #138	; 0x8a
 8006470:	f000 fd54 	bl	8006f1c <__assert_func>
 8006474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006478:	6006      	str	r6, [r0, #0]
 800647a:	60c6      	str	r6, [r0, #12]
 800647c:	b13c      	cbz	r4, 800648e <_Bfree+0x3a>
 800647e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006480:	6862      	ldr	r2, [r4, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006488:	6021      	str	r1, [r4, #0]
 800648a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	08007b85 	.word	0x08007b85
 8006494:	08007c0c 	.word	0x08007c0c

08006498 <__multadd>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	690e      	ldr	r6, [r1, #16]
 800649e:	4607      	mov	r7, r0
 80064a0:	4698      	mov	r8, r3
 80064a2:	460c      	mov	r4, r1
 80064a4:	f101 0014 	add.w	r0, r1, #20
 80064a8:	2300      	movs	r3, #0
 80064aa:	6805      	ldr	r5, [r0, #0]
 80064ac:	b2a9      	uxth	r1, r5
 80064ae:	fb02 8101 	mla	r1, r2, r1, r8
 80064b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80064b6:	0c2d      	lsrs	r5, r5, #16
 80064b8:	fb02 c505 	mla	r5, r2, r5, ip
 80064bc:	b289      	uxth	r1, r1
 80064be:	3301      	adds	r3, #1
 80064c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80064c4:	429e      	cmp	r6, r3
 80064c6:	f840 1b04 	str.w	r1, [r0], #4
 80064ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80064ce:	dcec      	bgt.n	80064aa <__multadd+0x12>
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	d022      	beq.n	800651c <__multadd+0x84>
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	42b3      	cmp	r3, r6
 80064da:	dc19      	bgt.n	8006510 <__multadd+0x78>
 80064dc:	6861      	ldr	r1, [r4, #4]
 80064de:	4638      	mov	r0, r7
 80064e0:	3101      	adds	r1, #1
 80064e2:	f7ff ff77 	bl	80063d4 <_Balloc>
 80064e6:	4605      	mov	r5, r0
 80064e8:	b928      	cbnz	r0, 80064f6 <__multadd+0x5e>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <__multadd+0x8c>)
 80064ee:	480e      	ldr	r0, [pc, #56]	; (8006528 <__multadd+0x90>)
 80064f0:	21b5      	movs	r1, #181	; 0xb5
 80064f2:	f000 fd13 	bl	8006f1c <__assert_func>
 80064f6:	6922      	ldr	r2, [r4, #16]
 80064f8:	3202      	adds	r2, #2
 80064fa:	f104 010c 	add.w	r1, r4, #12
 80064fe:	0092      	lsls	r2, r2, #2
 8006500:	300c      	adds	r0, #12
 8006502:	f7ff ff59 	bl	80063b8 <memcpy>
 8006506:	4621      	mov	r1, r4
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff ffa3 	bl	8006454 <_Bfree>
 800650e:	462c      	mov	r4, r5
 8006510:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006514:	3601      	adds	r6, #1
 8006516:	f8c3 8014 	str.w	r8, [r3, #20]
 800651a:	6126      	str	r6, [r4, #16]
 800651c:	4620      	mov	r0, r4
 800651e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006522:	bf00      	nop
 8006524:	08007bfb 	.word	0x08007bfb
 8006528:	08007c0c 	.word	0x08007c0c

0800652c <__hi0bits>:
 800652c:	0c03      	lsrs	r3, r0, #16
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	b9d3      	cbnz	r3, 8006568 <__hi0bits+0x3c>
 8006532:	0400      	lsls	r0, r0, #16
 8006534:	2310      	movs	r3, #16
 8006536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800653a:	bf04      	itt	eq
 800653c:	0200      	lsleq	r0, r0, #8
 800653e:	3308      	addeq	r3, #8
 8006540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006544:	bf04      	itt	eq
 8006546:	0100      	lsleq	r0, r0, #4
 8006548:	3304      	addeq	r3, #4
 800654a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800654e:	bf04      	itt	eq
 8006550:	0080      	lsleq	r0, r0, #2
 8006552:	3302      	addeq	r3, #2
 8006554:	2800      	cmp	r0, #0
 8006556:	db05      	blt.n	8006564 <__hi0bits+0x38>
 8006558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800655c:	f103 0301 	add.w	r3, r3, #1
 8006560:	bf08      	it	eq
 8006562:	2320      	moveq	r3, #32
 8006564:	4618      	mov	r0, r3
 8006566:	4770      	bx	lr
 8006568:	2300      	movs	r3, #0
 800656a:	e7e4      	b.n	8006536 <__hi0bits+0xa>

0800656c <__lo0bits>:
 800656c:	6803      	ldr	r3, [r0, #0]
 800656e:	f013 0207 	ands.w	r2, r3, #7
 8006572:	4601      	mov	r1, r0
 8006574:	d00b      	beq.n	800658e <__lo0bits+0x22>
 8006576:	07da      	lsls	r2, r3, #31
 8006578:	d424      	bmi.n	80065c4 <__lo0bits+0x58>
 800657a:	0798      	lsls	r0, r3, #30
 800657c:	bf49      	itett	mi
 800657e:	085b      	lsrmi	r3, r3, #1
 8006580:	089b      	lsrpl	r3, r3, #2
 8006582:	2001      	movmi	r0, #1
 8006584:	600b      	strmi	r3, [r1, #0]
 8006586:	bf5c      	itt	pl
 8006588:	600b      	strpl	r3, [r1, #0]
 800658a:	2002      	movpl	r0, #2
 800658c:	4770      	bx	lr
 800658e:	b298      	uxth	r0, r3
 8006590:	b9b0      	cbnz	r0, 80065c0 <__lo0bits+0x54>
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	2010      	movs	r0, #16
 8006596:	f013 0fff 	tst.w	r3, #255	; 0xff
 800659a:	bf04      	itt	eq
 800659c:	0a1b      	lsreq	r3, r3, #8
 800659e:	3008      	addeq	r0, #8
 80065a0:	071a      	lsls	r2, r3, #28
 80065a2:	bf04      	itt	eq
 80065a4:	091b      	lsreq	r3, r3, #4
 80065a6:	3004      	addeq	r0, #4
 80065a8:	079a      	lsls	r2, r3, #30
 80065aa:	bf04      	itt	eq
 80065ac:	089b      	lsreq	r3, r3, #2
 80065ae:	3002      	addeq	r0, #2
 80065b0:	07da      	lsls	r2, r3, #31
 80065b2:	d403      	bmi.n	80065bc <__lo0bits+0x50>
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	f100 0001 	add.w	r0, r0, #1
 80065ba:	d005      	beq.n	80065c8 <__lo0bits+0x5c>
 80065bc:	600b      	str	r3, [r1, #0]
 80065be:	4770      	bx	lr
 80065c0:	4610      	mov	r0, r2
 80065c2:	e7e8      	b.n	8006596 <__lo0bits+0x2a>
 80065c4:	2000      	movs	r0, #0
 80065c6:	4770      	bx	lr
 80065c8:	2020      	movs	r0, #32
 80065ca:	4770      	bx	lr

080065cc <__i2b>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	460c      	mov	r4, r1
 80065d0:	2101      	movs	r1, #1
 80065d2:	f7ff feff 	bl	80063d4 <_Balloc>
 80065d6:	4602      	mov	r2, r0
 80065d8:	b928      	cbnz	r0, 80065e6 <__i2b+0x1a>
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <__i2b+0x24>)
 80065dc:	4805      	ldr	r0, [pc, #20]	; (80065f4 <__i2b+0x28>)
 80065de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065e2:	f000 fc9b 	bl	8006f1c <__assert_func>
 80065e6:	2301      	movs	r3, #1
 80065e8:	6144      	str	r4, [r0, #20]
 80065ea:	6103      	str	r3, [r0, #16]
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bf00      	nop
 80065f0:	08007bfb 	.word	0x08007bfb
 80065f4:	08007c0c 	.word	0x08007c0c

080065f8 <__multiply>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	4614      	mov	r4, r2
 80065fe:	690a      	ldr	r2, [r1, #16]
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	bfb8      	it	lt
 8006606:	460b      	movlt	r3, r1
 8006608:	460d      	mov	r5, r1
 800660a:	bfbc      	itt	lt
 800660c:	4625      	movlt	r5, r4
 800660e:	461c      	movlt	r4, r3
 8006610:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006614:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006618:	68ab      	ldr	r3, [r5, #8]
 800661a:	6869      	ldr	r1, [r5, #4]
 800661c:	eb0a 0709 	add.w	r7, sl, r9
 8006620:	42bb      	cmp	r3, r7
 8006622:	b085      	sub	sp, #20
 8006624:	bfb8      	it	lt
 8006626:	3101      	addlt	r1, #1
 8006628:	f7ff fed4 	bl	80063d4 <_Balloc>
 800662c:	b930      	cbnz	r0, 800663c <__multiply+0x44>
 800662e:	4602      	mov	r2, r0
 8006630:	4b42      	ldr	r3, [pc, #264]	; (800673c <__multiply+0x144>)
 8006632:	4843      	ldr	r0, [pc, #268]	; (8006740 <__multiply+0x148>)
 8006634:	f240 115d 	movw	r1, #349	; 0x15d
 8006638:	f000 fc70 	bl	8006f1c <__assert_func>
 800663c:	f100 0614 	add.w	r6, r0, #20
 8006640:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006644:	4633      	mov	r3, r6
 8006646:	2200      	movs	r2, #0
 8006648:	4543      	cmp	r3, r8
 800664a:	d31e      	bcc.n	800668a <__multiply+0x92>
 800664c:	f105 0c14 	add.w	ip, r5, #20
 8006650:	f104 0314 	add.w	r3, r4, #20
 8006654:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006658:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800665c:	9202      	str	r2, [sp, #8]
 800665e:	ebac 0205 	sub.w	r2, ip, r5
 8006662:	3a15      	subs	r2, #21
 8006664:	f022 0203 	bic.w	r2, r2, #3
 8006668:	3204      	adds	r2, #4
 800666a:	f105 0115 	add.w	r1, r5, #21
 800666e:	458c      	cmp	ip, r1
 8006670:	bf38      	it	cc
 8006672:	2204      	movcc	r2, #4
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	9a02      	ldr	r2, [sp, #8]
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	429a      	cmp	r2, r3
 800667c:	d808      	bhi.n	8006690 <__multiply+0x98>
 800667e:	2f00      	cmp	r7, #0
 8006680:	dc55      	bgt.n	800672e <__multiply+0x136>
 8006682:	6107      	str	r7, [r0, #16]
 8006684:	b005      	add	sp, #20
 8006686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668a:	f843 2b04 	str.w	r2, [r3], #4
 800668e:	e7db      	b.n	8006648 <__multiply+0x50>
 8006690:	f8b3 a000 	ldrh.w	sl, [r3]
 8006694:	f1ba 0f00 	cmp.w	sl, #0
 8006698:	d020      	beq.n	80066dc <__multiply+0xe4>
 800669a:	f105 0e14 	add.w	lr, r5, #20
 800669e:	46b1      	mov	r9, r6
 80066a0:	2200      	movs	r2, #0
 80066a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80066a6:	f8d9 b000 	ldr.w	fp, [r9]
 80066aa:	b2a1      	uxth	r1, r4
 80066ac:	fa1f fb8b 	uxth.w	fp, fp
 80066b0:	fb0a b101 	mla	r1, sl, r1, fp
 80066b4:	4411      	add	r1, r2
 80066b6:	f8d9 2000 	ldr.w	r2, [r9]
 80066ba:	0c24      	lsrs	r4, r4, #16
 80066bc:	0c12      	lsrs	r2, r2, #16
 80066be:	fb0a 2404 	mla	r4, sl, r4, r2
 80066c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80066c6:	b289      	uxth	r1, r1
 80066c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066cc:	45f4      	cmp	ip, lr
 80066ce:	f849 1b04 	str.w	r1, [r9], #4
 80066d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80066d6:	d8e4      	bhi.n	80066a2 <__multiply+0xaa>
 80066d8:	9901      	ldr	r1, [sp, #4]
 80066da:	5072      	str	r2, [r6, r1]
 80066dc:	9a03      	ldr	r2, [sp, #12]
 80066de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066e2:	3304      	adds	r3, #4
 80066e4:	f1b9 0f00 	cmp.w	r9, #0
 80066e8:	d01f      	beq.n	800672a <__multiply+0x132>
 80066ea:	6834      	ldr	r4, [r6, #0]
 80066ec:	f105 0114 	add.w	r1, r5, #20
 80066f0:	46b6      	mov	lr, r6
 80066f2:	f04f 0a00 	mov.w	sl, #0
 80066f6:	880a      	ldrh	r2, [r1, #0]
 80066f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80066fc:	fb09 b202 	mla	r2, r9, r2, fp
 8006700:	4492      	add	sl, r2
 8006702:	b2a4      	uxth	r4, r4
 8006704:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006708:	f84e 4b04 	str.w	r4, [lr], #4
 800670c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006710:	f8be 2000 	ldrh.w	r2, [lr]
 8006714:	0c24      	lsrs	r4, r4, #16
 8006716:	fb09 2404 	mla	r4, r9, r4, r2
 800671a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800671e:	458c      	cmp	ip, r1
 8006720:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006724:	d8e7      	bhi.n	80066f6 <__multiply+0xfe>
 8006726:	9a01      	ldr	r2, [sp, #4]
 8006728:	50b4      	str	r4, [r6, r2]
 800672a:	3604      	adds	r6, #4
 800672c:	e7a3      	b.n	8006676 <__multiply+0x7e>
 800672e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1a5      	bne.n	8006682 <__multiply+0x8a>
 8006736:	3f01      	subs	r7, #1
 8006738:	e7a1      	b.n	800667e <__multiply+0x86>
 800673a:	bf00      	nop
 800673c:	08007bfb 	.word	0x08007bfb
 8006740:	08007c0c 	.word	0x08007c0c

08006744 <__pow5mult>:
 8006744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006748:	4615      	mov	r5, r2
 800674a:	f012 0203 	ands.w	r2, r2, #3
 800674e:	4606      	mov	r6, r0
 8006750:	460f      	mov	r7, r1
 8006752:	d007      	beq.n	8006764 <__pow5mult+0x20>
 8006754:	4c25      	ldr	r4, [pc, #148]	; (80067ec <__pow5mult+0xa8>)
 8006756:	3a01      	subs	r2, #1
 8006758:	2300      	movs	r3, #0
 800675a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800675e:	f7ff fe9b 	bl	8006498 <__multadd>
 8006762:	4607      	mov	r7, r0
 8006764:	10ad      	asrs	r5, r5, #2
 8006766:	d03d      	beq.n	80067e4 <__pow5mult+0xa0>
 8006768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800676a:	b97c      	cbnz	r4, 800678c <__pow5mult+0x48>
 800676c:	2010      	movs	r0, #16
 800676e:	f7ff fe1b 	bl	80063a8 <malloc>
 8006772:	4602      	mov	r2, r0
 8006774:	6270      	str	r0, [r6, #36]	; 0x24
 8006776:	b928      	cbnz	r0, 8006784 <__pow5mult+0x40>
 8006778:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <__pow5mult+0xac>)
 800677a:	481e      	ldr	r0, [pc, #120]	; (80067f4 <__pow5mult+0xb0>)
 800677c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006780:	f000 fbcc 	bl	8006f1c <__assert_func>
 8006784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006788:	6004      	str	r4, [r0, #0]
 800678a:	60c4      	str	r4, [r0, #12]
 800678c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006794:	b94c      	cbnz	r4, 80067aa <__pow5mult+0x66>
 8006796:	f240 2171 	movw	r1, #625	; 0x271
 800679a:	4630      	mov	r0, r6
 800679c:	f7ff ff16 	bl	80065cc <__i2b>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80067a6:	4604      	mov	r4, r0
 80067a8:	6003      	str	r3, [r0, #0]
 80067aa:	f04f 0900 	mov.w	r9, #0
 80067ae:	07eb      	lsls	r3, r5, #31
 80067b0:	d50a      	bpl.n	80067c8 <__pow5mult+0x84>
 80067b2:	4639      	mov	r1, r7
 80067b4:	4622      	mov	r2, r4
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff ff1e 	bl	80065f8 <__multiply>
 80067bc:	4639      	mov	r1, r7
 80067be:	4680      	mov	r8, r0
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff fe47 	bl	8006454 <_Bfree>
 80067c6:	4647      	mov	r7, r8
 80067c8:	106d      	asrs	r5, r5, #1
 80067ca:	d00b      	beq.n	80067e4 <__pow5mult+0xa0>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	b938      	cbnz	r0, 80067e0 <__pow5mult+0x9c>
 80067d0:	4622      	mov	r2, r4
 80067d2:	4621      	mov	r1, r4
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ff0f 	bl	80065f8 <__multiply>
 80067da:	6020      	str	r0, [r4, #0]
 80067dc:	f8c0 9000 	str.w	r9, [r0]
 80067e0:	4604      	mov	r4, r0
 80067e2:	e7e4      	b.n	80067ae <__pow5mult+0x6a>
 80067e4:	4638      	mov	r0, r7
 80067e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ea:	bf00      	nop
 80067ec:	08007d60 	.word	0x08007d60
 80067f0:	08007b85 	.word	0x08007b85
 80067f4:	08007c0c 	.word	0x08007c0c

080067f8 <__lshift>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	460c      	mov	r4, r1
 80067fe:	6849      	ldr	r1, [r1, #4]
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006806:	68a3      	ldr	r3, [r4, #8]
 8006808:	4607      	mov	r7, r0
 800680a:	4691      	mov	r9, r2
 800680c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006810:	f108 0601 	add.w	r6, r8, #1
 8006814:	42b3      	cmp	r3, r6
 8006816:	db0b      	blt.n	8006830 <__lshift+0x38>
 8006818:	4638      	mov	r0, r7
 800681a:	f7ff fddb 	bl	80063d4 <_Balloc>
 800681e:	4605      	mov	r5, r0
 8006820:	b948      	cbnz	r0, 8006836 <__lshift+0x3e>
 8006822:	4602      	mov	r2, r0
 8006824:	4b28      	ldr	r3, [pc, #160]	; (80068c8 <__lshift+0xd0>)
 8006826:	4829      	ldr	r0, [pc, #164]	; (80068cc <__lshift+0xd4>)
 8006828:	f240 11d9 	movw	r1, #473	; 0x1d9
 800682c:	f000 fb76 	bl	8006f1c <__assert_func>
 8006830:	3101      	adds	r1, #1
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	e7ee      	b.n	8006814 <__lshift+0x1c>
 8006836:	2300      	movs	r3, #0
 8006838:	f100 0114 	add.w	r1, r0, #20
 800683c:	f100 0210 	add.w	r2, r0, #16
 8006840:	4618      	mov	r0, r3
 8006842:	4553      	cmp	r3, sl
 8006844:	db33      	blt.n	80068ae <__lshift+0xb6>
 8006846:	6920      	ldr	r0, [r4, #16]
 8006848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800684c:	f104 0314 	add.w	r3, r4, #20
 8006850:	f019 091f 	ands.w	r9, r9, #31
 8006854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800685c:	d02b      	beq.n	80068b6 <__lshift+0xbe>
 800685e:	f1c9 0e20 	rsb	lr, r9, #32
 8006862:	468a      	mov	sl, r1
 8006864:	2200      	movs	r2, #0
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	fa00 f009 	lsl.w	r0, r0, r9
 800686c:	4302      	orrs	r2, r0
 800686e:	f84a 2b04 	str.w	r2, [sl], #4
 8006872:	f853 2b04 	ldr.w	r2, [r3], #4
 8006876:	459c      	cmp	ip, r3
 8006878:	fa22 f20e 	lsr.w	r2, r2, lr
 800687c:	d8f3      	bhi.n	8006866 <__lshift+0x6e>
 800687e:	ebac 0304 	sub.w	r3, ip, r4
 8006882:	3b15      	subs	r3, #21
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	3304      	adds	r3, #4
 800688a:	f104 0015 	add.w	r0, r4, #21
 800688e:	4584      	cmp	ip, r0
 8006890:	bf38      	it	cc
 8006892:	2304      	movcc	r3, #4
 8006894:	50ca      	str	r2, [r1, r3]
 8006896:	b10a      	cbz	r2, 800689c <__lshift+0xa4>
 8006898:	f108 0602 	add.w	r6, r8, #2
 800689c:	3e01      	subs	r6, #1
 800689e:	4638      	mov	r0, r7
 80068a0:	612e      	str	r6, [r5, #16]
 80068a2:	4621      	mov	r1, r4
 80068a4:	f7ff fdd6 	bl	8006454 <_Bfree>
 80068a8:	4628      	mov	r0, r5
 80068aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80068b2:	3301      	adds	r3, #1
 80068b4:	e7c5      	b.n	8006842 <__lshift+0x4a>
 80068b6:	3904      	subs	r1, #4
 80068b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80068c0:	459c      	cmp	ip, r3
 80068c2:	d8f9      	bhi.n	80068b8 <__lshift+0xc0>
 80068c4:	e7ea      	b.n	800689c <__lshift+0xa4>
 80068c6:	bf00      	nop
 80068c8:	08007bfb 	.word	0x08007bfb
 80068cc:	08007c0c 	.word	0x08007c0c

080068d0 <__mcmp>:
 80068d0:	b530      	push	{r4, r5, lr}
 80068d2:	6902      	ldr	r2, [r0, #16]
 80068d4:	690c      	ldr	r4, [r1, #16]
 80068d6:	1b12      	subs	r2, r2, r4
 80068d8:	d10e      	bne.n	80068f8 <__mcmp+0x28>
 80068da:	f100 0314 	add.w	r3, r0, #20
 80068de:	3114      	adds	r1, #20
 80068e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80068e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80068e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80068ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068f0:	42a5      	cmp	r5, r4
 80068f2:	d003      	beq.n	80068fc <__mcmp+0x2c>
 80068f4:	d305      	bcc.n	8006902 <__mcmp+0x32>
 80068f6:	2201      	movs	r2, #1
 80068f8:	4610      	mov	r0, r2
 80068fa:	bd30      	pop	{r4, r5, pc}
 80068fc:	4283      	cmp	r3, r0
 80068fe:	d3f3      	bcc.n	80068e8 <__mcmp+0x18>
 8006900:	e7fa      	b.n	80068f8 <__mcmp+0x28>
 8006902:	f04f 32ff 	mov.w	r2, #4294967295
 8006906:	e7f7      	b.n	80068f8 <__mcmp+0x28>

08006908 <__mdiff>:
 8006908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	460c      	mov	r4, r1
 800690e:	4606      	mov	r6, r0
 8006910:	4611      	mov	r1, r2
 8006912:	4620      	mov	r0, r4
 8006914:	4617      	mov	r7, r2
 8006916:	f7ff ffdb 	bl	80068d0 <__mcmp>
 800691a:	1e05      	subs	r5, r0, #0
 800691c:	d110      	bne.n	8006940 <__mdiff+0x38>
 800691e:	4629      	mov	r1, r5
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff fd57 	bl	80063d4 <_Balloc>
 8006926:	b930      	cbnz	r0, 8006936 <__mdiff+0x2e>
 8006928:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <__mdiff+0x108>)
 800692a:	4602      	mov	r2, r0
 800692c:	f240 2132 	movw	r1, #562	; 0x232
 8006930:	4838      	ldr	r0, [pc, #224]	; (8006a14 <__mdiff+0x10c>)
 8006932:	f000 faf3 	bl	8006f1c <__assert_func>
 8006936:	2301      	movs	r3, #1
 8006938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800693c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006940:	bfa4      	itt	ge
 8006942:	463b      	movge	r3, r7
 8006944:	4627      	movge	r7, r4
 8006946:	4630      	mov	r0, r6
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	bfa6      	itte	ge
 800694c:	461c      	movge	r4, r3
 800694e:	2500      	movge	r5, #0
 8006950:	2501      	movlt	r5, #1
 8006952:	f7ff fd3f 	bl	80063d4 <_Balloc>
 8006956:	b920      	cbnz	r0, 8006962 <__mdiff+0x5a>
 8006958:	4b2d      	ldr	r3, [pc, #180]	; (8006a10 <__mdiff+0x108>)
 800695a:	4602      	mov	r2, r0
 800695c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006960:	e7e6      	b.n	8006930 <__mdiff+0x28>
 8006962:	693e      	ldr	r6, [r7, #16]
 8006964:	60c5      	str	r5, [r0, #12]
 8006966:	6925      	ldr	r5, [r4, #16]
 8006968:	f107 0114 	add.w	r1, r7, #20
 800696c:	f104 0914 	add.w	r9, r4, #20
 8006970:	f100 0e14 	add.w	lr, r0, #20
 8006974:	f107 0210 	add.w	r2, r7, #16
 8006978:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800697c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006980:	46f2      	mov	sl, lr
 8006982:	2700      	movs	r7, #0
 8006984:	f859 3b04 	ldr.w	r3, [r9], #4
 8006988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800698c:	fa1f f883 	uxth.w	r8, r3
 8006990:	fa17 f78b 	uxtah	r7, r7, fp
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	eba7 0808 	sub.w	r8, r7, r8
 800699a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800699e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069a2:	fa1f f888 	uxth.w	r8, r8
 80069a6:	141f      	asrs	r7, r3, #16
 80069a8:	454d      	cmp	r5, r9
 80069aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80069ae:	f84a 3b04 	str.w	r3, [sl], #4
 80069b2:	d8e7      	bhi.n	8006984 <__mdiff+0x7c>
 80069b4:	1b2b      	subs	r3, r5, r4
 80069b6:	3b15      	subs	r3, #21
 80069b8:	f023 0303 	bic.w	r3, r3, #3
 80069bc:	3304      	adds	r3, #4
 80069be:	3415      	adds	r4, #21
 80069c0:	42a5      	cmp	r5, r4
 80069c2:	bf38      	it	cc
 80069c4:	2304      	movcc	r3, #4
 80069c6:	4419      	add	r1, r3
 80069c8:	4473      	add	r3, lr
 80069ca:	469e      	mov	lr, r3
 80069cc:	460d      	mov	r5, r1
 80069ce:	4565      	cmp	r5, ip
 80069d0:	d30e      	bcc.n	80069f0 <__mdiff+0xe8>
 80069d2:	f10c 0203 	add.w	r2, ip, #3
 80069d6:	1a52      	subs	r2, r2, r1
 80069d8:	f022 0203 	bic.w	r2, r2, #3
 80069dc:	3903      	subs	r1, #3
 80069de:	458c      	cmp	ip, r1
 80069e0:	bf38      	it	cc
 80069e2:	2200      	movcc	r2, #0
 80069e4:	441a      	add	r2, r3
 80069e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80069ea:	b17b      	cbz	r3, 8006a0c <__mdiff+0x104>
 80069ec:	6106      	str	r6, [r0, #16]
 80069ee:	e7a5      	b.n	800693c <__mdiff+0x34>
 80069f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80069f4:	fa17 f488 	uxtah	r4, r7, r8
 80069f8:	1422      	asrs	r2, r4, #16
 80069fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80069fe:	b2a4      	uxth	r4, r4
 8006a00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006a04:	f84e 4b04 	str.w	r4, [lr], #4
 8006a08:	1417      	asrs	r7, r2, #16
 8006a0a:	e7e0      	b.n	80069ce <__mdiff+0xc6>
 8006a0c:	3e01      	subs	r6, #1
 8006a0e:	e7ea      	b.n	80069e6 <__mdiff+0xde>
 8006a10:	08007bfb 	.word	0x08007bfb
 8006a14:	08007c0c 	.word	0x08007c0c

08006a18 <__d2b>:
 8006a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	4689      	mov	r9, r1
 8006a1e:	2101      	movs	r1, #1
 8006a20:	ec57 6b10 	vmov	r6, r7, d0
 8006a24:	4690      	mov	r8, r2
 8006a26:	f7ff fcd5 	bl	80063d4 <_Balloc>
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	b930      	cbnz	r0, 8006a3c <__d2b+0x24>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <__d2b+0xb0>)
 8006a32:	4826      	ldr	r0, [pc, #152]	; (8006acc <__d2b+0xb4>)
 8006a34:	f240 310a 	movw	r1, #778	; 0x30a
 8006a38:	f000 fa70 	bl	8006f1c <__assert_func>
 8006a3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a44:	bb35      	cbnz	r5, 8006a94 <__d2b+0x7c>
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	d028      	beq.n	8006a9e <__d2b+0x86>
 8006a4c:	4668      	mov	r0, sp
 8006a4e:	9600      	str	r6, [sp, #0]
 8006a50:	f7ff fd8c 	bl	800656c <__lo0bits>
 8006a54:	9900      	ldr	r1, [sp, #0]
 8006a56:	b300      	cbz	r0, 8006a9a <__d2b+0x82>
 8006a58:	9a01      	ldr	r2, [sp, #4]
 8006a5a:	f1c0 0320 	rsb	r3, r0, #32
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	430b      	orrs	r3, r1
 8006a64:	40c2      	lsrs	r2, r0
 8006a66:	6163      	str	r3, [r4, #20]
 8006a68:	9201      	str	r2, [sp, #4]
 8006a6a:	9b01      	ldr	r3, [sp, #4]
 8006a6c:	61a3      	str	r3, [r4, #24]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2202      	movne	r2, #2
 8006a74:	2201      	moveq	r2, #1
 8006a76:	6122      	str	r2, [r4, #16]
 8006a78:	b1d5      	cbz	r5, 8006ab0 <__d2b+0x98>
 8006a7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a7e:	4405      	add	r5, r0
 8006a80:	f8c9 5000 	str.w	r5, [r9]
 8006a84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a88:	f8c8 0000 	str.w	r0, [r8]
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	b003      	add	sp, #12
 8006a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a98:	e7d5      	b.n	8006a46 <__d2b+0x2e>
 8006a9a:	6161      	str	r1, [r4, #20]
 8006a9c:	e7e5      	b.n	8006a6a <__d2b+0x52>
 8006a9e:	a801      	add	r0, sp, #4
 8006aa0:	f7ff fd64 	bl	800656c <__lo0bits>
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	6163      	str	r3, [r4, #20]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	6122      	str	r2, [r4, #16]
 8006aac:	3020      	adds	r0, #32
 8006aae:	e7e3      	b.n	8006a78 <__d2b+0x60>
 8006ab0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ab4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ab8:	f8c9 0000 	str.w	r0, [r9]
 8006abc:	6918      	ldr	r0, [r3, #16]
 8006abe:	f7ff fd35 	bl	800652c <__hi0bits>
 8006ac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ac6:	e7df      	b.n	8006a88 <__d2b+0x70>
 8006ac8:	08007bfb 	.word	0x08007bfb
 8006acc:	08007c0c 	.word	0x08007c0c

08006ad0 <_calloc_r>:
 8006ad0:	b513      	push	{r0, r1, r4, lr}
 8006ad2:	434a      	muls	r2, r1
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	9201      	str	r2, [sp, #4]
 8006ad8:	f000 f85a 	bl	8006b90 <_malloc_r>
 8006adc:	4604      	mov	r4, r0
 8006ade:	b118      	cbz	r0, 8006ae8 <_calloc_r+0x18>
 8006ae0:	9a01      	ldr	r2, [sp, #4]
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	f7fe f952 	bl	8004d8c <memset>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	b002      	add	sp, #8
 8006aec:	bd10      	pop	{r4, pc}
	...

08006af0 <_free_r>:
 8006af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af2:	2900      	cmp	r1, #0
 8006af4:	d048      	beq.n	8006b88 <_free_r+0x98>
 8006af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afa:	9001      	str	r0, [sp, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f1a1 0404 	sub.w	r4, r1, #4
 8006b02:	bfb8      	it	lt
 8006b04:	18e4      	addlt	r4, r4, r3
 8006b06:	f000 fa65 	bl	8006fd4 <__malloc_lock>
 8006b0a:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <_free_r+0x9c>)
 8006b0c:	9801      	ldr	r0, [sp, #4]
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	4615      	mov	r5, r2
 8006b12:	b933      	cbnz	r3, 8006b22 <_free_r+0x32>
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	6014      	str	r4, [r2, #0]
 8006b18:	b003      	add	sp, #12
 8006b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b1e:	f000 ba5f 	b.w	8006fe0 <__malloc_unlock>
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	d90b      	bls.n	8006b3e <_free_r+0x4e>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	1862      	adds	r2, r4, r1
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bf04      	itt	eq
 8006b2e:	681a      	ldreq	r2, [r3, #0]
 8006b30:	685b      	ldreq	r3, [r3, #4]
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	bf04      	itt	eq
 8006b36:	1852      	addeq	r2, r2, r1
 8006b38:	6022      	streq	r2, [r4, #0]
 8006b3a:	602c      	str	r4, [r5, #0]
 8006b3c:	e7ec      	b.n	8006b18 <_free_r+0x28>
 8006b3e:	461a      	mov	r2, r3
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	b10b      	cbz	r3, 8006b48 <_free_r+0x58>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d9fa      	bls.n	8006b3e <_free_r+0x4e>
 8006b48:	6811      	ldr	r1, [r2, #0]
 8006b4a:	1855      	adds	r5, r2, r1
 8006b4c:	42a5      	cmp	r5, r4
 8006b4e:	d10b      	bne.n	8006b68 <_free_r+0x78>
 8006b50:	6824      	ldr	r4, [r4, #0]
 8006b52:	4421      	add	r1, r4
 8006b54:	1854      	adds	r4, r2, r1
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	6011      	str	r1, [r2, #0]
 8006b5a:	d1dd      	bne.n	8006b18 <_free_r+0x28>
 8006b5c:	681c      	ldr	r4, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	4421      	add	r1, r4
 8006b64:	6011      	str	r1, [r2, #0]
 8006b66:	e7d7      	b.n	8006b18 <_free_r+0x28>
 8006b68:	d902      	bls.n	8006b70 <_free_r+0x80>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	6003      	str	r3, [r0, #0]
 8006b6e:	e7d3      	b.n	8006b18 <_free_r+0x28>
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	1961      	adds	r1, r4, r5
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf04      	itt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	bf04      	itt	eq
 8006b80:	1949      	addeq	r1, r1, r5
 8006b82:	6021      	streq	r1, [r4, #0]
 8006b84:	6054      	str	r4, [r2, #4]
 8006b86:	e7c7      	b.n	8006b18 <_free_r+0x28>
 8006b88:	b003      	add	sp, #12
 8006b8a:	bd30      	pop	{r4, r5, pc}
 8006b8c:	20000208 	.word	0x20000208

08006b90 <_malloc_r>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	1ccd      	adds	r5, r1, #3
 8006b94:	f025 0503 	bic.w	r5, r5, #3
 8006b98:	3508      	adds	r5, #8
 8006b9a:	2d0c      	cmp	r5, #12
 8006b9c:	bf38      	it	cc
 8006b9e:	250c      	movcc	r5, #12
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	db01      	blt.n	8006baa <_malloc_r+0x1a>
 8006ba6:	42a9      	cmp	r1, r5
 8006ba8:	d903      	bls.n	8006bb2 <_malloc_r+0x22>
 8006baa:	230c      	movs	r3, #12
 8006bac:	6033      	str	r3, [r6, #0]
 8006bae:	2000      	movs	r0, #0
 8006bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb2:	f000 fa0f 	bl	8006fd4 <__malloc_lock>
 8006bb6:	4921      	ldr	r1, [pc, #132]	; (8006c3c <_malloc_r+0xac>)
 8006bb8:	680a      	ldr	r2, [r1, #0]
 8006bba:	4614      	mov	r4, r2
 8006bbc:	b99c      	cbnz	r4, 8006be6 <_malloc_r+0x56>
 8006bbe:	4f20      	ldr	r7, [pc, #128]	; (8006c40 <_malloc_r+0xb0>)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	b923      	cbnz	r3, 8006bce <_malloc_r+0x3e>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f000 f998 	bl	8006efc <_sbrk_r>
 8006bcc:	6038      	str	r0, [r7, #0]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f993 	bl	8006efc <_sbrk_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d123      	bne.n	8006c22 <_malloc_r+0x92>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	4630      	mov	r0, r6
 8006be0:	f000 f9fe 	bl	8006fe0 <__malloc_unlock>
 8006be4:	e7e3      	b.n	8006bae <_malloc_r+0x1e>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	1b5b      	subs	r3, r3, r5
 8006bea:	d417      	bmi.n	8006c1c <_malloc_r+0x8c>
 8006bec:	2b0b      	cmp	r3, #11
 8006bee:	d903      	bls.n	8006bf8 <_malloc_r+0x68>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	441c      	add	r4, r3
 8006bf4:	6025      	str	r5, [r4, #0]
 8006bf6:	e004      	b.n	8006c02 <_malloc_r+0x72>
 8006bf8:	6863      	ldr	r3, [r4, #4]
 8006bfa:	42a2      	cmp	r2, r4
 8006bfc:	bf0c      	ite	eq
 8006bfe:	600b      	streq	r3, [r1, #0]
 8006c00:	6053      	strne	r3, [r2, #4]
 8006c02:	4630      	mov	r0, r6
 8006c04:	f000 f9ec 	bl	8006fe0 <__malloc_unlock>
 8006c08:	f104 000b 	add.w	r0, r4, #11
 8006c0c:	1d23      	adds	r3, r4, #4
 8006c0e:	f020 0007 	bic.w	r0, r0, #7
 8006c12:	1ac2      	subs	r2, r0, r3
 8006c14:	d0cc      	beq.n	8006bb0 <_malloc_r+0x20>
 8006c16:	1a1b      	subs	r3, r3, r0
 8006c18:	50a3      	str	r3, [r4, r2]
 8006c1a:	e7c9      	b.n	8006bb0 <_malloc_r+0x20>
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	6864      	ldr	r4, [r4, #4]
 8006c20:	e7cc      	b.n	8006bbc <_malloc_r+0x2c>
 8006c22:	1cc4      	adds	r4, r0, #3
 8006c24:	f024 0403 	bic.w	r4, r4, #3
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d0e3      	beq.n	8006bf4 <_malloc_r+0x64>
 8006c2c:	1a21      	subs	r1, r4, r0
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 f964 	bl	8006efc <_sbrk_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	d1dd      	bne.n	8006bf4 <_malloc_r+0x64>
 8006c38:	e7cf      	b.n	8006bda <_malloc_r+0x4a>
 8006c3a:	bf00      	nop
 8006c3c:	20000208 	.word	0x20000208
 8006c40:	2000020c 	.word	0x2000020c

08006c44 <__ssputs_r>:
 8006c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	688e      	ldr	r6, [r1, #8]
 8006c4a:	429e      	cmp	r6, r3
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4690      	mov	r8, r2
 8006c52:	461f      	mov	r7, r3
 8006c54:	d838      	bhi.n	8006cc8 <__ssputs_r+0x84>
 8006c56:	898a      	ldrh	r2, [r1, #12]
 8006c58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c5c:	d032      	beq.n	8006cc4 <__ssputs_r+0x80>
 8006c5e:	6825      	ldr	r5, [r4, #0]
 8006c60:	6909      	ldr	r1, [r1, #16]
 8006c62:	eba5 0901 	sub.w	r9, r5, r1
 8006c66:	6965      	ldr	r5, [r4, #20]
 8006c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c70:	3301      	adds	r3, #1
 8006c72:	444b      	add	r3, r9
 8006c74:	106d      	asrs	r5, r5, #1
 8006c76:	429d      	cmp	r5, r3
 8006c78:	bf38      	it	cc
 8006c7a:	461d      	movcc	r5, r3
 8006c7c:	0553      	lsls	r3, r2, #21
 8006c7e:	d531      	bpl.n	8006ce4 <__ssputs_r+0xa0>
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7ff ff85 	bl	8006b90 <_malloc_r>
 8006c86:	4606      	mov	r6, r0
 8006c88:	b950      	cbnz	r0, 8006ca0 <__ssputs_r+0x5c>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	f8ca 3000 	str.w	r3, [sl]
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca0:	6921      	ldr	r1, [r4, #16]
 8006ca2:	464a      	mov	r2, r9
 8006ca4:	f7ff fb88 	bl	80063b8 <memcpy>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	6126      	str	r6, [r4, #16]
 8006cb6:	6165      	str	r5, [r4, #20]
 8006cb8:	444e      	add	r6, r9
 8006cba:	eba5 0509 	sub.w	r5, r5, r9
 8006cbe:	6026      	str	r6, [r4, #0]
 8006cc0:	60a5      	str	r5, [r4, #8]
 8006cc2:	463e      	mov	r6, r7
 8006cc4:	42be      	cmp	r6, r7
 8006cc6:	d900      	bls.n	8006cca <__ssputs_r+0x86>
 8006cc8:	463e      	mov	r6, r7
 8006cca:	4632      	mov	r2, r6
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	4641      	mov	r1, r8
 8006cd0:	f000 f966 	bl	8006fa0 <memmove>
 8006cd4:	68a3      	ldr	r3, [r4, #8]
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	4432      	add	r2, r6
 8006cdc:	60a3      	str	r3, [r4, #8]
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e7db      	b.n	8006c9c <__ssputs_r+0x58>
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	f000 f981 	bl	8006fec <_realloc_r>
 8006cea:	4606      	mov	r6, r0
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d1e1      	bne.n	8006cb4 <__ssputs_r+0x70>
 8006cf0:	6921      	ldr	r1, [r4, #16]
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	f7ff fefc 	bl	8006af0 <_free_r>
 8006cf8:	e7c7      	b.n	8006c8a <__ssputs_r+0x46>
	...

08006cfc <_svfiprintf_r>:
 8006cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d00:	4698      	mov	r8, r3
 8006d02:	898b      	ldrh	r3, [r1, #12]
 8006d04:	061b      	lsls	r3, r3, #24
 8006d06:	b09d      	sub	sp, #116	; 0x74
 8006d08:	4607      	mov	r7, r0
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	d50e      	bpl.n	8006d2e <_svfiprintf_r+0x32>
 8006d10:	690b      	ldr	r3, [r1, #16]
 8006d12:	b963      	cbnz	r3, 8006d2e <_svfiprintf_r+0x32>
 8006d14:	2140      	movs	r1, #64	; 0x40
 8006d16:	f7ff ff3b 	bl	8006b90 <_malloc_r>
 8006d1a:	6028      	str	r0, [r5, #0]
 8006d1c:	6128      	str	r0, [r5, #16]
 8006d1e:	b920      	cbnz	r0, 8006d2a <_svfiprintf_r+0x2e>
 8006d20:	230c      	movs	r3, #12
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	e0d1      	b.n	8006ece <_svfiprintf_r+0x1d2>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	616b      	str	r3, [r5, #20]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9309      	str	r3, [sp, #36]	; 0x24
 8006d32:	2320      	movs	r3, #32
 8006d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ee8 <_svfiprintf_r+0x1ec>
 8006d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d46:	f04f 0901 	mov.w	r9, #1
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	469a      	mov	sl, r3
 8006d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d52:	b10a      	cbz	r2, 8006d58 <_svfiprintf_r+0x5c>
 8006d54:	2a25      	cmp	r2, #37	; 0x25
 8006d56:	d1f9      	bne.n	8006d4c <_svfiprintf_r+0x50>
 8006d58:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5c:	d00b      	beq.n	8006d76 <_svfiprintf_r+0x7a>
 8006d5e:	465b      	mov	r3, fp
 8006d60:	4622      	mov	r2, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff ff6d 	bl	8006c44 <__ssputs_r>
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f000 80aa 	beq.w	8006ec4 <_svfiprintf_r+0x1c8>
 8006d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d72:	445a      	add	r2, fp
 8006d74:	9209      	str	r2, [sp, #36]	; 0x24
 8006d76:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80a2 	beq.w	8006ec4 <_svfiprintf_r+0x1c8>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8a:	f10a 0a01 	add.w	sl, sl, #1
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	9307      	str	r3, [sp, #28]
 8006d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d96:	931a      	str	r3, [sp, #104]	; 0x68
 8006d98:	4654      	mov	r4, sl
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	4851      	ldr	r0, [pc, #324]	; (8006ee8 <_svfiprintf_r+0x1ec>)
 8006da2:	f7f9 fa1d 	bl	80001e0 <memchr>
 8006da6:	9a04      	ldr	r2, [sp, #16]
 8006da8:	b9d8      	cbnz	r0, 8006de2 <_svfiprintf_r+0xe6>
 8006daa:	06d0      	lsls	r0, r2, #27
 8006dac:	bf44      	itt	mi
 8006dae:	2320      	movmi	r3, #32
 8006db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db4:	0711      	lsls	r1, r2, #28
 8006db6:	bf44      	itt	mi
 8006db8:	232b      	movmi	r3, #43	; 0x2b
 8006dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc4:	d015      	beq.n	8006df2 <_svfiprintf_r+0xf6>
 8006dc6:	9a07      	ldr	r2, [sp, #28]
 8006dc8:	4654      	mov	r4, sl
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f04f 0c0a 	mov.w	ip, #10
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd6:	3b30      	subs	r3, #48	; 0x30
 8006dd8:	2b09      	cmp	r3, #9
 8006dda:	d94e      	bls.n	8006e7a <_svfiprintf_r+0x17e>
 8006ddc:	b1b0      	cbz	r0, 8006e0c <_svfiprintf_r+0x110>
 8006dde:	9207      	str	r2, [sp, #28]
 8006de0:	e014      	b.n	8006e0c <_svfiprintf_r+0x110>
 8006de2:	eba0 0308 	sub.w	r3, r0, r8
 8006de6:	fa09 f303 	lsl.w	r3, r9, r3
 8006dea:	4313      	orrs	r3, r2
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	46a2      	mov	sl, r4
 8006df0:	e7d2      	b.n	8006d98 <_svfiprintf_r+0x9c>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	1d19      	adds	r1, r3, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	9103      	str	r1, [sp, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfbb      	ittet	lt
 8006dfe:	425b      	neglt	r3, r3
 8006e00:	f042 0202 	orrlt.w	r2, r2, #2
 8006e04:	9307      	strge	r3, [sp, #28]
 8006e06:	9307      	strlt	r3, [sp, #28]
 8006e08:	bfb8      	it	lt
 8006e0a:	9204      	strlt	r2, [sp, #16]
 8006e0c:	7823      	ldrb	r3, [r4, #0]
 8006e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e10:	d10c      	bne.n	8006e2c <_svfiprintf_r+0x130>
 8006e12:	7863      	ldrb	r3, [r4, #1]
 8006e14:	2b2a      	cmp	r3, #42	; 0x2a
 8006e16:	d135      	bne.n	8006e84 <_svfiprintf_r+0x188>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	9203      	str	r2, [sp, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bfb8      	it	lt
 8006e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e28:	3402      	adds	r4, #2
 8006e2a:	9305      	str	r3, [sp, #20]
 8006e2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ef8 <_svfiprintf_r+0x1fc>
 8006e30:	7821      	ldrb	r1, [r4, #0]
 8006e32:	2203      	movs	r2, #3
 8006e34:	4650      	mov	r0, sl
 8006e36:	f7f9 f9d3 	bl	80001e0 <memchr>
 8006e3a:	b140      	cbz	r0, 8006e4e <_svfiprintf_r+0x152>
 8006e3c:	2340      	movs	r3, #64	; 0x40
 8006e3e:	eba0 000a 	sub.w	r0, r0, sl
 8006e42:	fa03 f000 	lsl.w	r0, r3, r0
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	4303      	orrs	r3, r0
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e52:	4826      	ldr	r0, [pc, #152]	; (8006eec <_svfiprintf_r+0x1f0>)
 8006e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e58:	2206      	movs	r2, #6
 8006e5a:	f7f9 f9c1 	bl	80001e0 <memchr>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d038      	beq.n	8006ed4 <_svfiprintf_r+0x1d8>
 8006e62:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <_svfiprintf_r+0x1f4>)
 8006e64:	bb1b      	cbnz	r3, 8006eae <_svfiprintf_r+0x1b2>
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	3307      	adds	r3, #7
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	3308      	adds	r3, #8
 8006e70:	9303      	str	r3, [sp, #12]
 8006e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e74:	4433      	add	r3, r6
 8006e76:	9309      	str	r3, [sp, #36]	; 0x24
 8006e78:	e767      	b.n	8006d4a <_svfiprintf_r+0x4e>
 8006e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e7e:	460c      	mov	r4, r1
 8006e80:	2001      	movs	r0, #1
 8006e82:	e7a5      	b.n	8006dd0 <_svfiprintf_r+0xd4>
 8006e84:	2300      	movs	r3, #0
 8006e86:	3401      	adds	r4, #1
 8006e88:	9305      	str	r3, [sp, #20]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f04f 0c0a 	mov.w	ip, #10
 8006e90:	4620      	mov	r0, r4
 8006e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e96:	3a30      	subs	r2, #48	; 0x30
 8006e98:	2a09      	cmp	r2, #9
 8006e9a:	d903      	bls.n	8006ea4 <_svfiprintf_r+0x1a8>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0c5      	beq.n	8006e2c <_svfiprintf_r+0x130>
 8006ea0:	9105      	str	r1, [sp, #20]
 8006ea2:	e7c3      	b.n	8006e2c <_svfiprintf_r+0x130>
 8006ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e7f0      	b.n	8006e90 <_svfiprintf_r+0x194>
 8006eae:	ab03      	add	r3, sp, #12
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <_svfiprintf_r+0x1f8>)
 8006eb6:	a904      	add	r1, sp, #16
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7fe f80f 	bl	8004edc <_printf_float>
 8006ebe:	1c42      	adds	r2, r0, #1
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	d1d6      	bne.n	8006e72 <_svfiprintf_r+0x176>
 8006ec4:	89ab      	ldrh	r3, [r5, #12]
 8006ec6:	065b      	lsls	r3, r3, #25
 8006ec8:	f53f af2c 	bmi.w	8006d24 <_svfiprintf_r+0x28>
 8006ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ece:	b01d      	add	sp, #116	; 0x74
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	ab03      	add	r3, sp, #12
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <_svfiprintf_r+0x1f8>)
 8006edc:	a904      	add	r1, sp, #16
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f7fe faa0 	bl	8005424 <_printf_i>
 8006ee4:	e7eb      	b.n	8006ebe <_svfiprintf_r+0x1c2>
 8006ee6:	bf00      	nop
 8006ee8:	08007d6c 	.word	0x08007d6c
 8006eec:	08007d76 	.word	0x08007d76
 8006ef0:	08004edd 	.word	0x08004edd
 8006ef4:	08006c45 	.word	0x08006c45
 8006ef8:	08007d72 	.word	0x08007d72

08006efc <_sbrk_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_sbrk_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7fa fc4a 	bl	80017a0 <_sbrk>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_sbrk_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_sbrk_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000394 	.word	0x20000394

08006f1c <__assert_func>:
 8006f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f1e:	4614      	mov	r4, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <__assert_func+0x2c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4605      	mov	r5, r0
 8006f28:	68d8      	ldr	r0, [r3, #12]
 8006f2a:	b14c      	cbz	r4, 8006f40 <__assert_func+0x24>
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <__assert_func+0x30>)
 8006f2e:	9100      	str	r1, [sp, #0]
 8006f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f34:	4906      	ldr	r1, [pc, #24]	; (8006f50 <__assert_func+0x34>)
 8006f36:	462b      	mov	r3, r5
 8006f38:	f000 f80e 	bl	8006f58 <fiprintf>
 8006f3c:	f000 faa4 	bl	8007488 <abort>
 8006f40:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <__assert_func+0x38>)
 8006f42:	461c      	mov	r4, r3
 8006f44:	e7f3      	b.n	8006f2e <__assert_func+0x12>
 8006f46:	bf00      	nop
 8006f48:	2000000c 	.word	0x2000000c
 8006f4c:	08007d7d 	.word	0x08007d7d
 8006f50:	08007d8a 	.word	0x08007d8a
 8006f54:	08007db8 	.word	0x08007db8

08006f58 <fiprintf>:
 8006f58:	b40e      	push	{r1, r2, r3}
 8006f5a:	b503      	push	{r0, r1, lr}
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	ab03      	add	r3, sp, #12
 8006f60:	4805      	ldr	r0, [pc, #20]	; (8006f78 <fiprintf+0x20>)
 8006f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	f000 f88f 	bl	800708c <_vfiprintf_r>
 8006f6e:	b002      	add	sp, #8
 8006f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f74:	b003      	add	sp, #12
 8006f76:	4770      	bx	lr
 8006f78:	2000000c 	.word	0x2000000c

08006f7c <__ascii_mbtowc>:
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	b901      	cbnz	r1, 8006f82 <__ascii_mbtowc+0x6>
 8006f80:	a901      	add	r1, sp, #4
 8006f82:	b142      	cbz	r2, 8006f96 <__ascii_mbtowc+0x1a>
 8006f84:	b14b      	cbz	r3, 8006f9a <__ascii_mbtowc+0x1e>
 8006f86:	7813      	ldrb	r3, [r2, #0]
 8006f88:	600b      	str	r3, [r1, #0]
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	1e10      	subs	r0, r2, #0
 8006f8e:	bf18      	it	ne
 8006f90:	2001      	movne	r0, #1
 8006f92:	b002      	add	sp, #8
 8006f94:	4770      	bx	lr
 8006f96:	4610      	mov	r0, r2
 8006f98:	e7fb      	b.n	8006f92 <__ascii_mbtowc+0x16>
 8006f9a:	f06f 0001 	mvn.w	r0, #1
 8006f9e:	e7f8      	b.n	8006f92 <__ascii_mbtowc+0x16>

08006fa0 <memmove>:
 8006fa0:	4288      	cmp	r0, r1
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	eb01 0402 	add.w	r4, r1, r2
 8006fa8:	d902      	bls.n	8006fb0 <memmove+0x10>
 8006faa:	4284      	cmp	r4, r0
 8006fac:	4623      	mov	r3, r4
 8006fae:	d807      	bhi.n	8006fc0 <memmove+0x20>
 8006fb0:	1e43      	subs	r3, r0, #1
 8006fb2:	42a1      	cmp	r1, r4
 8006fb4:	d008      	beq.n	8006fc8 <memmove+0x28>
 8006fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fbe:	e7f8      	b.n	8006fb2 <memmove+0x12>
 8006fc0:	4402      	add	r2, r0
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	428a      	cmp	r2, r1
 8006fc6:	d100      	bne.n	8006fca <memmove+0x2a>
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fd2:	e7f7      	b.n	8006fc4 <memmove+0x24>

08006fd4 <__malloc_lock>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__malloc_lock+0x8>)
 8006fd6:	f000 bc17 	b.w	8007808 <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	2000039c 	.word	0x2000039c

08006fe0 <__malloc_unlock>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__malloc_unlock+0x8>)
 8006fe2:	f000 bc12 	b.w	800780a <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	2000039c 	.word	0x2000039c

08006fec <_realloc_r>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	4607      	mov	r7, r0
 8006ff0:	4614      	mov	r4, r2
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	b921      	cbnz	r1, 8007000 <_realloc_r+0x14>
 8006ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	f7ff bdc8 	b.w	8006b90 <_malloc_r>
 8007000:	b922      	cbnz	r2, 800700c <_realloc_r+0x20>
 8007002:	f7ff fd75 	bl	8006af0 <_free_r>
 8007006:	4625      	mov	r5, r4
 8007008:	4628      	mov	r0, r5
 800700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700c:	f000 fc62 	bl	80078d4 <_malloc_usable_size_r>
 8007010:	42a0      	cmp	r0, r4
 8007012:	d20f      	bcs.n	8007034 <_realloc_r+0x48>
 8007014:	4621      	mov	r1, r4
 8007016:	4638      	mov	r0, r7
 8007018:	f7ff fdba 	bl	8006b90 <_malloc_r>
 800701c:	4605      	mov	r5, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d0f2      	beq.n	8007008 <_realloc_r+0x1c>
 8007022:	4631      	mov	r1, r6
 8007024:	4622      	mov	r2, r4
 8007026:	f7ff f9c7 	bl	80063b8 <memcpy>
 800702a:	4631      	mov	r1, r6
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff fd5f 	bl	8006af0 <_free_r>
 8007032:	e7e9      	b.n	8007008 <_realloc_r+0x1c>
 8007034:	4635      	mov	r5, r6
 8007036:	e7e7      	b.n	8007008 <_realloc_r+0x1c>

08007038 <__sfputc_r>:
 8007038:	6893      	ldr	r3, [r2, #8]
 800703a:	3b01      	subs	r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	b410      	push	{r4}
 8007040:	6093      	str	r3, [r2, #8]
 8007042:	da08      	bge.n	8007056 <__sfputc_r+0x1e>
 8007044:	6994      	ldr	r4, [r2, #24]
 8007046:	42a3      	cmp	r3, r4
 8007048:	db01      	blt.n	800704e <__sfputc_r+0x16>
 800704a:	290a      	cmp	r1, #10
 800704c:	d103      	bne.n	8007056 <__sfputc_r+0x1e>
 800704e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007052:	f000 b94b 	b.w	80072ec <__swbuf_r>
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	1c58      	adds	r0, r3, #1
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	7019      	strb	r1, [r3, #0]
 800705e:	4608      	mov	r0, r1
 8007060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007064:	4770      	bx	lr

08007066 <__sfputs_r>:
 8007066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007068:	4606      	mov	r6, r0
 800706a:	460f      	mov	r7, r1
 800706c:	4614      	mov	r4, r2
 800706e:	18d5      	adds	r5, r2, r3
 8007070:	42ac      	cmp	r4, r5
 8007072:	d101      	bne.n	8007078 <__sfputs_r+0x12>
 8007074:	2000      	movs	r0, #0
 8007076:	e007      	b.n	8007088 <__sfputs_r+0x22>
 8007078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707c:	463a      	mov	r2, r7
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff ffda 	bl	8007038 <__sfputc_r>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d1f3      	bne.n	8007070 <__sfputs_r+0xa>
 8007088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800708c <_vfiprintf_r>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	460d      	mov	r5, r1
 8007092:	b09d      	sub	sp, #116	; 0x74
 8007094:	4614      	mov	r4, r2
 8007096:	4698      	mov	r8, r3
 8007098:	4606      	mov	r6, r0
 800709a:	b118      	cbz	r0, 80070a4 <_vfiprintf_r+0x18>
 800709c:	6983      	ldr	r3, [r0, #24]
 800709e:	b90b      	cbnz	r3, 80070a4 <_vfiprintf_r+0x18>
 80070a0:	f000 fb14 	bl	80076cc <__sinit>
 80070a4:	4b89      	ldr	r3, [pc, #548]	; (80072cc <_vfiprintf_r+0x240>)
 80070a6:	429d      	cmp	r5, r3
 80070a8:	d11b      	bne.n	80070e2 <_vfiprintf_r+0x56>
 80070aa:	6875      	ldr	r5, [r6, #4]
 80070ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ae:	07d9      	lsls	r1, r3, #31
 80070b0:	d405      	bmi.n	80070be <_vfiprintf_r+0x32>
 80070b2:	89ab      	ldrh	r3, [r5, #12]
 80070b4:	059a      	lsls	r2, r3, #22
 80070b6:	d402      	bmi.n	80070be <_vfiprintf_r+0x32>
 80070b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ba:	f000 fba5 	bl	8007808 <__retarget_lock_acquire_recursive>
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	071b      	lsls	r3, r3, #28
 80070c2:	d501      	bpl.n	80070c8 <_vfiprintf_r+0x3c>
 80070c4:	692b      	ldr	r3, [r5, #16]
 80070c6:	b9eb      	cbnz	r3, 8007104 <_vfiprintf_r+0x78>
 80070c8:	4629      	mov	r1, r5
 80070ca:	4630      	mov	r0, r6
 80070cc:	f000 f96e 	bl	80073ac <__swsetup_r>
 80070d0:	b1c0      	cbz	r0, 8007104 <_vfiprintf_r+0x78>
 80070d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d4:	07dc      	lsls	r4, r3, #31
 80070d6:	d50e      	bpl.n	80070f6 <_vfiprintf_r+0x6a>
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	b01d      	add	sp, #116	; 0x74
 80070de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e2:	4b7b      	ldr	r3, [pc, #492]	; (80072d0 <_vfiprintf_r+0x244>)
 80070e4:	429d      	cmp	r5, r3
 80070e6:	d101      	bne.n	80070ec <_vfiprintf_r+0x60>
 80070e8:	68b5      	ldr	r5, [r6, #8]
 80070ea:	e7df      	b.n	80070ac <_vfiprintf_r+0x20>
 80070ec:	4b79      	ldr	r3, [pc, #484]	; (80072d4 <_vfiprintf_r+0x248>)
 80070ee:	429d      	cmp	r5, r3
 80070f0:	bf08      	it	eq
 80070f2:	68f5      	ldreq	r5, [r6, #12]
 80070f4:	e7da      	b.n	80070ac <_vfiprintf_r+0x20>
 80070f6:	89ab      	ldrh	r3, [r5, #12]
 80070f8:	0598      	lsls	r0, r3, #22
 80070fa:	d4ed      	bmi.n	80070d8 <_vfiprintf_r+0x4c>
 80070fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070fe:	f000 fb84 	bl	800780a <__retarget_lock_release_recursive>
 8007102:	e7e9      	b.n	80070d8 <_vfiprintf_r+0x4c>
 8007104:	2300      	movs	r3, #0
 8007106:	9309      	str	r3, [sp, #36]	; 0x24
 8007108:	2320      	movs	r3, #32
 800710a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800710e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007112:	2330      	movs	r3, #48	; 0x30
 8007114:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072d8 <_vfiprintf_r+0x24c>
 8007118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800711c:	f04f 0901 	mov.w	r9, #1
 8007120:	4623      	mov	r3, r4
 8007122:	469a      	mov	sl, r3
 8007124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007128:	b10a      	cbz	r2, 800712e <_vfiprintf_r+0xa2>
 800712a:	2a25      	cmp	r2, #37	; 0x25
 800712c:	d1f9      	bne.n	8007122 <_vfiprintf_r+0x96>
 800712e:	ebba 0b04 	subs.w	fp, sl, r4
 8007132:	d00b      	beq.n	800714c <_vfiprintf_r+0xc0>
 8007134:	465b      	mov	r3, fp
 8007136:	4622      	mov	r2, r4
 8007138:	4629      	mov	r1, r5
 800713a:	4630      	mov	r0, r6
 800713c:	f7ff ff93 	bl	8007066 <__sfputs_r>
 8007140:	3001      	adds	r0, #1
 8007142:	f000 80aa 	beq.w	800729a <_vfiprintf_r+0x20e>
 8007146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007148:	445a      	add	r2, fp
 800714a:	9209      	str	r2, [sp, #36]	; 0x24
 800714c:	f89a 3000 	ldrb.w	r3, [sl]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80a2 	beq.w	800729a <_vfiprintf_r+0x20e>
 8007156:	2300      	movs	r3, #0
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007160:	f10a 0a01 	add.w	sl, sl, #1
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800716c:	931a      	str	r3, [sp, #104]	; 0x68
 800716e:	4654      	mov	r4, sl
 8007170:	2205      	movs	r2, #5
 8007172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007176:	4858      	ldr	r0, [pc, #352]	; (80072d8 <_vfiprintf_r+0x24c>)
 8007178:	f7f9 f832 	bl	80001e0 <memchr>
 800717c:	9a04      	ldr	r2, [sp, #16]
 800717e:	b9d8      	cbnz	r0, 80071b8 <_vfiprintf_r+0x12c>
 8007180:	06d1      	lsls	r1, r2, #27
 8007182:	bf44      	itt	mi
 8007184:	2320      	movmi	r3, #32
 8007186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800718a:	0713      	lsls	r3, r2, #28
 800718c:	bf44      	itt	mi
 800718e:	232b      	movmi	r3, #43	; 0x2b
 8007190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007194:	f89a 3000 	ldrb.w	r3, [sl]
 8007198:	2b2a      	cmp	r3, #42	; 0x2a
 800719a:	d015      	beq.n	80071c8 <_vfiprintf_r+0x13c>
 800719c:	9a07      	ldr	r2, [sp, #28]
 800719e:	4654      	mov	r4, sl
 80071a0:	2000      	movs	r0, #0
 80071a2:	f04f 0c0a 	mov.w	ip, #10
 80071a6:	4621      	mov	r1, r4
 80071a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ac:	3b30      	subs	r3, #48	; 0x30
 80071ae:	2b09      	cmp	r3, #9
 80071b0:	d94e      	bls.n	8007250 <_vfiprintf_r+0x1c4>
 80071b2:	b1b0      	cbz	r0, 80071e2 <_vfiprintf_r+0x156>
 80071b4:	9207      	str	r2, [sp, #28]
 80071b6:	e014      	b.n	80071e2 <_vfiprintf_r+0x156>
 80071b8:	eba0 0308 	sub.w	r3, r0, r8
 80071bc:	fa09 f303 	lsl.w	r3, r9, r3
 80071c0:	4313      	orrs	r3, r2
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	46a2      	mov	sl, r4
 80071c6:	e7d2      	b.n	800716e <_vfiprintf_r+0xe2>
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	1d19      	adds	r1, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	9103      	str	r1, [sp, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bfbb      	ittet	lt
 80071d4:	425b      	neglt	r3, r3
 80071d6:	f042 0202 	orrlt.w	r2, r2, #2
 80071da:	9307      	strge	r3, [sp, #28]
 80071dc:	9307      	strlt	r3, [sp, #28]
 80071de:	bfb8      	it	lt
 80071e0:	9204      	strlt	r2, [sp, #16]
 80071e2:	7823      	ldrb	r3, [r4, #0]
 80071e4:	2b2e      	cmp	r3, #46	; 0x2e
 80071e6:	d10c      	bne.n	8007202 <_vfiprintf_r+0x176>
 80071e8:	7863      	ldrb	r3, [r4, #1]
 80071ea:	2b2a      	cmp	r3, #42	; 0x2a
 80071ec:	d135      	bne.n	800725a <_vfiprintf_r+0x1ce>
 80071ee:	9b03      	ldr	r3, [sp, #12]
 80071f0:	1d1a      	adds	r2, r3, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	9203      	str	r2, [sp, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bfb8      	it	lt
 80071fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80071fe:	3402      	adds	r4, #2
 8007200:	9305      	str	r3, [sp, #20]
 8007202:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072e8 <_vfiprintf_r+0x25c>
 8007206:	7821      	ldrb	r1, [r4, #0]
 8007208:	2203      	movs	r2, #3
 800720a:	4650      	mov	r0, sl
 800720c:	f7f8 ffe8 	bl	80001e0 <memchr>
 8007210:	b140      	cbz	r0, 8007224 <_vfiprintf_r+0x198>
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	eba0 000a 	sub.w	r0, r0, sl
 8007218:	fa03 f000 	lsl.w	r0, r3, r0
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	4303      	orrs	r3, r0
 8007220:	3401      	adds	r4, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007228:	482c      	ldr	r0, [pc, #176]	; (80072dc <_vfiprintf_r+0x250>)
 800722a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800722e:	2206      	movs	r2, #6
 8007230:	f7f8 ffd6 	bl	80001e0 <memchr>
 8007234:	2800      	cmp	r0, #0
 8007236:	d03f      	beq.n	80072b8 <_vfiprintf_r+0x22c>
 8007238:	4b29      	ldr	r3, [pc, #164]	; (80072e0 <_vfiprintf_r+0x254>)
 800723a:	bb1b      	cbnz	r3, 8007284 <_vfiprintf_r+0x1f8>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	3307      	adds	r3, #7
 8007240:	f023 0307 	bic.w	r3, r3, #7
 8007244:	3308      	adds	r3, #8
 8007246:	9303      	str	r3, [sp, #12]
 8007248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724a:	443b      	add	r3, r7
 800724c:	9309      	str	r3, [sp, #36]	; 0x24
 800724e:	e767      	b.n	8007120 <_vfiprintf_r+0x94>
 8007250:	fb0c 3202 	mla	r2, ip, r2, r3
 8007254:	460c      	mov	r4, r1
 8007256:	2001      	movs	r0, #1
 8007258:	e7a5      	b.n	80071a6 <_vfiprintf_r+0x11a>
 800725a:	2300      	movs	r3, #0
 800725c:	3401      	adds	r4, #1
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	4619      	mov	r1, r3
 8007262:	f04f 0c0a 	mov.w	ip, #10
 8007266:	4620      	mov	r0, r4
 8007268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800726c:	3a30      	subs	r2, #48	; 0x30
 800726e:	2a09      	cmp	r2, #9
 8007270:	d903      	bls.n	800727a <_vfiprintf_r+0x1ee>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c5      	beq.n	8007202 <_vfiprintf_r+0x176>
 8007276:	9105      	str	r1, [sp, #20]
 8007278:	e7c3      	b.n	8007202 <_vfiprintf_r+0x176>
 800727a:	fb0c 2101 	mla	r1, ip, r1, r2
 800727e:	4604      	mov	r4, r0
 8007280:	2301      	movs	r3, #1
 8007282:	e7f0      	b.n	8007266 <_vfiprintf_r+0x1da>
 8007284:	ab03      	add	r3, sp, #12
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	462a      	mov	r2, r5
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <_vfiprintf_r+0x258>)
 800728c:	a904      	add	r1, sp, #16
 800728e:	4630      	mov	r0, r6
 8007290:	f7fd fe24 	bl	8004edc <_printf_float>
 8007294:	4607      	mov	r7, r0
 8007296:	1c78      	adds	r0, r7, #1
 8007298:	d1d6      	bne.n	8007248 <_vfiprintf_r+0x1bc>
 800729a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800729c:	07d9      	lsls	r1, r3, #31
 800729e:	d405      	bmi.n	80072ac <_vfiprintf_r+0x220>
 80072a0:	89ab      	ldrh	r3, [r5, #12]
 80072a2:	059a      	lsls	r2, r3, #22
 80072a4:	d402      	bmi.n	80072ac <_vfiprintf_r+0x220>
 80072a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a8:	f000 faaf 	bl	800780a <__retarget_lock_release_recursive>
 80072ac:	89ab      	ldrh	r3, [r5, #12]
 80072ae:	065b      	lsls	r3, r3, #25
 80072b0:	f53f af12 	bmi.w	80070d8 <_vfiprintf_r+0x4c>
 80072b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072b6:	e711      	b.n	80070dc <_vfiprintf_r+0x50>
 80072b8:	ab03      	add	r3, sp, #12
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	462a      	mov	r2, r5
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <_vfiprintf_r+0x258>)
 80072c0:	a904      	add	r1, sp, #16
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7fe f8ae 	bl	8005424 <_printf_i>
 80072c8:	e7e4      	b.n	8007294 <_vfiprintf_r+0x208>
 80072ca:	bf00      	nop
 80072cc:	08007ee4 	.word	0x08007ee4
 80072d0:	08007f04 	.word	0x08007f04
 80072d4:	08007ec4 	.word	0x08007ec4
 80072d8:	08007d6c 	.word	0x08007d6c
 80072dc:	08007d76 	.word	0x08007d76
 80072e0:	08004edd 	.word	0x08004edd
 80072e4:	08007067 	.word	0x08007067
 80072e8:	08007d72 	.word	0x08007d72

080072ec <__swbuf_r>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	460e      	mov	r6, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	4605      	mov	r5, r0
 80072f4:	b118      	cbz	r0, 80072fe <__swbuf_r+0x12>
 80072f6:	6983      	ldr	r3, [r0, #24]
 80072f8:	b90b      	cbnz	r3, 80072fe <__swbuf_r+0x12>
 80072fa:	f000 f9e7 	bl	80076cc <__sinit>
 80072fe:	4b21      	ldr	r3, [pc, #132]	; (8007384 <__swbuf_r+0x98>)
 8007300:	429c      	cmp	r4, r3
 8007302:	d12b      	bne.n	800735c <__swbuf_r+0x70>
 8007304:	686c      	ldr	r4, [r5, #4]
 8007306:	69a3      	ldr	r3, [r4, #24]
 8007308:	60a3      	str	r3, [r4, #8]
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	071a      	lsls	r2, r3, #28
 800730e:	d52f      	bpl.n	8007370 <__swbuf_r+0x84>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	b36b      	cbz	r3, 8007370 <__swbuf_r+0x84>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	1ac0      	subs	r0, r0, r3
 800731a:	6963      	ldr	r3, [r4, #20]
 800731c:	b2f6      	uxtb	r6, r6
 800731e:	4283      	cmp	r3, r0
 8007320:	4637      	mov	r7, r6
 8007322:	dc04      	bgt.n	800732e <__swbuf_r+0x42>
 8007324:	4621      	mov	r1, r4
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f93c 	bl	80075a4 <_fflush_r>
 800732c:	bb30      	cbnz	r0, 800737c <__swbuf_r+0x90>
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	3b01      	subs	r3, #1
 8007332:	60a3      	str	r3, [r4, #8]
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	6022      	str	r2, [r4, #0]
 800733a:	701e      	strb	r6, [r3, #0]
 800733c:	6963      	ldr	r3, [r4, #20]
 800733e:	3001      	adds	r0, #1
 8007340:	4283      	cmp	r3, r0
 8007342:	d004      	beq.n	800734e <__swbuf_r+0x62>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	07db      	lsls	r3, r3, #31
 8007348:	d506      	bpl.n	8007358 <__swbuf_r+0x6c>
 800734a:	2e0a      	cmp	r6, #10
 800734c:	d104      	bne.n	8007358 <__swbuf_r+0x6c>
 800734e:	4621      	mov	r1, r4
 8007350:	4628      	mov	r0, r5
 8007352:	f000 f927 	bl	80075a4 <_fflush_r>
 8007356:	b988      	cbnz	r0, 800737c <__swbuf_r+0x90>
 8007358:	4638      	mov	r0, r7
 800735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <__swbuf_r+0x9c>)
 800735e:	429c      	cmp	r4, r3
 8007360:	d101      	bne.n	8007366 <__swbuf_r+0x7a>
 8007362:	68ac      	ldr	r4, [r5, #8]
 8007364:	e7cf      	b.n	8007306 <__swbuf_r+0x1a>
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <__swbuf_r+0xa0>)
 8007368:	429c      	cmp	r4, r3
 800736a:	bf08      	it	eq
 800736c:	68ec      	ldreq	r4, [r5, #12]
 800736e:	e7ca      	b.n	8007306 <__swbuf_r+0x1a>
 8007370:	4621      	mov	r1, r4
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f81a 	bl	80073ac <__swsetup_r>
 8007378:	2800      	cmp	r0, #0
 800737a:	d0cb      	beq.n	8007314 <__swbuf_r+0x28>
 800737c:	f04f 37ff 	mov.w	r7, #4294967295
 8007380:	e7ea      	b.n	8007358 <__swbuf_r+0x6c>
 8007382:	bf00      	nop
 8007384:	08007ee4 	.word	0x08007ee4
 8007388:	08007f04 	.word	0x08007f04
 800738c:	08007ec4 	.word	0x08007ec4

08007390 <__ascii_wctomb>:
 8007390:	b149      	cbz	r1, 80073a6 <__ascii_wctomb+0x16>
 8007392:	2aff      	cmp	r2, #255	; 0xff
 8007394:	bf85      	ittet	hi
 8007396:	238a      	movhi	r3, #138	; 0x8a
 8007398:	6003      	strhi	r3, [r0, #0]
 800739a:	700a      	strbls	r2, [r1, #0]
 800739c:	f04f 30ff 	movhi.w	r0, #4294967295
 80073a0:	bf98      	it	ls
 80073a2:	2001      	movls	r0, #1
 80073a4:	4770      	bx	lr
 80073a6:	4608      	mov	r0, r1
 80073a8:	4770      	bx	lr
	...

080073ac <__swsetup_r>:
 80073ac:	4b32      	ldr	r3, [pc, #200]	; (8007478 <__swsetup_r+0xcc>)
 80073ae:	b570      	push	{r4, r5, r6, lr}
 80073b0:	681d      	ldr	r5, [r3, #0]
 80073b2:	4606      	mov	r6, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	b125      	cbz	r5, 80073c2 <__swsetup_r+0x16>
 80073b8:	69ab      	ldr	r3, [r5, #24]
 80073ba:	b913      	cbnz	r3, 80073c2 <__swsetup_r+0x16>
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f985 	bl	80076cc <__sinit>
 80073c2:	4b2e      	ldr	r3, [pc, #184]	; (800747c <__swsetup_r+0xd0>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d10f      	bne.n	80073e8 <__swsetup_r+0x3c>
 80073c8:	686c      	ldr	r4, [r5, #4]
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d0:	0719      	lsls	r1, r3, #28
 80073d2:	d42c      	bmi.n	800742e <__swsetup_r+0x82>
 80073d4:	06dd      	lsls	r5, r3, #27
 80073d6:	d411      	bmi.n	80073fc <__swsetup_r+0x50>
 80073d8:	2309      	movs	r3, #9
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	e03e      	b.n	8007466 <__swsetup_r+0xba>
 80073e8:	4b25      	ldr	r3, [pc, #148]	; (8007480 <__swsetup_r+0xd4>)
 80073ea:	429c      	cmp	r4, r3
 80073ec:	d101      	bne.n	80073f2 <__swsetup_r+0x46>
 80073ee:	68ac      	ldr	r4, [r5, #8]
 80073f0:	e7eb      	b.n	80073ca <__swsetup_r+0x1e>
 80073f2:	4b24      	ldr	r3, [pc, #144]	; (8007484 <__swsetup_r+0xd8>)
 80073f4:	429c      	cmp	r4, r3
 80073f6:	bf08      	it	eq
 80073f8:	68ec      	ldreq	r4, [r5, #12]
 80073fa:	e7e6      	b.n	80073ca <__swsetup_r+0x1e>
 80073fc:	0758      	lsls	r0, r3, #29
 80073fe:	d512      	bpl.n	8007426 <__swsetup_r+0x7a>
 8007400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007402:	b141      	cbz	r1, 8007416 <__swsetup_r+0x6a>
 8007404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <__swsetup_r+0x66>
 800740c:	4630      	mov	r0, r6
 800740e:	f7ff fb6f 	bl	8006af0 <_free_r>
 8007412:	2300      	movs	r3, #0
 8007414:	6363      	str	r3, [r4, #52]	; 0x34
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	2300      	movs	r3, #0
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	b94b      	cbnz	r3, 8007446 <__swsetup_r+0x9a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d003      	beq.n	8007446 <__swsetup_r+0x9a>
 800743e:	4621      	mov	r1, r4
 8007440:	4630      	mov	r0, r6
 8007442:	f000 fa07 	bl	8007854 <__smakebuf_r>
 8007446:	89a0      	ldrh	r0, [r4, #12]
 8007448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800744c:	f010 0301 	ands.w	r3, r0, #1
 8007450:	d00a      	beq.n	8007468 <__swsetup_r+0xbc>
 8007452:	2300      	movs	r3, #0
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	6963      	ldr	r3, [r4, #20]
 8007458:	425b      	negs	r3, r3
 800745a:	61a3      	str	r3, [r4, #24]
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	b943      	cbnz	r3, 8007472 <__swsetup_r+0xc6>
 8007460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007464:	d1ba      	bne.n	80073dc <__swsetup_r+0x30>
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	0781      	lsls	r1, r0, #30
 800746a:	bf58      	it	pl
 800746c:	6963      	ldrpl	r3, [r4, #20]
 800746e:	60a3      	str	r3, [r4, #8]
 8007470:	e7f4      	b.n	800745c <__swsetup_r+0xb0>
 8007472:	2000      	movs	r0, #0
 8007474:	e7f7      	b.n	8007466 <__swsetup_r+0xba>
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c
 800747c:	08007ee4 	.word	0x08007ee4
 8007480:	08007f04 	.word	0x08007f04
 8007484:	08007ec4 	.word	0x08007ec4

08007488 <abort>:
 8007488:	b508      	push	{r3, lr}
 800748a:	2006      	movs	r0, #6
 800748c:	f000 fa52 	bl	8007934 <raise>
 8007490:	2001      	movs	r0, #1
 8007492:	f7fa f90d 	bl	80016b0 <_exit>
	...

08007498 <__sflush_r>:
 8007498:	898a      	ldrh	r2, [r1, #12]
 800749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	4605      	mov	r5, r0
 80074a0:	0710      	lsls	r0, r2, #28
 80074a2:	460c      	mov	r4, r1
 80074a4:	d458      	bmi.n	8007558 <__sflush_r+0xc0>
 80074a6:	684b      	ldr	r3, [r1, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dc05      	bgt.n	80074b8 <__sflush_r+0x20>
 80074ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dc02      	bgt.n	80074b8 <__sflush_r+0x20>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d0f9      	beq.n	80074b2 <__sflush_r+0x1a>
 80074be:	2300      	movs	r3, #0
 80074c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074c4:	682f      	ldr	r7, [r5, #0]
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	d032      	beq.n	8007530 <__sflush_r+0x98>
 80074ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	075a      	lsls	r2, r3, #29
 80074d0:	d505      	bpl.n	80074de <__sflush_r+0x46>
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	1ac0      	subs	r0, r0, r3
 80074d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074d8:	b10b      	cbz	r3, 80074de <__sflush_r+0x46>
 80074da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074dc:	1ac0      	subs	r0, r0, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	4602      	mov	r2, r0
 80074e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074e4:	6a21      	ldr	r1, [r4, #32]
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	d106      	bne.n	80074fe <__sflush_r+0x66>
 80074f0:	6829      	ldr	r1, [r5, #0]
 80074f2:	291d      	cmp	r1, #29
 80074f4:	d82c      	bhi.n	8007550 <__sflush_r+0xb8>
 80074f6:	4a2a      	ldr	r2, [pc, #168]	; (80075a0 <__sflush_r+0x108>)
 80074f8:	40ca      	lsrs	r2, r1
 80074fa:	07d6      	lsls	r6, r2, #31
 80074fc:	d528      	bpl.n	8007550 <__sflush_r+0xb8>
 80074fe:	2200      	movs	r2, #0
 8007500:	6062      	str	r2, [r4, #4]
 8007502:	04d9      	lsls	r1, r3, #19
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	d504      	bpl.n	8007514 <__sflush_r+0x7c>
 800750a:	1c42      	adds	r2, r0, #1
 800750c:	d101      	bne.n	8007512 <__sflush_r+0x7a>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b903      	cbnz	r3, 8007514 <__sflush_r+0x7c>
 8007512:	6560      	str	r0, [r4, #84]	; 0x54
 8007514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007516:	602f      	str	r7, [r5, #0]
 8007518:	2900      	cmp	r1, #0
 800751a:	d0ca      	beq.n	80074b2 <__sflush_r+0x1a>
 800751c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007520:	4299      	cmp	r1, r3
 8007522:	d002      	beq.n	800752a <__sflush_r+0x92>
 8007524:	4628      	mov	r0, r5
 8007526:	f7ff fae3 	bl	8006af0 <_free_r>
 800752a:	2000      	movs	r0, #0
 800752c:	6360      	str	r0, [r4, #52]	; 0x34
 800752e:	e7c1      	b.n	80074b4 <__sflush_r+0x1c>
 8007530:	6a21      	ldr	r1, [r4, #32]
 8007532:	2301      	movs	r3, #1
 8007534:	4628      	mov	r0, r5
 8007536:	47b0      	blx	r6
 8007538:	1c41      	adds	r1, r0, #1
 800753a:	d1c7      	bne.n	80074cc <__sflush_r+0x34>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0c4      	beq.n	80074cc <__sflush_r+0x34>
 8007542:	2b1d      	cmp	r3, #29
 8007544:	d001      	beq.n	800754a <__sflush_r+0xb2>
 8007546:	2b16      	cmp	r3, #22
 8007548:	d101      	bne.n	800754e <__sflush_r+0xb6>
 800754a:	602f      	str	r7, [r5, #0]
 800754c:	e7b1      	b.n	80074b2 <__sflush_r+0x1a>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	e7ad      	b.n	80074b4 <__sflush_r+0x1c>
 8007558:	690f      	ldr	r7, [r1, #16]
 800755a:	2f00      	cmp	r7, #0
 800755c:	d0a9      	beq.n	80074b2 <__sflush_r+0x1a>
 800755e:	0793      	lsls	r3, r2, #30
 8007560:	680e      	ldr	r6, [r1, #0]
 8007562:	bf08      	it	eq
 8007564:	694b      	ldreq	r3, [r1, #20]
 8007566:	600f      	str	r7, [r1, #0]
 8007568:	bf18      	it	ne
 800756a:	2300      	movne	r3, #0
 800756c:	eba6 0807 	sub.w	r8, r6, r7
 8007570:	608b      	str	r3, [r1, #8]
 8007572:	f1b8 0f00 	cmp.w	r8, #0
 8007576:	dd9c      	ble.n	80074b2 <__sflush_r+0x1a>
 8007578:	6a21      	ldr	r1, [r4, #32]
 800757a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800757c:	4643      	mov	r3, r8
 800757e:	463a      	mov	r2, r7
 8007580:	4628      	mov	r0, r5
 8007582:	47b0      	blx	r6
 8007584:	2800      	cmp	r0, #0
 8007586:	dc06      	bgt.n	8007596 <__sflush_r+0xfe>
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	e78e      	b.n	80074b4 <__sflush_r+0x1c>
 8007596:	4407      	add	r7, r0
 8007598:	eba8 0800 	sub.w	r8, r8, r0
 800759c:	e7e9      	b.n	8007572 <__sflush_r+0xda>
 800759e:	bf00      	nop
 80075a0:	20400001 	.word	0x20400001

080075a4 <_fflush_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b913      	cbnz	r3, 80075b4 <_fflush_r+0x10>
 80075ae:	2500      	movs	r5, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	b118      	cbz	r0, 80075be <_fflush_r+0x1a>
 80075b6:	6983      	ldr	r3, [r0, #24]
 80075b8:	b90b      	cbnz	r3, 80075be <_fflush_r+0x1a>
 80075ba:	f000 f887 	bl	80076cc <__sinit>
 80075be:	4b14      	ldr	r3, [pc, #80]	; (8007610 <_fflush_r+0x6c>)
 80075c0:	429c      	cmp	r4, r3
 80075c2:	d11b      	bne.n	80075fc <_fflush_r+0x58>
 80075c4:	686c      	ldr	r4, [r5, #4]
 80075c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0ef      	beq.n	80075ae <_fflush_r+0xa>
 80075ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075d0:	07d0      	lsls	r0, r2, #31
 80075d2:	d404      	bmi.n	80075de <_fflush_r+0x3a>
 80075d4:	0599      	lsls	r1, r3, #22
 80075d6:	d402      	bmi.n	80075de <_fflush_r+0x3a>
 80075d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075da:	f000 f915 	bl	8007808 <__retarget_lock_acquire_recursive>
 80075de:	4628      	mov	r0, r5
 80075e0:	4621      	mov	r1, r4
 80075e2:	f7ff ff59 	bl	8007498 <__sflush_r>
 80075e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075e8:	07da      	lsls	r2, r3, #31
 80075ea:	4605      	mov	r5, r0
 80075ec:	d4e0      	bmi.n	80075b0 <_fflush_r+0xc>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	059b      	lsls	r3, r3, #22
 80075f2:	d4dd      	bmi.n	80075b0 <_fflush_r+0xc>
 80075f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075f6:	f000 f908 	bl	800780a <__retarget_lock_release_recursive>
 80075fa:	e7d9      	b.n	80075b0 <_fflush_r+0xc>
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <_fflush_r+0x70>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d101      	bne.n	8007606 <_fflush_r+0x62>
 8007602:	68ac      	ldr	r4, [r5, #8]
 8007604:	e7df      	b.n	80075c6 <_fflush_r+0x22>
 8007606:	4b04      	ldr	r3, [pc, #16]	; (8007618 <_fflush_r+0x74>)
 8007608:	429c      	cmp	r4, r3
 800760a:	bf08      	it	eq
 800760c:	68ec      	ldreq	r4, [r5, #12]
 800760e:	e7da      	b.n	80075c6 <_fflush_r+0x22>
 8007610:	08007ee4 	.word	0x08007ee4
 8007614:	08007f04 	.word	0x08007f04
 8007618:	08007ec4 	.word	0x08007ec4

0800761c <std>:
 800761c:	2300      	movs	r3, #0
 800761e:	b510      	push	{r4, lr}
 8007620:	4604      	mov	r4, r0
 8007622:	e9c0 3300 	strd	r3, r3, [r0]
 8007626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800762a:	6083      	str	r3, [r0, #8]
 800762c:	8181      	strh	r1, [r0, #12]
 800762e:	6643      	str	r3, [r0, #100]	; 0x64
 8007630:	81c2      	strh	r2, [r0, #14]
 8007632:	6183      	str	r3, [r0, #24]
 8007634:	4619      	mov	r1, r3
 8007636:	2208      	movs	r2, #8
 8007638:	305c      	adds	r0, #92	; 0x5c
 800763a:	f7fd fba7 	bl	8004d8c <memset>
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <std+0x38>)
 8007640:	6263      	str	r3, [r4, #36]	; 0x24
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <std+0x3c>)
 8007644:	62a3      	str	r3, [r4, #40]	; 0x28
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <std+0x40>)
 8007648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <std+0x44>)
 800764c:	6224      	str	r4, [r4, #32]
 800764e:	6323      	str	r3, [r4, #48]	; 0x30
 8007650:	bd10      	pop	{r4, pc}
 8007652:	bf00      	nop
 8007654:	0800796d 	.word	0x0800796d
 8007658:	0800798f 	.word	0x0800798f
 800765c:	080079c7 	.word	0x080079c7
 8007660:	080079eb 	.word	0x080079eb

08007664 <_cleanup_r>:
 8007664:	4901      	ldr	r1, [pc, #4]	; (800766c <_cleanup_r+0x8>)
 8007666:	f000 b8af 	b.w	80077c8 <_fwalk_reent>
 800766a:	bf00      	nop
 800766c:	080075a5 	.word	0x080075a5

08007670 <__sfmoreglue>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	1e4a      	subs	r2, r1, #1
 8007674:	2568      	movs	r5, #104	; 0x68
 8007676:	4355      	muls	r5, r2
 8007678:	460e      	mov	r6, r1
 800767a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800767e:	f7ff fa87 	bl	8006b90 <_malloc_r>
 8007682:	4604      	mov	r4, r0
 8007684:	b140      	cbz	r0, 8007698 <__sfmoreglue+0x28>
 8007686:	2100      	movs	r1, #0
 8007688:	e9c0 1600 	strd	r1, r6, [r0]
 800768c:	300c      	adds	r0, #12
 800768e:	60a0      	str	r0, [r4, #8]
 8007690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007694:	f7fd fb7a 	bl	8004d8c <memset>
 8007698:	4620      	mov	r0, r4
 800769a:	bd70      	pop	{r4, r5, r6, pc}

0800769c <__sfp_lock_acquire>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__sfp_lock_acquire+0x8>)
 800769e:	f000 b8b3 	b.w	8007808 <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	200003a0 	.word	0x200003a0

080076a8 <__sfp_lock_release>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sfp_lock_release+0x8>)
 80076aa:	f000 b8ae 	b.w	800780a <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	200003a0 	.word	0x200003a0

080076b4 <__sinit_lock_acquire>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__sinit_lock_acquire+0x8>)
 80076b6:	f000 b8a7 	b.w	8007808 <__retarget_lock_acquire_recursive>
 80076ba:	bf00      	nop
 80076bc:	2000039b 	.word	0x2000039b

080076c0 <__sinit_lock_release>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__sinit_lock_release+0x8>)
 80076c2:	f000 b8a2 	b.w	800780a <__retarget_lock_release_recursive>
 80076c6:	bf00      	nop
 80076c8:	2000039b 	.word	0x2000039b

080076cc <__sinit>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	4604      	mov	r4, r0
 80076d0:	f7ff fff0 	bl	80076b4 <__sinit_lock_acquire>
 80076d4:	69a3      	ldr	r3, [r4, #24]
 80076d6:	b11b      	cbz	r3, 80076e0 <__sinit+0x14>
 80076d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076dc:	f7ff bff0 	b.w	80076c0 <__sinit_lock_release>
 80076e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076e4:	6523      	str	r3, [r4, #80]	; 0x50
 80076e6:	4b13      	ldr	r3, [pc, #76]	; (8007734 <__sinit+0x68>)
 80076e8:	4a13      	ldr	r2, [pc, #76]	; (8007738 <__sinit+0x6c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80076ee:	42a3      	cmp	r3, r4
 80076f0:	bf04      	itt	eq
 80076f2:	2301      	moveq	r3, #1
 80076f4:	61a3      	streq	r3, [r4, #24]
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 f820 	bl	800773c <__sfp>
 80076fc:	6060      	str	r0, [r4, #4]
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 f81c 	bl	800773c <__sfp>
 8007704:	60a0      	str	r0, [r4, #8]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f818 	bl	800773c <__sfp>
 800770c:	2200      	movs	r2, #0
 800770e:	60e0      	str	r0, [r4, #12]
 8007710:	2104      	movs	r1, #4
 8007712:	6860      	ldr	r0, [r4, #4]
 8007714:	f7ff ff82 	bl	800761c <std>
 8007718:	68a0      	ldr	r0, [r4, #8]
 800771a:	2201      	movs	r2, #1
 800771c:	2109      	movs	r1, #9
 800771e:	f7ff ff7d 	bl	800761c <std>
 8007722:	68e0      	ldr	r0, [r4, #12]
 8007724:	2202      	movs	r2, #2
 8007726:	2112      	movs	r1, #18
 8007728:	f7ff ff78 	bl	800761c <std>
 800772c:	2301      	movs	r3, #1
 800772e:	61a3      	str	r3, [r4, #24]
 8007730:	e7d2      	b.n	80076d8 <__sinit+0xc>
 8007732:	bf00      	nop
 8007734:	08007b40 	.word	0x08007b40
 8007738:	08007665 	.word	0x08007665

0800773c <__sfp>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	4607      	mov	r7, r0
 8007740:	f7ff ffac 	bl	800769c <__sfp_lock_acquire>
 8007744:	4b1e      	ldr	r3, [pc, #120]	; (80077c0 <__sfp+0x84>)
 8007746:	681e      	ldr	r6, [r3, #0]
 8007748:	69b3      	ldr	r3, [r6, #24]
 800774a:	b913      	cbnz	r3, 8007752 <__sfp+0x16>
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff ffbd 	bl	80076cc <__sinit>
 8007752:	3648      	adds	r6, #72	; 0x48
 8007754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007758:	3b01      	subs	r3, #1
 800775a:	d503      	bpl.n	8007764 <__sfp+0x28>
 800775c:	6833      	ldr	r3, [r6, #0]
 800775e:	b30b      	cbz	r3, 80077a4 <__sfp+0x68>
 8007760:	6836      	ldr	r6, [r6, #0]
 8007762:	e7f7      	b.n	8007754 <__sfp+0x18>
 8007764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007768:	b9d5      	cbnz	r5, 80077a0 <__sfp+0x64>
 800776a:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <__sfp+0x88>)
 800776c:	60e3      	str	r3, [r4, #12]
 800776e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007772:	6665      	str	r5, [r4, #100]	; 0x64
 8007774:	f000 f847 	bl	8007806 <__retarget_lock_init_recursive>
 8007778:	f7ff ff96 	bl	80076a8 <__sfp_lock_release>
 800777c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007784:	6025      	str	r5, [r4, #0]
 8007786:	61a5      	str	r5, [r4, #24]
 8007788:	2208      	movs	r2, #8
 800778a:	4629      	mov	r1, r5
 800778c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007790:	f7fd fafc 	bl	8004d8c <memset>
 8007794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800779c:	4620      	mov	r0, r4
 800779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a0:	3468      	adds	r4, #104	; 0x68
 80077a2:	e7d9      	b.n	8007758 <__sfp+0x1c>
 80077a4:	2104      	movs	r1, #4
 80077a6:	4638      	mov	r0, r7
 80077a8:	f7ff ff62 	bl	8007670 <__sfmoreglue>
 80077ac:	4604      	mov	r4, r0
 80077ae:	6030      	str	r0, [r6, #0]
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1d5      	bne.n	8007760 <__sfp+0x24>
 80077b4:	f7ff ff78 	bl	80076a8 <__sfp_lock_release>
 80077b8:	230c      	movs	r3, #12
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	e7ee      	b.n	800779c <__sfp+0x60>
 80077be:	bf00      	nop
 80077c0:	08007b40 	.word	0x08007b40
 80077c4:	ffff0001 	.word	0xffff0001

080077c8 <_fwalk_reent>:
 80077c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077cc:	4606      	mov	r6, r0
 80077ce:	4688      	mov	r8, r1
 80077d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077d4:	2700      	movs	r7, #0
 80077d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077da:	f1b9 0901 	subs.w	r9, r9, #1
 80077de:	d505      	bpl.n	80077ec <_fwalk_reent+0x24>
 80077e0:	6824      	ldr	r4, [r4, #0]
 80077e2:	2c00      	cmp	r4, #0
 80077e4:	d1f7      	bne.n	80077d6 <_fwalk_reent+0xe>
 80077e6:	4638      	mov	r0, r7
 80077e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ec:	89ab      	ldrh	r3, [r5, #12]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d907      	bls.n	8007802 <_fwalk_reent+0x3a>
 80077f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077f6:	3301      	adds	r3, #1
 80077f8:	d003      	beq.n	8007802 <_fwalk_reent+0x3a>
 80077fa:	4629      	mov	r1, r5
 80077fc:	4630      	mov	r0, r6
 80077fe:	47c0      	blx	r8
 8007800:	4307      	orrs	r7, r0
 8007802:	3568      	adds	r5, #104	; 0x68
 8007804:	e7e9      	b.n	80077da <_fwalk_reent+0x12>

08007806 <__retarget_lock_init_recursive>:
 8007806:	4770      	bx	lr

08007808 <__retarget_lock_acquire_recursive>:
 8007808:	4770      	bx	lr

0800780a <__retarget_lock_release_recursive>:
 800780a:	4770      	bx	lr

0800780c <__swhatbuf_r>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	460e      	mov	r6, r1
 8007810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007814:	2900      	cmp	r1, #0
 8007816:	b096      	sub	sp, #88	; 0x58
 8007818:	4614      	mov	r4, r2
 800781a:	461d      	mov	r5, r3
 800781c:	da07      	bge.n	800782e <__swhatbuf_r+0x22>
 800781e:	2300      	movs	r3, #0
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	89b3      	ldrh	r3, [r6, #12]
 8007824:	061a      	lsls	r2, r3, #24
 8007826:	d410      	bmi.n	800784a <__swhatbuf_r+0x3e>
 8007828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800782c:	e00e      	b.n	800784c <__swhatbuf_r+0x40>
 800782e:	466a      	mov	r2, sp
 8007830:	f000 f902 	bl	8007a38 <_fstat_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	dbf2      	blt.n	800781e <__swhatbuf_r+0x12>
 8007838:	9a01      	ldr	r2, [sp, #4]
 800783a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800783e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007842:	425a      	negs	r2, r3
 8007844:	415a      	adcs	r2, r3
 8007846:	602a      	str	r2, [r5, #0]
 8007848:	e7ee      	b.n	8007828 <__swhatbuf_r+0x1c>
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	2000      	movs	r0, #0
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	b016      	add	sp, #88	; 0x58
 8007852:	bd70      	pop	{r4, r5, r6, pc}

08007854 <__smakebuf_r>:
 8007854:	898b      	ldrh	r3, [r1, #12]
 8007856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007858:	079d      	lsls	r5, r3, #30
 800785a:	4606      	mov	r6, r0
 800785c:	460c      	mov	r4, r1
 800785e:	d507      	bpl.n	8007870 <__smakebuf_r+0x1c>
 8007860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	2301      	movs	r3, #1
 800786a:	6163      	str	r3, [r4, #20]
 800786c:	b002      	add	sp, #8
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	ab01      	add	r3, sp, #4
 8007872:	466a      	mov	r2, sp
 8007874:	f7ff ffca 	bl	800780c <__swhatbuf_r>
 8007878:	9900      	ldr	r1, [sp, #0]
 800787a:	4605      	mov	r5, r0
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff f987 	bl	8006b90 <_malloc_r>
 8007882:	b948      	cbnz	r0, 8007898 <__smakebuf_r+0x44>
 8007884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007888:	059a      	lsls	r2, r3, #22
 800788a:	d4ef      	bmi.n	800786c <__smakebuf_r+0x18>
 800788c:	f023 0303 	bic.w	r3, r3, #3
 8007890:	f043 0302 	orr.w	r3, r3, #2
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	e7e3      	b.n	8007860 <__smakebuf_r+0xc>
 8007898:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <__smakebuf_r+0x7c>)
 800789a:	62b3      	str	r3, [r6, #40]	; 0x28
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	6020      	str	r0, [r4, #0]
 80078a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	6163      	str	r3, [r4, #20]
 80078aa:	9b01      	ldr	r3, [sp, #4]
 80078ac:	6120      	str	r0, [r4, #16]
 80078ae:	b15b      	cbz	r3, 80078c8 <__smakebuf_r+0x74>
 80078b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 f8d1 	bl	8007a5c <_isatty_r>
 80078ba:	b128      	cbz	r0, 80078c8 <__smakebuf_r+0x74>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	f023 0303 	bic.w	r3, r3, #3
 80078c2:	f043 0301 	orr.w	r3, r3, #1
 80078c6:	81a3      	strh	r3, [r4, #12]
 80078c8:	89a0      	ldrh	r0, [r4, #12]
 80078ca:	4305      	orrs	r5, r0
 80078cc:	81a5      	strh	r5, [r4, #12]
 80078ce:	e7cd      	b.n	800786c <__smakebuf_r+0x18>
 80078d0:	08007665 	.word	0x08007665

080078d4 <_malloc_usable_size_r>:
 80078d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d8:	1f18      	subs	r0, r3, #4
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bfbc      	itt	lt
 80078de:	580b      	ldrlt	r3, [r1, r0]
 80078e0:	18c0      	addlt	r0, r0, r3
 80078e2:	4770      	bx	lr

080078e4 <_raise_r>:
 80078e4:	291f      	cmp	r1, #31
 80078e6:	b538      	push	{r3, r4, r5, lr}
 80078e8:	4604      	mov	r4, r0
 80078ea:	460d      	mov	r5, r1
 80078ec:	d904      	bls.n	80078f8 <_raise_r+0x14>
 80078ee:	2316      	movs	r3, #22
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	f04f 30ff 	mov.w	r0, #4294967295
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078fa:	b112      	cbz	r2, 8007902 <_raise_r+0x1e>
 80078fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007900:	b94b      	cbnz	r3, 8007916 <_raise_r+0x32>
 8007902:	4620      	mov	r0, r4
 8007904:	f000 f830 	bl	8007968 <_getpid_r>
 8007908:	462a      	mov	r2, r5
 800790a:	4601      	mov	r1, r0
 800790c:	4620      	mov	r0, r4
 800790e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007912:	f000 b817 	b.w	8007944 <_kill_r>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d00a      	beq.n	8007930 <_raise_r+0x4c>
 800791a:	1c59      	adds	r1, r3, #1
 800791c:	d103      	bne.n	8007926 <_raise_r+0x42>
 800791e:	2316      	movs	r3, #22
 8007920:	6003      	str	r3, [r0, #0]
 8007922:	2001      	movs	r0, #1
 8007924:	e7e7      	b.n	80078f6 <_raise_r+0x12>
 8007926:	2400      	movs	r4, #0
 8007928:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800792c:	4628      	mov	r0, r5
 800792e:	4798      	blx	r3
 8007930:	2000      	movs	r0, #0
 8007932:	e7e0      	b.n	80078f6 <_raise_r+0x12>

08007934 <raise>:
 8007934:	4b02      	ldr	r3, [pc, #8]	; (8007940 <raise+0xc>)
 8007936:	4601      	mov	r1, r0
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f7ff bfd3 	b.w	80078e4 <_raise_r>
 800793e:	bf00      	nop
 8007940:	2000000c 	.word	0x2000000c

08007944 <_kill_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	; (8007964 <_kill_r+0x20>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	f7f9 fe9d 	bl	8001690 <_kill>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	d102      	bne.n	8007960 <_kill_r+0x1c>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	b103      	cbz	r3, 8007960 <_kill_r+0x1c>
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	bd38      	pop	{r3, r4, r5, pc}
 8007962:	bf00      	nop
 8007964:	20000394 	.word	0x20000394

08007968 <_getpid_r>:
 8007968:	f7f9 be8a 	b.w	8001680 <_getpid>

0800796c <__sread>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	f000 f894 	bl	8007aa0 <_read_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	bfab      	itete	ge
 800797c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800797e:	89a3      	ldrhlt	r3, [r4, #12]
 8007980:	181b      	addge	r3, r3, r0
 8007982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007986:	bfac      	ite	ge
 8007988:	6563      	strge	r3, [r4, #84]	; 0x54
 800798a:	81a3      	strhlt	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__swrite>:
 800798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007992:	461f      	mov	r7, r3
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	05db      	lsls	r3, r3, #23
 8007998:	4605      	mov	r5, r0
 800799a:	460c      	mov	r4, r1
 800799c:	4616      	mov	r6, r2
 800799e:	d505      	bpl.n	80079ac <__swrite+0x1e>
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	2302      	movs	r3, #2
 80079a6:	2200      	movs	r2, #0
 80079a8:	f000 f868 	bl	8007a7c <_lseek_r>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	f000 b817 	b.w	80079f4 <_write_r>

080079c6 <__sseek>:
 80079c6:	b510      	push	{r4, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ce:	f000 f855 	bl	8007a7c <_lseek_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	bf15      	itete	ne
 80079d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80079da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079e2:	81a3      	strheq	r3, [r4, #12]
 80079e4:	bf18      	it	ne
 80079e6:	81a3      	strhne	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__sclose>:
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 b813 	b.w	8007a18 <_close_r>
	...

080079f4 <_write_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d07      	ldr	r5, [pc, #28]	; (8007a14 <_write_r+0x20>)
 80079f8:	4604      	mov	r4, r0
 80079fa:	4608      	mov	r0, r1
 80079fc:	4611      	mov	r1, r2
 80079fe:	2200      	movs	r2, #0
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7f9 fe7b 	bl	80016fe <_write>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_write_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_write_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20000394 	.word	0x20000394

08007a18 <_close_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d06      	ldr	r5, [pc, #24]	; (8007a34 <_close_r+0x1c>)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	f7f9 fe87 	bl	8001736 <_close>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_close_r+0x1a>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_close_r+0x1a>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20000394 	.word	0x20000394

08007a38 <_fstat_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	; (8007a58 <_fstat_r+0x20>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f7f9 fe82 	bl	800174e <_fstat>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d102      	bne.n	8007a54 <_fstat_r+0x1c>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b103      	cbz	r3, 8007a54 <_fstat_r+0x1c>
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	20000394 	.word	0x20000394

08007a5c <_isatty_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d06      	ldr	r5, [pc, #24]	; (8007a78 <_isatty_r+0x1c>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7f9 fe81 	bl	800176e <_isatty>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_isatty_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_isatty_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20000394 	.word	0x20000394

08007a7c <_lseek_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	; (8007a9c <_lseek_r+0x20>)
 8007a80:	4604      	mov	r4, r0
 8007a82:	4608      	mov	r0, r1
 8007a84:	4611      	mov	r1, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f7f9 fe7a 	bl	8001784 <_lseek>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_lseek_r+0x1e>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_lseek_r+0x1e>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000394 	.word	0x20000394

08007aa0 <_read_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d07      	ldr	r5, [pc, #28]	; (8007ac0 <_read_r+0x20>)
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	602a      	str	r2, [r5, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f7f9 fe08 	bl	80016c4 <_read>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_read_r+0x1e>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_read_r+0x1e>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20000394 	.word	0x20000394

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	bf00      	nop
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
